diff --git a/Dockerfile b/Dockerfile
index 14bfa43..e1106aa 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -3,44 +3,41 @@
 # SPDX-License-Identifier: Apache-2.0
 #
 
-FROM golang:1.22.2-bookworm AS builder
+FROM golang:1.19-bullseye AS builder
 
-LABEL maintainer="Aether SD-Core <dev@lists.aetherproject.org>"
+LABEL maintainer="ONF <omec-dev@opennetworking.org>"
 
-RUN apt-get update && \
-    apt-get -y install --no-install-recommends \
-    apt-transport-https \
-    ca-certificates \
-    gcc \
-    cmake \
-    autoconf \
-    libtool \
-    pkg-config \
-    libmnl-dev \
-    libyaml-dev && \
-    apt-get clean
+#RUN apt remove cmdtest yarn
+RUN apt-get update
+RUN apt-get -y install apt-transport-https ca-certificates
+RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg > pubkey.gpg
+RUN apt-key add pubkey.gpg
+RUN curl -sL https://deb.nodesource.com/setup_10.x | bash -
+RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" |  tee /etc/apt/sources.list.d/yarn.list
+RUN apt-get update
+RUN apt-get -y install gcc cmake autoconf libtool pkg-config libmnl-dev libyaml-dev  nodejs yarn
+RUN apt-get clean
 
-WORKDIR $GOPATH/src/amf
+RUN cd $GOPATH/src && mkdir -p amf
+COPY . $GOPATH/src/amf
+RUN cd $GOPATH/src/amf \
+    && make all
 
-COPY . .
-RUN make all
+FROM alpine:3.8 as amf
 
-FROM alpine:3.19 as amf
-
-LABEL description="Aether open source 5G Core Network" \
+LABEL description="ONF open source 5G Core Network" \
     version="Stage 3"
 
 ARG DEBUG_TOOLS
 
-RUN apk update && apk add --no-cache -U bash
-
-# Install debug tools ~ 50MB (if DEBUG_TOOLS is set to true)
-RUN if [ "$DEBUG_TOOLS" = "true" ]; then \
-        apk update && apk add --no-cache -U vim strace net-tools curl netcat-openbsd bind-tools; \
-        fi
+# Install debug tools ~ 100MB (if DEBUG_TOOLS is set to true)
+RUN apk update
+RUN apk add -U vim strace net-tools curl netcat-openbsd bind-tools bash
 
 # Set working dir
-WORKDIR /free5gc/amf
+WORKDIR /free5gc
+RUN mkdir -p amf/
 
 # Copy executable and default certs
-COPY --from=builder /go/src/amf/bin/* .
+COPY --from=builder /go/src/amf/bin/* ./amf
+WORKDIR /free5gc/amf
diff --git a/Makefile b/Makefile
index 3b910ee..081d61d 100644
--- a/Makefile
+++ b/Makefile
@@ -22,7 +22,7 @@ DOCKER_LABEL_VCS_REF     ?= $(shell git diff-index --quiet HEAD -- && git rev-pa
 DOCKER_LABEL_COMMIT_DATE ?= $(shell git diff-index --quiet HEAD -- && git show -s --format=%cd --date=iso-strict HEAD || echo "unknown" )
 DOCKER_LABEL_BUILD_DATE  ?= $(shell date -u "+%Y-%m-%dT%H:%M:%SZ")
 
-DOCKER_TARGETS           ?= amf
+DOCKER_TARGETS           ?= builder amf
 
 GO_BIN_PATH = bin
 GO_SRC_PATH = ./
@@ -58,10 +58,10 @@ $(GO_BIN_PATH)/%: %.go $(NF_GO_FILES)
 
 vpath %.go $(addprefix $(GO_SRC_PATH)/, $(GO_NF))
 
-#test: $(NF_GO_FILES_ALL)
-#	@echo "Start building $(@F)...."
-#	cd $(GO_SRC_PATH)/ && \
-#	CGO_ENABLED=0 go test -o $(ROOT_PATH)/$@
+test: $(NF_GO_FILES_ALL) 
+	@echo "Start building $(@F)...."
+	cd $(GO_SRC_PATH)/ && \
+	CGO_ENABLED=0 go test -o $(ROOT_PATH)/$@
 
 clean:
 	rm -rf $(addprefix $(GO_BIN_PATH)/, $(GO_NF))
@@ -87,25 +87,3 @@ docker-push:
 	for target in $(DOCKER_TARGETS); do \
 		docker push ${DOCKER_REGISTRY}${DOCKER_REPOSITORY}5gc-$$target:${DOCKER_TAG}; \
 	done
-
-.coverage:
-	rm -rf $(CURDIR)/.coverage
-	mkdir -p $(CURDIR)/.coverage
-
-test: .coverage
-	docker run --rm -v $(CURDIR):/amf -w /amf golang:latest \
-		go test \
-			-failfast \
-			-coverprofile=.coverage/coverage-unit.txt \
-			-covermode=atomic \
-			-v \
-			./ ./...
-
-fmt:
-	@go fmt ./...
-
-golint:
-	@docker run --rm -v $(CURDIR):/app -w /app golangci/golangci-lint:latest golangci-lint run -v --config /app/.golangci.yml
-
-check-reuse:
-	@docker run --rm -v $(CURDIR):/amf -w /amf omecproject/reuse-verify:latest reuse lint
diff --git a/README.md b/README.md
index 6fcfeaa..479a095 100644
--- a/README.md
+++ b/README.md
@@ -38,11 +38,10 @@ metrics. Metrics include connected gNodeB's and its status.
 - Xn handover
 - PDU Establishment Request/Release
 - Paging
-- CN High Availibilty and Stateless session support
-- AMF metrics are available via metricfunc on the 5g Grafana dashboard
 
 ## Upcoming Changes in AMF
-
+- AMF stateless and moving the subscriber states in the database
+- Supporting multiple instances of AMF
 
 
 Compliance of the 5G Network functions can be found at [5G Compliance ](https://docs.sd-core.opennetworking.org/master/overview/3gpp-compliance-5g.html)
diff --git a/VERSION b/VERSION
index feb40e5..c0ab82c 100644
--- a/VERSION
+++ b/VERSION
@@ -1 +1 @@
-1.4.1-dev
+0.0.1-dev
diff --git a/amf.go b/amf.go
index a2eff3e..ca8bce6 100644
--- a/amf.go
+++ b/amf.go
@@ -10,10 +10,12 @@ import (
 	"fmt"
 	"os"
 
-	"github.com/omec-project/amf/logger"
-	"github.com/omec-project/amf/service"
 	"github.com/sirupsen/logrus"
 	"github.com/urfave/cli"
+
+	"github.com/omec-project/amf/logger"
+	"github.com/omec-project/amf/service"
+	loget "github.com/omec-project/util/logger"
 )
 
 var AMF = &service.AMF{}
@@ -25,9 +27,12 @@ func init() {
 }
 
 func main() {
+	loget.SetLogLevel(logrus.InfoLevel)
 	app := cli.NewApp()
-	app.Name = "amf"
-	appLog.Infoln(app.Name)
+	app.Name = "HEXA AMF"
+	appLog.Infof("========================================")
+	appLog.Infof("##############|HEXA AMF|###############")
+	appLog.Infof("========================================")
 	app.Usage = "-free5gccfg common configuration file -amfcfg amf configuration file"
 	app.Action = action
 	app.Flags = AMF.GetCliCmd()
diff --git a/amf_test.go b/amf_test.go
index b8baade..857d47b 100644
--- a/amf_test.go
+++ b/amf_test.go
@@ -2,6 +2,7 @@
 //
 // SPDX-License-Identifier: Apache-2.0
 //
+
 /*
  * AMF Unit Testcases
  *
@@ -11,27 +12,21 @@ package main
 import (
 	"encoding/json"
 	"fmt"
-	"os"
 	"testing"
 	"time"
 
+	protos "github.com/Nikhil690/connsert/proto/sdcoreConfig"
 	"github.com/omec-project/amf/consumer"
 	"github.com/omec-project/amf/factory"
-	"github.com/omec-project/amf/service"
-	protos "github.com/omec-project/config5g/proto/sdcoreConfig"
+	"github.com/omec-project/openapi/Nnrf_NFDiscovery"
 	"github.com/omec-project/openapi/models"
 	"github.com/stretchr/testify/require"
 )
 
-var AMFTest = &service.AMF{}
+//var AMF = &service.AMF{}
 
 func init() {
-	if err := os.Setenv("POD_IP", "127.0.0.1"); err != nil {
-		fmt.Printf("Could not set env POD_IP: %+v\n", err)
-	}
-	if err := factory.InitConfigFactory("amfTest/amfcfg.yaml"); err != nil {
-		fmt.Printf("Could not InitConfigFactory: %+v\n", err)
-	}
+	factory.InitConfigFactory("amfTest/amfcfg.yaml")
 }
 
 func GetNetworkSliceConfig() *protos.NetworkSliceResponse {
@@ -40,7 +35,6 @@ func GetNetworkSliceConfig() *protos.NetworkSliceResponse {
 	rsp.NetworkSlice = make([]*protos.NetworkSlice, 0)
 
 	ns := protos.NetworkSlice{}
-	ns.OperationType = protos.OpType_SLICE_ADD
 	slice := protos.NSSAI{Sst: "1", Sd: "010203"}
 	ns.Nssai = &slice
 
@@ -59,16 +53,16 @@ func TestInitialConfig(t *testing.T) {
 	factory.AmfConfig.Configuration.PlmnSupportList = nil
 	factory.AmfConfig.Configuration.ServedGumaiList = nil
 	factory.AmfConfig.Configuration.SupportTAIList = nil
-	Rsp := make(chan *protos.NetworkSliceResponse, 1)
-
+	var Rsp chan *protos.NetworkSliceResponse
+	Rsp = make(chan *protos.NetworkSliceResponse)
 	go func() {
-		AMFTest.UpdateConfig(Rsp)
+		Rsp <- GetNetworkSliceConfig()
+	}()
+	go func() {
+		AMF.UpdateConfig(Rsp)
 	}()
-	Rsp <- GetNetworkSliceConfig()
 
 	time.Sleep(2 * time.Second)
-	close(Rsp)
-
 	if factory.AmfConfig.Configuration.PlmnSupportList != nil &&
 		factory.AmfConfig.Configuration.ServedGumaiList != nil &&
 		factory.AmfConfig.Configuration.SupportTAIList != nil {
@@ -102,12 +96,13 @@ func TestUpdateConfig(t *testing.T) {
 	if err != nil {
 		panic(err)
 	}
-	Rsp := make(chan *protos.NetworkSliceResponse)
+	var Rsp chan *protos.NetworkSliceResponse
+	Rsp = make(chan *protos.NetworkSliceResponse)
 	go func() {
 		Rsp <- &nrp
 	}()
 	go func() {
-		AMFTest.UpdateConfig(Rsp)
+		AMF.UpdateConfig(Rsp)
 	}()
 
 	time.Sleep(2 * time.Second)
@@ -122,11 +117,11 @@ func TestUpdateConfig(t *testing.T) {
 func TestRegisterNF(t *testing.T) {
 	// Save current function and restore at the end:
 	origRegisterNFInstance := consumer.SendRegisterNFInstance
-	// origSearchNFInstances := consumer.SendSearchNFInstances
+	origSearchNFInstances := consumer.SendSearchNFInstances
 	origUpdateNFInstance := consumer.SendUpdateNFInstance
 	defer func() {
 		consumer.SendRegisterNFInstance = origRegisterNFInstance
-		// consumer.SendSearchNFInstances = origSearchNFInstances
+		consumer.SendSearchNFInstances = origSearchNFInstances
 		consumer.SendUpdateNFInstance = origUpdateNFInstance
 	}()
 	fmt.Printf("test case TestRegisterNF \n")
@@ -137,20 +132,19 @@ func TestRegisterNF(t *testing.T) {
 		fmt.Printf("Test RegisterNFInstance called\n")
 		return prof, "", "", nil
 	}
-	/*consumer.SendSearchNFInstances = func(nrfUri string, targetNfType, requestNfType models.NfType, param Nnrf_NFDiscovery.SearchNFInstancesParamOpts) (*models.SearchResult, error) {
+	consumer.SendSearchNFInstances = func(nrfUri string, targetNfType, requestNfType models.NfType, param Nnrf_NFDiscovery.SearchNFInstancesParamOpts) (*models.SearchResult, error) {
 		fmt.Printf("Test SearchNFInstance called\n")
 		return &models.SearchResult{}, nil
-	}*/
+	}
 	consumer.SendUpdateNFInstance = func(patchItem []models.PatchItem) (nfProfile models.NfProfile, problemDetails *models.ProblemDetails, err error) {
 		return prof, nil, nil
 	}
-	go AMFTest.SendNFProfileUpdateToNrf()
-	service.RocUpdateConfigChannel <- true
+	go AMFTest.RegisterNF()
+	service.ConfigPodTrigger <- true
 	time.Sleep(5 * time.Second)
 	require.Equal(t, service.KeepAliveTimer != nil, true)
 
-	/*service.RocUpdateConfigChannel <- false
+	service.ConfigPodTrigger <- false
 	time.Sleep(1 * time.Second)
 	require.Equal(t, service.KeepAliveTimer == nil, true)
-	*/
 }
diff --git a/communication/api_individual_subscription_document.go b/communication/api_individual_subscription_document.go
index 7c10abf..5085f03 100644
--- a/communication/api_individual_subscription_document.go
+++ b/communication/api_individual_subscription_document.go
@@ -21,7 +21,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -56,7 +56,7 @@ func HTTPAMFStatusChangeSubscribeModify(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, subscriptionData)
+	req := http_wrapper.NewRequest(c.Request, subscriptionData)
 	req.Params["subscriptionId"] = c.Params.ByName("subscriptionId")
 
 	rsp := producer.HandleAMFStatusChangeSubscribeModify(req)
@@ -77,7 +77,7 @@ func HTTPAMFStatusChangeSubscribeModify(c *gin.Context) {
 
 // AMFStatusChangeUnSubscribe - Namf_Communication AMF Status Change UnSubscribe service Operation
 func HTTPAMFStatusChangeUnSubscribe(c *gin.Context) {
-	req := httpwrapper.NewRequest(c.Request, nil)
+	req := http_wrapper.NewRequest(c.Request, nil)
 	req.Params["subscriptionId"] = c.Params.ByName("subscriptionId")
 
 	rsp := producer.HandleAMFStatusChangeUnSubscribeRequest(req)
diff --git a/communication/api_individual_ue_context_document.go b/communication/api_individual_ue_context_document.go
index 74b7d0c..8704af7 100644
--- a/communication/api_individual_ue_context_document.go
+++ b/communication/api_individual_ue_context_document.go
@@ -23,7 +23,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -69,7 +69,7 @@ func HTTPCreateUEContext(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, createUeContextRequest)
+	req := http_wrapper.NewRequest(c.Request, createUeContextRequest)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 	rsp := producer.HandleCreateUEContextRequest(req)
 
@@ -132,7 +132,7 @@ func HTTPEBIAssignment(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, assignEbiData)
+	req := http_wrapper.NewRequest(c.Request, assignEbiData)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 	rsp := producer.HandleAssignEbiDataRequest(req)
 
@@ -180,7 +180,7 @@ func HTTPRegistrationStatusUpdate(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, ueRegStatusUpdateReqData)
+	req := http_wrapper.NewRequest(c.Request, ueRegStatusUpdateReqData)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 	rsp := producer.HandleRegistrationStatusUpdateRequest(req)
 
@@ -228,7 +228,7 @@ func HTTPReleaseUEContext(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, ueContextRelease)
+	req := http_wrapper.NewRequest(c.Request, ueContextRelease)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 	rsp := producer.HandleReleaseUEContextRequest(req)
 
@@ -285,7 +285,7 @@ func HTTPUEContextTransfer(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, ueContextTransferRequest)
+	req := http_wrapper.NewRequest(c.Request, ueContextTransferRequest)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 	rsp := producer.HandleUEContextTransferRequest(req)
 
diff --git a/communication/api_n1_n2_individual_subscription_document.go b/communication/api_n1_n2_individual_subscription_document.go
index c4bc423..f9a300e 100644
--- a/communication/api_n1_n2_individual_subscription_document.go
+++ b/communication/api_n1_n2_individual_subscription_document.go
@@ -21,14 +21,14 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
 
 // N1N2MessageUnSubscribe - Namf_Communication N1N2 Message UnSubscribe (UE Specific) service Operation
 func HTTPN1N2MessageUnSubscribe(c *gin.Context) {
-	req := httpwrapper.NewRequest(c.Request, nil)
+	req := http_wrapper.NewRequest(c.Request, nil)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 	req.Params["subscriptionId"] = c.Params.ByName("subscriptionId")
 
diff --git a/communication/api_n1_n2_message_collection_document.go b/communication/api_n1_n2_message_collection_document.go
index 48e7206..aa06834 100644
--- a/communication/api_n1_n2_message_collection_document.go
+++ b/communication/api_n1_n2_message_collection_document.go
@@ -23,7 +23,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -69,7 +69,7 @@ func HTTPN1N2MessageTransfer(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, n1n2MessageTransferRequest)
+	req := http_wrapper.NewRequest(c.Request, n1n2MessageTransferRequest)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 	req.Params["reqUri"] = c.Request.RequestURI
 
@@ -93,7 +93,7 @@ func HTTPN1N2MessageTransfer(c *gin.Context) {
 }
 
 func HTTPN1N2MessageTransferStatus(c *gin.Context) {
-	req := httpwrapper.NewRequest(c.Request, nil)
+	req := http_wrapper.NewRequest(c.Request, nil)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 	req.Params["reqUri"] = c.Request.RequestURI
 
diff --git a/communication/api_n1_n2_subscriptions_collection_for_individual_ue_contexts_document.go b/communication/api_n1_n2_subscriptions_collection_for_individual_ue_contexts_document.go
index 03095b7..c661e4e 100644
--- a/communication/api_n1_n2_subscriptions_collection_for_individual_ue_contexts_document.go
+++ b/communication/api_n1_n2_subscriptions_collection_for_individual_ue_contexts_document.go
@@ -21,7 +21,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -55,7 +55,7 @@ func HTTPN1N2MessageSubscribe(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, ueN1N2InfoSubscriptionCreateData)
+	req := http_wrapper.NewRequest(c.Request, ueN1N2InfoSubscriptionCreateData)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 
 	rsp := producer.HandleN1N2MessageSubscirbeRequest(req)
diff --git a/communication/api_subscriptions_collection_document.go b/communication/api_subscriptions_collection_document.go
index 588ef87..fa7de37 100644
--- a/communication/api_subscriptions_collection_document.go
+++ b/communication/api_subscriptions_collection_document.go
@@ -21,7 +21,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -56,7 +56,7 @@ func HTTPAMFStatusChangeSubscribe(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, subscriptionData)
+	req := http_wrapper.NewRequest(c.Request, subscriptionData)
 	rsp := producer.HandleAMFStatusChangeSubscribeRequest(req)
 
 	for key, val := range rsp.Header {
diff --git a/consumer/am_policy.go b/consumer/am_policy.go
index bfb2d75..86d2f5c 100644
--- a/consumer/am_policy.go
+++ b/consumer/am_policy.go
@@ -82,8 +82,7 @@ func AMPolicyControlCreate(ue *amf_context.AmfUe, anType models.AccessType) (*mo
 }
 
 func AMPolicyControlUpdate(ue *amf_context.AmfUe, updateRequest models.PolicyAssociationUpdateRequest) (
-	problemDetails *models.ProblemDetails, err error,
-) {
+	problemDetails *models.ProblemDetails, err error) {
 	configuration := Npcf_AMPolicy.NewConfiguration()
 	configuration.SetBasePath(ue.PcfUri)
 	client := Npcf_AMPolicy.NewAPIClient(configuration)
@@ -110,11 +109,11 @@ func AMPolicyControlUpdate(ue *amf_context.AmfUe, updateRequest models.PolicyAss
 			// TODO: Presence Reporting Area handling (TS 23.503 6.1.2.5, TS 23.501 5.6.11)
 			// }
 		}
-		return problemDetails, err
+		return
 	} else if httpResp != nil {
 		if httpResp.Status != localErr.Error() {
 			err = localErr
-			return problemDetails, err
+			return
 		}
 		problem := localErr.(openapi.GenericOpenAPIError).Model().(models.ProblemDetails)
 		problemDetails = &problem
diff --git a/consumer/communication.go b/consumer/communication.go
index 64a418a..03731f9 100644
--- a/consumer/communication.go
+++ b/consumer/communication.go
@@ -21,8 +21,7 @@ import (
 
 func BuildUeContextCreateData(ue *amf_context.AmfUe, targetRanId models.NgRanTargetId,
 	sourceToTargetData models.N2InfoContent, pduSessionList []models.N2SmInformation,
-	n2NotifyUri string, ngapCause *models.NgApCause,
-) models.UeContextCreateData {
+	n2NotifyUri string, ngapCause *models.NgApCause) models.UeContextCreateData {
 	var ueContextCreateData models.UeContextCreateData
 
 	ueContext := BuildUeContextModel(ue)
@@ -122,8 +121,7 @@ func buildAmPolicyReqTriggers(triggers []models.RequestTrigger) (amPolicyReqTrig
 }
 
 func CreateUEContextRequest(ue *amf_context.AmfUe, ueContextCreateData models.UeContextCreateData) (
-	ueContextCreatedData *models.UeContextCreatedData, problemDetails *models.ProblemDetails, err error,
-) {
+	ueContextCreatedData *models.UeContextCreatedData, problemDetails *models.ProblemDetails, err error) {
 	configuration := Namf_Communication.NewConfiguration()
 	configuration.SetBasePath(ue.TargetAmfUri)
 	client := Namf_Communication.NewAPIClient(configuration)
@@ -152,8 +150,7 @@ func CreateUEContextRequest(ue *amf_context.AmfUe, ueContextCreateData models.Ue
 }
 
 func ReleaseUEContextRequest(ue *amf_context.AmfUe, ngapCause models.NgApCause) (
-	problemDetails *models.ProblemDetails, err error,
-) {
+	problemDetails *models.ProblemDetails, err error) {
 	configuration := Namf_Communication.NewConfiguration()
 	configuration.SetBasePath(ue.TargetAmfUri)
 	client := Namf_Communication.NewAPIClient(configuration)
@@ -179,11 +176,11 @@ func ReleaseUEContextRequest(ue *amf_context.AmfUe, ngapCause models.NgApCause)
 	httpResp, localErr := client.IndividualUeContextDocumentApi.ReleaseUEContext(
 		ctx, ueContextId, ueContextRelease)
 	if localErr == nil {
-		return problemDetails, err
+		return
 	} else if httpResp != nil {
 		if httpResp.Status != localErr.Error() {
 			err = localErr
-			return problemDetails, err
+			return
 		}
 		problem := localErr.(openapi.GenericOpenAPIError).Model().(models.ProblemDetails)
 		problemDetails = &problem
@@ -195,8 +192,7 @@ func ReleaseUEContextRequest(ue *amf_context.AmfUe, ngapCause models.NgApCause)
 
 func UEContextTransferRequest(
 	ue *amf_context.AmfUe, accessType models.AccessType, transferReason models.TransferReason) (
-	ueContextTransferRspData *models.UeContextTransferRspData, problemDetails *models.ProblemDetails, err error,
-) {
+	ueContextTransferRspData *models.UeContextTransferRspData, problemDetails *models.ProblemDetails, err error) {
 	configuration := Namf_Communication.NewConfiguration()
 	configuration.SetBasePath(ue.TargetAmfUri)
 	client := Namf_Communication.NewAPIClient(configuration)
@@ -233,7 +229,7 @@ func UEContextTransferRequest(
 	} else if httpResp != nil {
 		if httpResp.Status != localErr.Error() {
 			err = localErr
-			return ueContextTransferRspData, problemDetails, err
+			return
 		}
 		problem := localErr.(openapi.GenericOpenAPIError).Model().(models.ProblemDetails)
 		problemDetails = &problem
@@ -245,8 +241,7 @@ func UEContextTransferRequest(
 
 // This operation is called "RegistrationCompleteNotify" at TS 23.502
 func RegistrationStatusUpdate(ue *amf_context.AmfUe, request models.UeRegStatusUpdateReqData) (
-	regStatusTransferComplete bool, problemDetails *models.ProblemDetails, err error,
-) {
+	regStatusTransferComplete bool, problemDetails *models.ProblemDetails, err error) {
 	configuration := Namf_Communication.NewConfiguration()
 	configuration.SetBasePath(ue.TargetAmfUri)
 	client := Namf_Communication.NewAPIClient(configuration)
@@ -254,7 +249,8 @@ func RegistrationStatusUpdate(ue *amf_context.AmfUe, request models.UeRegStatusU
 	ctx, cancel := context.WithTimeout(context.TODO(), 30*time.Second)
 	defer cancel()
 	ueContextId := fmt.Sprintf("5g-guti-%s", ue.Guti)
-	res, httpResp, localErr := client.IndividualUeContextDocumentApi.RegistrationStatusUpdate(ctx, ueContextId, request)
+	res, httpResp, localErr :=
+		client.IndividualUeContextDocumentApi.RegistrationStatusUpdate(ctx, ueContextId, request)
 	if localErr == nil {
 		regStatusTransferComplete = res.RegStatusTransferComplete
 	} else if httpResp != nil {
diff --git a/consumer/nf_discovery.go b/consumer/nf_discovery.go
index 6e14a79..63a6047 100644
--- a/consumer/nf_discovery.go
+++ b/consumer/nf_discovery.go
@@ -10,17 +10,18 @@ import (
 	"fmt"
 	"net/http"
 
+	nrf_cache "github.com/omec-project/nrf/nrfcache"
+
 	amf_context "github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/util"
-	nrf_cache "github.com/omec-project/nrf/nrfcache"
 	"github.com/omec-project/openapi/Nnrf_NFDiscovery"
 	"github.com/omec-project/openapi/models"
 )
 
 func SendSearchNFInstances(nrfUri string, targetNfType, requestNfType models.NfType,
-	param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts,
-) (models.SearchResult, error) {
+	param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts) (models.SearchResult, error) {
+
 	if amf_context.AMF_Self().EnableNrfCaching {
 		return nrf_cache.SearchNFInstances(nrfUri, targetNfType, requestNfType, param)
 	} else {
@@ -29,8 +30,7 @@ func SendSearchNFInstances(nrfUri string, targetNfType, requestNfType models.NfT
 }
 
 func SendNfDiscoveryToNrf(nrfUri string, targetNfType, requestNfType models.NfType,
-	param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts,
-) (models.SearchResult, error) {
+	param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts) (models.SearchResult, error) {
 	// Set client and set url
 	configuration := Nnrf_NFDiscovery.NewConfiguration()
 	configuration.SetBasePath(nrfUri)
@@ -48,8 +48,6 @@ func SendNfDiscoveryToNrf(nrfUri string, targetNfType, requestNfType models.NfTy
 
 	amfSelf := amf_context.AMF_Self()
 
-	var nrfSubData models.NrfSubscriptionData
-	var problemDetails *models.ProblemDetails
 	for _, nfProfile := range result.NfInstances {
 		// checking whether the AMF subscribed to this target nfinstanceid or not
 		if _, ok := amfSelf.NfStatusSubscriptions.Load(nfProfile.NfInstanceId); !ok {
@@ -58,7 +56,7 @@ func SendNfDiscoveryToNrf(nrfUri string, targetNfType, requestNfType models.NfTy
 				SubscrCond:              &models.NfInstanceIdCond{NfInstanceId: nfProfile.NfInstanceId},
 				ReqNfType:               requestNfType,
 			}
-			nrfSubData, problemDetails, err = SendCreateSubscription(nrfUri, nrfSubscriptionData)
+			nrfSubData, problemDetails, err := SendCreateSubscription(nrfUri, nrfSubscriptionData)
 			if problemDetails != nil {
 				logger.ConsumerLog.Errorf("SendCreateSubscription to NRF, Problem[%+v]", problemDetails)
 			} else if err != nil {
@@ -72,8 +70,7 @@ func SendNfDiscoveryToNrf(nrfUri string, targetNfType, requestNfType models.NfTy
 }
 
 func SearchUdmSdmInstance(ue *amf_context.AmfUe, nrfUri string, targetNfType, requestNfType models.NfType,
-	param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts,
-) error {
+	param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts) error {
 	resp, localErr := SendSearchNFInstances(nrfUri, targetNfType, requestNfType, param)
 	if localErr != nil {
 		return localErr
@@ -98,8 +95,7 @@ func SearchUdmSdmInstance(ue *amf_context.AmfUe, nrfUri string, targetNfType, re
 }
 
 func SearchNssfNSSelectionInstance(ue *amf_context.AmfUe, nrfUri string, targetNfType, requestNfType models.NfType,
-	param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts,
-) error {
+	param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts) error {
 	resp, localErr := SendSearchNFInstances(nrfUri, targetNfType, requestNfType, param)
 	if localErr != nil {
 		return localErr
@@ -122,8 +118,7 @@ func SearchNssfNSSelectionInstance(ue *amf_context.AmfUe, nrfUri string, targetN
 }
 
 func SearchAmfCommunicationInstance(ue *amf_context.AmfUe, nrfUri string, targetNfType,
-	requestNfType models.NfType, param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts,
-) (err error) {
+	requestNfType models.NfType, param *Nnrf_NFDiscovery.SearchNFInstancesParamOpts) (err error) {
 	resp, localErr := SendSearchNFInstances(nrfUri, targetNfType, requestNfType, param)
 	if localErr != nil {
 		err = localErr
diff --git a/consumer/nf_mangement.go b/consumer/nf_mangement.go
index b5c2a6a..f0f26dc 100644
--- a/consumer/nf_mangement.go
+++ b/consumer/nf_mangement.go
@@ -36,25 +36,25 @@ func BuildNFInstance(context *amf_context.AMFContext) (profile models.NfProfile,
 	amfInfo := models.AmfInfo{}
 	if len(context.ServedGuamiList) == 0 {
 		err = fmt.Errorf("Gumai List is Empty in AMF")
-		return profile, err
+		return
 	}
 	regionId, setId, _, err1 := util.SeperateAmfId(context.ServedGuamiList[0].AmfId)
 	if err1 != nil {
 		err = err1
-		return profile, err
+		return
 	}
 	amfInfo.AmfRegionId = regionId
 	amfInfo.AmfSetId = setId
 	amfInfo.GuamiList = &context.ServedGuamiList
 	if len(context.SupportTaiLists) == 0 {
 		err = fmt.Errorf("SupportTaiList is Empty in AMF")
-		return profile, err
+		return
 	}
 	amfInfo.TaiList = &context.SupportTaiLists
 	profile.AmfInfo = &amfInfo
 	if context.RegisterIPv4 == "" {
 		err = fmt.Errorf("AMF Address is empty")
-		return profile, err
+		return
 	}
 	profile.Ipv4Addresses = append(profile.Ipv4Addresses, context.RegisterIPv4)
 	service := []models.NfService{}
@@ -70,13 +70,13 @@ func BuildNFInstance(context *amf_context.AMFContext) (profile models.NfProfile,
 		NotificationType: models.NotificationType_N1_MESSAGES,
 		N1MessageClass:   models.N1MessageClass__5_GMM,
 	}
-	profile.DefaultNotificationSubscriptions = append(profile.DefaultNotificationSubscriptions, defaultNotificationSubscription)
+	profile.DefaultNotificationSubscriptions =
+		append(profile.DefaultNotificationSubscriptions, defaultNotificationSubscription)
 	return profile, err
 }
 
 var SendRegisterNFInstance = func(nrfUri, nfInstanceId string, profile models.NfProfile) (
-	prof models.NfProfile, resouceNrfUri string, retrieveNfInstanceId string, err error,
-) {
+	prof models.NfProfile, resouceNrfUri string, retrieveNfInstanceId string, err error) {
 	// Set client and set url
 	configuration := Nnrf_NFManagement.NewConfiguration()
 	configuration.SetBasePath(nrfUri)
diff --git a/consumer/nsselection.go b/consumer/nsselection.go
index 29e85df..844d8e2 100644
--- a/consumer/nsselection.go
+++ b/consumer/nsselection.go
@@ -12,6 +12,7 @@ import (
 	"time"
 
 	"github.com/antihax/optional"
+
 	amf_context "github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/openapi"
@@ -20,8 +21,7 @@ import (
 )
 
 func NSSelectionGetForRegistration(ue *amf_context.AmfUe, requestedNssai []models.MappingOfSnssai) (
-	*models.ProblemDetails, error,
-) {
+	*models.ProblemDetails, error) {
 	configuration := Nnssf_NSSelection.NewConfiguration()
 	configuration.SetBasePath(ue.NssfUri)
 	client := Nnssf_NSSelection.NewAPIClient(configuration)
@@ -71,8 +71,7 @@ func NSSelectionGetForRegistration(ue *amf_context.AmfUe, requestedNssai []model
 }
 
 func NSSelectionGetForPduSession(ue *amf_context.AmfUe, snssai models.Snssai) (
-	*models.AuthorizedNetworkSliceInfo, *models.ProblemDetails, error,
-) {
+	*models.AuthorizedNetworkSliceInfo, *models.ProblemDetails, error) {
 	configuration := Nnssf_NSSelection.NewConfiguration()
 	configuration.SetBasePath(ue.NssfUri)
 	client := Nnssf_NSSelection.NewAPIClient(configuration)
diff --git a/consumer/sm_context.go b/consumer/sm_context.go
index 67bdf0e..c2cfd43 100644
--- a/consumer/sm_context.go
+++ b/consumer/sm_context.go
@@ -15,8 +15,8 @@ import (
 	"time"
 
 	"github.com/antihax/optional"
+
 	amf_context "github.com/omec-project/amf/context"
-	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/util"
 	"github.com/omec-project/nas/nasMessage"
 	"github.com/omec-project/openapi"
@@ -25,26 +25,19 @@ import (
 	"github.com/omec-project/openapi/models"
 )
 
-const N2SMINFO_ID = "N2SmInfo"
-
 func getServingSmfIndex(smfNum int) (servingSmfIndex int) {
 	servingSmfIndexStr := os.Getenv("SERVING_SMF_INDEX")
-	i, err := strconv.Atoi(servingSmfIndexStr)
-	if err != nil {
-		logger.ConsumerLog.Errorf("Could not convert %s to int: %v", servingSmfIndexStr, err)
-	}
+	i, _ := strconv.Atoi(servingSmfIndexStr)
 	servingSmfIndexInt := i + 1
 	servingSmfIndex = servingSmfIndexInt % smfNum
-	if err := os.Setenv("SERVING_SMF_INDEX", strconv.Itoa(servingSmfIndex)); err != nil {
-		logger.ConsumerLog.Errorf("Could not set env SERVING_SMF_INDEX: %v", err)
-	}
+	os.Setenv("SERVING_SMF_INDEX", strconv.Itoa(servingSmfIndex))
 	return
 }
 
 func setAltSmfProfile(smCtxt *amf_context.SmContext) error {
 	ignoreSmfId := smCtxt.SmfID()
 	var altSmfInst []models.NfProfile
-	// iterate over nf instances to ignore failed NF
+	//iterate over nf instances to ignore failed NF
 	for _, inst := range smCtxt.SmfProfiles {
 		if inst.NfInstanceId != ignoreSmfId {
 			altSmfInst = append(altSmfInst, inst)
@@ -62,29 +55,54 @@ func setAltSmfProfile(smCtxt *amf_context.SmContext) error {
 	return fmt.Errorf("no alternate profiles available")
 }
 
+func refreshSmfProfiles(ue *amf_context.AmfUe, smCtxt *amf_context.SmContext, ignoreSmfId string) *[]models.NfProfile {
+
+	nrfUri := ue.ServingAMF().NrfUri
+	param := Nnrf_NFDiscovery.SearchNFInstancesParamOpts{
+		ServiceNames: optional.NewInterface([]models.ServiceName{models.ServiceName_NSMF_PDUSESSION}),
+		Dnn:          optional.NewString(smCtxt.Dnn()),
+		Snssais:      optional.NewInterface(util.MarshToJsonString([]models.Snssai{smCtxt.Snssai()})),
+	}
+
+	result, err := SendSearchNFInstances(nrfUri, models.NfType_SMF, models.NfType_AMF, &param)
+	if err != nil {
+		return nil
+	}
+
+	var altSmfInst []models.NfProfile
+	//iterate over nf instances to ignore failed NF
+	for _, inst := range result.NfInstances {
+		if inst.NfInstanceId != ignoreSmfId {
+			altSmfInst = append(altSmfInst, inst)
+		}
+	}
+	return &altSmfInst
+}
+
 func SelectSmf(
 	ue *amf_context.AmfUe,
 	anType models.AccessType,
 	pduSessionID int32,
 	snssai models.Snssai,
-	dnn string,
-) (*amf_context.SmContext, uint8, error) {
+	dnn string) (*amf_context.SmContext, uint8, error) {
 	var smfUri string
 
-	ue.GmmLog.Infof("Select SMF [snssai: %+v, dnn: %+v]", snssai, dnn)
+	// ue.GmmLog.Infof("Select SMF [snssai: %+v, dnn: %+v]", snssai, dnn)
 
-	nrfUri := ue.ServingAMF.NrfUri // default NRF URI is pre-configured by AMF
+	nrfUri := ue.ServingAMF().NrfUri // default NRF URI is pre-configured by AMF
 
 	nsiInformation := ue.GetNsiInformationFromSnssai(anType, snssai)
 	if nsiInformation == nil {
-		// TODO: Set a timeout of NSSF Selection or will starvation here
-		for {
-			if err := SearchNssfNSSelectionInstance(ue, nrfUri, models.NfType_NSSF,
-				models.NfType_AMF, nil); err != nil {
-				ue.GmmLog.Errorf("AMF can not select an NSSF Instance by NRF[Error: %+v]", err)
-				time.Sleep(2 * time.Second)
-			} else {
-				break
+		if ue.NssfUri == "" {
+			// TODO: Set a timeout of NSSF Selection or will starvation here
+			for {
+				if err := SearchNssfNSSelectionInstance(ue, nrfUri, models.NfType_NSSF,
+					models.NfType_AMF, nil); err != nil {
+					ue.GmmLog.Errorf("AMF can not select an NSSF Instance by NRF[Error: %+v]", err)
+					time.Sleep(2 * time.Second)
+				} else {
+					break
+				}
 			}
 		}
 
@@ -151,8 +169,7 @@ func SelectSmf(
 func SendCreateSmContextRequest(ue *amf_context.AmfUe, smContext *amf_context.SmContext,
 	requestType *models.RequestType, nasPdu []byte) (
 	response *models.PostSmContextsResponse, smContextRef string, errorResponse *models.PostSmContextsErrorResponse,
-	problemDetail *models.ProblemDetails, err1 error,
-) {
+	problemDetail *models.ProblemDetails, err1 error) {
 	smContextCreateData := buildCreateSmContextRequest(ue, smContext, nil)
 
 	postSmContextsRequest := models.PostSmContextsRequest{
@@ -167,7 +184,8 @@ func SendCreateSmContextRequest(ue *amf_context.AmfUe, smContext *amf_context.Sm
 	ctx, cancel := context.WithTimeout(context.TODO(), 30*time.Second)
 	defer cancel()
 
-	postSmContextReponse, httpResponse, err := client.SMContextsCollectionApi.PostSmContexts(ctx, postSmContextsRequest)
+	postSmContextReponse, httpResponse, err :=
+		client.SMContextsCollectionApi.PostSmContexts(ctx, postSmContextsRequest)
 
 	if err == nil {
 		response = &postSmContextReponse
@@ -175,7 +193,7 @@ func SendCreateSmContextRequest(ue *amf_context.AmfUe, smContext *amf_context.Sm
 	} else if httpResponse != nil {
 		if httpResponse.Status != err.Error() {
 			err1 = err
-			return response, smContextRef, errorResponse, problemDetail, err1
+			return
 		}
 		switch httpResponse.StatusCode {
 		case 400, 403, 404, 500, 503, 504:
@@ -192,8 +210,7 @@ func SendCreateSmContextRequest(ue *amf_context.AmfUe, smContext *amf_context.Sm
 }
 
 func buildCreateSmContextRequest(ue *amf_context.AmfUe, smContext *amf_context.SmContext,
-	requestType *models.RequestType,
-) (smContextCreateData models.SmContextCreateData) {
+	requestType *models.RequestType) (smContextCreateData models.SmContextCreateData) {
 	context := amf_context.AMF_Self()
 	smContextCreateData.Supi = ue.Supi
 	smContextCreateData.UnauthenticatedSupi = ue.UnauthenticatedSupi
@@ -205,7 +222,7 @@ func buildCreateSmContextRequest(ue *amf_context.AmfUe, smContext *amf_context.S
 	smContextCreateData.Dnn = smContext.Dnn()
 	smContextCreateData.ServingNfId = context.NfId
 	smContextCreateData.Guami = &context.ServedGuamiList[0]
-	// take seving networking plmn from userlocation.Tai
+	//take seving networking plmn from userlocation.Tai
 	if ue.Tai.PlmnId != nil {
 		smContextCreateData.ServingNetwork = ue.Tai.PlmnId
 	} else {
@@ -251,8 +268,7 @@ func buildCreateSmContextRequest(ue *amf_context.AmfUe, smContext *amf_context.S
 
 func SendUpdateSmContextActivateUpCnxState(
 	ue *amf_context.AmfUe, smContext *amf_context.SmContext, accessType models.AccessType) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	updateData.UpCnxState = models.UpCnxState_ACTIVATING
 	if !amf_context.CompareUserLocation(ue.Location, smContext.UserLocation()) {
@@ -261,7 +277,7 @@ func SendUpdateSmContextActivateUpCnxState(
 	if smContext.AccessType() != accessType {
 		updateData.AnType = smContext.AccessType()
 	}
-	if ladn, ok := ue.ServingAMF.LadnPool[smContext.Dnn()]; ok {
+	if ladn, ok := ue.ServingAMF().LadnPool[smContext.Dnn()]; ok {
 		if amf_context.InTaiList(ue.Tai, ladn.TaiLists) {
 			updateData.PresenceInLadn = models.PresenceState_IN_AREA
 		}
@@ -271,8 +287,7 @@ func SendUpdateSmContextActivateUpCnxState(
 
 func SendUpdateSmContextDeactivateUpCnxState(ue *amf_context.AmfUe,
 	smContext *amf_context.SmContext, cause amf_context.CauseAll) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	updateData.UpCnxState = models.UpCnxState_DEACTIVATED
 	updateData.UeLocation = &ue.Location
@@ -290,8 +305,7 @@ func SendUpdateSmContextDeactivateUpCnxState(ue *amf_context.AmfUe,
 
 func SendUpdateSmContextChangeAccessType(ue *amf_context.AmfUe,
 	smContext *amf_context.SmContext, anTypeCanBeChanged bool) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	updateData.AnTypeCanBeChanged = anTypeCanBeChanged
 	return SendUpdateSmContextRequest(smContext, updateData, nil, nil)
@@ -299,29 +313,27 @@ func SendUpdateSmContextChangeAccessType(ue *amf_context.AmfUe,
 
 func SendUpdateSmContextN2Info(
 	ue *amf_context.AmfUe, smContext *amf_context.SmContext, n2SmType models.N2SmInfoType, N2SmInfo []byte) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	updateData.N2SmInfoType = n2SmType
 	updateData.N2SmInfo = new(models.RefToBinaryData)
-	updateData.N2SmInfo.ContentId = N2SMINFO_ID
+	updateData.N2SmInfo.ContentId = "N2SmInfo"
 	updateData.UeLocation = &ue.Location
 	return SendUpdateSmContextRequest(smContext, updateData, nil, N2SmInfo)
 }
 
 func SendUpdateSmContextXnHandover(
 	ue *amf_context.AmfUe, smContext *amf_context.SmContext, n2SmType models.N2SmInfoType, N2SmInfo []byte) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	if n2SmType != "" {
 		updateData.N2SmInfoType = n2SmType
 		updateData.N2SmInfo = new(models.RefToBinaryData)
-		updateData.N2SmInfo.ContentId = N2SMINFO_ID
+		updateData.N2SmInfo.ContentId = "N2SmInfo"
 	}
 	updateData.ToBeSwitched = true
 	updateData.UeLocation = &ue.Location
-	if ladn, ok := ue.ServingAMF.LadnPool[smContext.Dnn()]; ok {
+	if ladn, ok := ue.ServingAMF().LadnPool[smContext.Dnn()]; ok {
 		if amf_context.InTaiList(ue.Tai, ladn.TaiLists) {
 			updateData.PresenceInLadn = models.PresenceState_IN_AREA
 		} else {
@@ -333,13 +345,12 @@ func SendUpdateSmContextXnHandover(
 
 func SendUpdateSmContextXnHandoverFailed(
 	ue *amf_context.AmfUe, smContext *amf_context.SmContext, n2SmType models.N2SmInfoType, N2SmInfo []byte) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	if n2SmType != "" {
 		updateData.N2SmInfoType = n2SmType
 		updateData.N2SmInfo = new(models.RefToBinaryData)
-		updateData.N2SmInfo.ContentId = N2SMINFO_ID
+		updateData.N2SmInfo.ContentId = "N2SmInfo"
 	}
 	updateData.FailedToBeSwitched = true
 	return SendUpdateSmContextRequest(smContext, updateData, nil, N2SmInfo)
@@ -350,13 +361,12 @@ func SendUpdateSmContextN2HandoverPreparing(
 	smContext *amf_context.SmContext,
 	n2SmType models.N2SmInfoType,
 	N2SmInfo []byte, amfid string, targetId *models.NgRanTargetId) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	if n2SmType != "" {
 		updateData.N2SmInfoType = n2SmType
 		updateData.N2SmInfo = new(models.RefToBinaryData)
-		updateData.N2SmInfo.ContentId = N2SMINFO_ID
+		updateData.N2SmInfo.ContentId = "N2SmInfo"
 	}
 	updateData.HoState = models.HoState_PREPARING
 	updateData.TargetId = targetId
@@ -369,13 +379,12 @@ func SendUpdateSmContextN2HandoverPreparing(
 
 func SendUpdateSmContextN2HandoverPrepared(
 	ue *amf_context.AmfUe, smContext *amf_context.SmContext, n2SmType models.N2SmInfoType, N2SmInfo []byte) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	if n2SmType != "" {
 		updateData.N2SmInfoType = n2SmType
 		updateData.N2SmInfo = new(models.RefToBinaryData)
-		updateData.N2SmInfo.ContentId = N2SMINFO_ID
+		updateData.N2SmInfo.ContentId = "N2SmInfo"
 	}
 	updateData.HoState = models.HoState_PREPARED
 	return SendUpdateSmContextRequest(smContext, updateData, nil, N2SmInfo)
@@ -383,8 +392,7 @@ func SendUpdateSmContextN2HandoverPrepared(
 
 func SendUpdateSmContextN2HandoverComplete(
 	ue *amf_context.AmfUe, smContext *amf_context.SmContext, amfid string, guami *models.Guami) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	updateData.HoState = models.HoState_COMPLETED
 	if amfid != "" {
@@ -392,7 +400,7 @@ func SendUpdateSmContextN2HandoverComplete(
 		updateData.ServingNetwork = guami.PlmnId
 		updateData.Guami = guami
 	}
-	if ladn, ok := ue.ServingAMF.LadnPool[smContext.Dnn()]; ok {
+	if ladn, ok := ue.ServingAMF().LadnPool[smContext.Dnn()]; ok {
 		if amf_context.InTaiList(ue.Tai, ladn.TaiLists) {
 			updateData.PresenceInLadn = models.PresenceState_IN_AREA
 		} else {
@@ -404,8 +412,7 @@ func SendUpdateSmContextN2HandoverComplete(
 
 func SendUpdateSmContextN2HandoverCanceled(ue *amf_context.AmfUe,
 	smContext *amf_context.SmContext, cause amf_context.CauseAll) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	updateData.HoState = models.HoState_CANCELLED
 	if cause.Cause != nil {
@@ -422,8 +429,7 @@ func SendUpdateSmContextN2HandoverCanceled(ue *amf_context.AmfUe,
 
 func SendUpdateSmContextHandoverBetweenAccessType(
 	ue *amf_context.AmfUe, smContext *amf_context.SmContext, targetAccessType models.AccessType, N1SmMsg []byte) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	updateData.AnType = targetAccessType
 	if N1SmMsg != nil {
@@ -435,8 +441,7 @@ func SendUpdateSmContextHandoverBetweenAccessType(
 
 func SendUpdateSmContextHandoverBetweenAMF(
 	ue *amf_context.AmfUe, smContext *amf_context.SmContext, amfid string, guami *models.Guami, activate bool) (
-	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error,
-) {
+	*models.UpdateSmContextResponse, *models.UpdateSmContextErrorResponse, *models.ProblemDetails, error) {
 	updateData := models.SmContextUpdateData{}
 	updateData.ServingNfId = amfid
 	updateData.ServingNetwork = guami.PlmnId
@@ -446,7 +451,7 @@ func SendUpdateSmContextHandoverBetweenAMF(
 		if !amf_context.CompareUserLocation(ue.Location, smContext.UserLocation()) {
 			updateData.UeLocation = &ue.Location
 		}
-		if ladn, ok := ue.ServingAMF.LadnPool[smContext.Dnn()]; ok {
+		if ladn, ok := ue.ServingAMF().LadnPool[smContext.Dnn()]; ok {
 			if amf_context.InTaiList(ue.Tai, ladn.TaiLists) {
 				updateData.PresenceInLadn = models.PresenceState_IN_AREA
 			}
@@ -458,8 +463,7 @@ func SendUpdateSmContextHandoverBetweenAMF(
 func SendUpdateSmContextRequest(smContext *amf_context.SmContext,
 	updateData models.SmContextUpdateData, n1Msg []byte, n2Info []byte) (
 	response *models.UpdateSmContextResponse, errorResponse *models.UpdateSmContextErrorResponse,
-	problemDetail *models.ProblemDetails, err1 error,
-) {
+	problemDetail *models.ProblemDetails, err1 error) {
 	configuration := Nsmf_PDUSession.NewConfiguration()
 	configuration.SetBasePath(smContext.SmfUri())
 	client := Nsmf_PDUSession.NewAPIClient(configuration)
@@ -472,9 +476,11 @@ func SendUpdateSmContextRequest(smContext *amf_context.SmContext,
 	updateSmContextRequest.BinaryDataN1SmMessage = n1Msg
 	updateSmContextRequest.BinaryDataN2SmInformation = n2Info
 
-	updateSmContextReponse, httpResponse, err := client.IndividualSMContextApi.UpdateSmContext(ctx, smContext.SmContextRef(),
-		updateSmContextRequest)
-	// retry on alternate SMF
+	updateSmContextReponse, httpResponse, err :=
+		client.IndividualSMContextApi.UpdateSmContext(ctx, smContext.SmContextRef(),
+			updateSmContextRequest)
+
+	//retry on alternate SMF
 	if err != nil {
 		if errProfile := setAltSmfProfile(smContext); errProfile == nil {
 			configuration := Nsmf_PDUSession.NewConfiguration()
@@ -484,8 +490,9 @@ func SendUpdateSmContextRequest(smContext *amf_context.SmContext,
 			ctx, cancel := context.WithTimeout(context.TODO(), 30*time.Second)
 			defer cancel()
 
-			updateSmContextReponse, httpResponse, err = client.IndividualSMContextApi.UpdateSmContext(ctx, smContext.SmContextRef(),
-				updateSmContextRequest)
+			updateSmContextReponse, httpResponse, err =
+				client.IndividualSMContextApi.UpdateSmContext(ctx, smContext.SmContextRef(),
+					updateSmContextRequest)
 		}
 	}
 
@@ -494,7 +501,7 @@ func SendUpdateSmContextRequest(smContext *amf_context.SmContext,
 	} else if httpResponse != nil {
 		if httpResponse.Status != err.Error() {
 			err1 = err
-			return response, errorResponse, problemDetail, err1
+			return
 		}
 		switch httpResponse.StatusCode {
 		case 400, 403, 404, 500, 503:
@@ -514,8 +521,7 @@ func SendUpdateSmContextRequest(smContext *amf_context.SmContext,
 
 func SendReleaseSmContextRequest(ue *amf_context.AmfUe, smContext *amf_context.SmContext,
 	cause *amf_context.CauseAll, n2SmInfoType models.N2SmInfoType,
-	n2Info []byte,
-) (detail *models.ProblemDetails, err error) {
+	n2Info []byte) (detail *models.ProblemDetails, err error) {
 	configuration := Nsmf_PDUSession.NewConfiguration()
 	configuration.SetBasePath(smContext.SmfUri())
 	client := Nsmf_PDUSession.NewAPIClient(configuration)
@@ -544,8 +550,7 @@ func SendReleaseSmContextRequest(ue *amf_context.AmfUe, smContext *amf_context.S
 
 func buildReleaseSmContextRequest(
 	ue *amf_context.AmfUe, cause *amf_context.CauseAll, n2SmInfoType models.N2SmInfoType, n2Info []byte) (
-	releaseData models.SmContextReleaseData,
-) {
+	releaseData models.SmContextReleaseData) {
 	if cause != nil {
 		if cause.Cause != nil {
 			releaseData.Cause = *cause.Cause
@@ -563,7 +568,7 @@ func buildReleaseSmContextRequest(
 	if n2Info != nil {
 		releaseData.N2SmInfoType = n2SmInfoType
 		releaseData.N2SmInfo = &models.RefToBinaryData{
-			ContentId: N2SMINFO_ID,
+			ContentId: "n2SmInfo",
 		}
 	}
 	// TODO: other param(ueLocation...)
diff --git a/consumer/subscriber_data_management.go b/consumer/subscriber_data_management.go
index 057605e..747fc0a 100644
--- a/consumer/subscriber_data_management.go
+++ b/consumer/subscriber_data_management.go
@@ -11,6 +11,7 @@ import (
 	"time"
 
 	"github.com/antihax/optional"
+
 	amf_context "github.com/omec-project/amf/context"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/Nudm_SubscriberDataManagement"
@@ -75,7 +76,8 @@ func SDMGetSmfSelectData(ue *amf_context.AmfUe) (problemDetails *models.ProblemD
 	}
 	ctx, cancel := context.WithTimeout(context.TODO(), 30*time.Second)
 	defer cancel()
-	data, httpResp, localErr := client.SMFSelectionSubscriptionDataRetrievalApi.GetSmfSelectData(ctx, ue.Supi, &paramOpt)
+	data, httpResp, localErr :=
+		client.SMFSelectionSubscriptionDataRetrievalApi.GetSmfSelectData(ctx, ue.Supi, &paramOpt)
 	if localErr == nil {
 		ue.SmfSelectionData = &data
 	} else if httpResp != nil {
@@ -99,7 +101,8 @@ func SDMGetUeContextInSmfData(ue *amf_context.AmfUe) (problemDetails *models.Pro
 	ctx, cancel := context.WithTimeout(context.TODO(), 30*time.Second)
 	defer cancel()
 
-	data, httpResp, localErr := client.UEContextInSMFDataRetrievalApi.GetUeContextInSmfData(ctx, ue.Supi, nil)
+	data, httpResp, localErr :=
+		client.UEContextInSMFDataRetrievalApi.GetUeContextInSmfData(ctx, ue.Supi, nil)
 	if localErr == nil {
 		ue.UeContextInSmfData = &data
 	} else if httpResp != nil {
@@ -155,7 +158,8 @@ func SDMGetSliceSelectionSubscriptionData(ue *amf_context.AmfUe) (problemDetails
 	}
 	ctx, cancel := context.WithTimeout(context.TODO(), 30*time.Second)
 	defer cancel()
-	nssai, httpResp, localErr := client.SliceSelectionSubscriptionDataRetrievalApi.GetNssai(ctx, ue.Supi, &paramOpt)
+	nssai, httpResp, localErr :=
+		client.SliceSelectionSubscriptionDataRetrievalApi.GetNssai(ctx, ue.Supi, &paramOpt)
 	if localErr == nil {
 		for _, defaultSnssai := range nssai.DefaultSingleNssais {
 			subscribedSnssai := models.SubscribedSnssai{
@@ -180,12 +184,12 @@ func SDMGetSliceSelectionSubscriptionData(ue *amf_context.AmfUe) (problemDetails
 	} else if httpResp != nil {
 		if httpResp.Status != localErr.Error() {
 			err = localErr
-			return problemDetails, err
+			return
 		}
 		problem := localErr.(openapi.GenericOpenAPIError).Model().(models.ProblemDetails)
 		problemDetails = &problem
 	} else {
-		err = openapi.ReportError("Could not contact UDM at %v, %+v", ue.NudmSDMUri, localErr)
+		err = openapi.ReportError("server no response")
 	}
 	return problemDetails, err
 }
diff --git a/consumer/ue_authentication.go b/consumer/ue_authentication.go
index 3c70e24..2be92dd 100644
--- a/consumer/ue_authentication.go
+++ b/consumer/ue_authentication.go
@@ -15,6 +15,7 @@ import (
 	"time"
 
 	"github.com/antihax/optional"
+
 	amf_context "github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/nas/nasType"
@@ -24,8 +25,7 @@ import (
 )
 
 func SendUEAuthenticationAuthenticateRequest(ue *amf_context.AmfUe,
-	resynchronizationInfo *models.ResynchronizationInfo,
-) (*models.UeAuthenticationCtx, *models.ProblemDetails, error) {
+	resynchronizationInfo *models.ResynchronizationInfo) (*models.UeAuthenticationCtx, *models.ProblemDetails, error) {
 	configuration := Nausf_UEAuthentication.NewConfiguration()
 	configuration.SetBasePath(ue.AusfUri)
 
@@ -34,7 +34,7 @@ func SendUEAuthenticationAuthenticateRequest(ue *amf_context.AmfUe,
 	amfSelf := amf_context.AMF_Self()
 	servedGuami := amfSelf.ServedGuamiList[0]
 	var plmnId *models.PlmnId
-	// take ServingNetwork plmn from UserLocation.Tai if received
+	//take ServingNetwork plmn from UserLocation.Tai if received
 	if ue.Tai.PlmnId != nil {
 		plmnId = ue.Tai.PlmnId
 	} else {
@@ -70,8 +70,7 @@ func SendUEAuthenticationAuthenticateRequest(ue *amf_context.AmfUe,
 }
 
 func SendAuth5gAkaConfirmRequest(ue *amf_context.AmfUe, resStar string) (
-	*models.ConfirmationDataResponse, *models.ProblemDetails, error,
-) {
+	*models.ConfirmationDataResponse, *models.ProblemDetails, error) {
 	var ausfUri string
 	if confirmUri, err := url.Parse(ue.AuthenticationCtx.Links["link"].Href); err != nil {
 		return nil, nil, err
@@ -111,8 +110,7 @@ func SendAuth5gAkaConfirmRequest(ue *amf_context.AmfUe, resStar string) (
 }
 
 func SendEapAuthConfirmRequest(ue *amf_context.AmfUe, eapMsg nasType.EAPMessage) (
-	response *models.EapSession, problemDetails *models.ProblemDetails, err1 error,
-) {
+	response *models.EapSession, problemDetails *models.ProblemDetails, err1 error) {
 	confirmUri, err := url.Parse(ue.AuthenticationCtx.Links["link"].Href)
 	if err != nil {
 		logger.ConsumerLog.Errorf("url Parse failed: %+v", err)
@@ -137,7 +135,7 @@ func SendEapAuthConfirmRequest(ue *amf_context.AmfUe, eapMsg nasType.EAPMessage)
 	} else if httpResponse != nil {
 		if httpResponse.Status != err.Error() {
 			err1 = err
-			return response, problemDetails, err1
+			return
 		}
 		switch httpResponse.StatusCode {
 		case 400, 500:
diff --git a/consumer/ue_context_management.go b/consumer/ue_context_management.go
index 91ec07d..3db92c3 100644
--- a/consumer/ue_context_management.go
+++ b/consumer/ue_context_management.go
@@ -17,8 +17,7 @@ import (
 )
 
 func UeCmRegistration(ue *amf_context.AmfUe, accessType models.AccessType, initialRegistrationInd bool) (
-	*models.ProblemDetails, error,
-) {
+	*models.ProblemDetails, error) {
 	configuration := Nudm_UEContextManagement.NewConfiguration()
 	configuration.SetBasePath(ue.NudmUECMUri)
 	client := Nudm_UEContextManagement.NewAPIClient(configuration)
@@ -60,7 +59,8 @@ func UeCmRegistration(ue *amf_context.AmfUe, accessType models.AccessType, initi
 		ctx, cancel := context.WithTimeout(context.TODO(), 30*time.Second)
 		defer cancel()
 
-		_, httpResp, localErr := client.AMFRegistrationForNon3GPPAccessApi.Register(ctx, ue.Supi, registrationData)
+		_, httpResp, localErr :=
+			client.AMFRegistrationForNon3GPPAccessApi.Register(ctx, ue.Supi, registrationData)
 		if localErr == nil {
 			return nil, nil
 		} else if httpResp != nil {
diff --git a/context/amf_ran.go b/context/amf_ran.go
index bfae9e1..795f289 100644
--- a/context/amf_ran.go
+++ b/context/amf_ran.go
@@ -35,19 +35,19 @@ type AmfRan struct {
 	RanId      *models.GlobalRanNodeId
 	Name       string
 	AnType     models.AccessType
-	GnbIp      string `json:"-"` // TODO to be removed
+	GnbIp      string `json:"-"` //TODO to be removed
 	GnbId      string // RanId in string format, i.e.,mcc:mnc:gnbid
 	/* socket Connect*/
 	Conn net.Conn `json:"-"`
 	/* Supported TA List */
-	SupportedTAList []SupportedTAI // TODO SupportedTaList store and recover from DB
+	SupportedTAList []SupportedTAI //TODO SupportedTaList store and recover from DB
 
 	/* RAN UE List */
 	RanUeList []*RanUe `json:"-"` // RanUeNgapId as key
 
-	Amf2RanMsgChan chan *sdcoreAmfServer.AmfMessage `json:"-"`
 	/* logger */
-	Log *logrus.Entry `json:"-"`
+	Amf2RanMsgChan chan *sdcoreAmfServer.AmfMessage `json:"-"`
+	Log            *logrus.Entry                    `json:"-"`
 }
 
 type SupportedTAI struct {
@@ -65,17 +65,11 @@ func NewSupportedTAIList() []SupportedTAI {
 }
 
 func (ran *AmfRan) Remove() {
-	// send nf(gnb) status notification
-	gnbStatus := mi.MetricEvent{
-		EventType: mi.CNfStatusEvt,
-		NfStatusData: mi.CNfStatus{
-			NfType:   mi.NfTypeGnb,
-			NfStatus: mi.NfStatusDisconnected, NfName: ran.GnbId,
-		},
-	}
-	if err := metrics.StatWriter.PublishNfStatusEvent(gnbStatus); err != nil {
-		ran.Log.Errorf("Could not publish NfStatusEvent: %v", err)
-	}
+	//send nf(gnb) status notification
+	gnbStatus := mi.MetricEvent{EventType: mi.CNfStatusEvt,
+		NfStatusData: mi.CNfStatus{NfType: mi.NfTypeGnb,
+			NfStatus: mi.NfStatusDisconnected, NfName: ran.GnbId}}
+	metrics.StatWriter.PublishNfStatusEvent(gnbStatus)
 
 	ran.SetRanStats(RanDisconnected)
 	ran.Log.Infof("Remove RAN Context[ID: %+v]", ran.RanID())
@@ -94,13 +88,13 @@ func (ran *AmfRan) NewRanUe(ranUeNgapID int64) (*RanUe, error) {
 	self := AMF_Self()
 	amfUeNgapID, err := self.AllocateAmfUeNgapID()
 	if err != nil {
-		ran.Log.Errorln("Alloc Amf ue ngap id failed", err)
+		ran.Log.Errorf("Alloc Amf ue ngap id failed", err)
 		return nil, fmt.Errorf("Allocate AMF UE NGAP ID error: %+v", err)
 	}
 	ranUe.AmfUeNgapId = amfUeNgapID
 	ranUe.RanUeNgapId = ranUeNgapID
 	ranUe.Ran = ran
-	ranUe.Log = ran.Log.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ranUe.AmfUeNgapId))
+	ranUe.Log = ran.Log
 	ran.RanUeList = append(ran.RanUeList, &ranUe)
 	self.RanUePool.Store(ranUe.AmfUeNgapId, &ranUe)
 	return &ranUe, nil
@@ -121,6 +115,7 @@ func (ran *AmfRan) RanUeFindByRanUeNgapIDLocal(ranUeNgapID int64) *RanUe {
 			return ranUe
 		}
 	}
+
 	ran.Log.Infof("RanUe is not exist")
 	return nil
 }
@@ -154,7 +149,7 @@ func (ran *AmfRan) SetRanId(ranNodeId *ngapType.GlobalRANNodeID) {
 		ran.AnType = models.AccessType__3_GPP_ACCESS
 	}
 
-	// Setting RanId in String format with ":" separation of each field
+	//Setting RanId in String format with ":" seperation of each field
 	if ranId.PlmnId != nil {
 		ran.GnbId = ranId.PlmnId.Mcc + ":" + ranId.PlmnId.Mnc + ":"
 	}
diff --git a/context/amf_ue.go b/context/amf_ue.go
index 7f6197f..8dab3c0 100644
--- a/context/amf_ue.go
+++ b/context/amf_ue.go
@@ -12,7 +12,7 @@ import (
 	"encoding/binary"
 	"encoding/hex"
 	"encoding/json"
-	"fmt"
+	// "fmt"
 	"os"
 	"reflect"
 	"regexp"
@@ -20,19 +20,20 @@ import (
 	"sync"
 	"time"
 
+	"github.com/sirupsen/logrus"
+
+	"github.com/omec-project/UeauCommon"
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/metrics"
 	"github.com/omec-project/amf/protos/sdcoreAmfServer"
+	"github.com/omec-project/fsm"
+	"github.com/omec-project/idgenerator"
 	mi "github.com/omec-project/metricfunc/pkg/metricinfo"
 	"github.com/omec-project/nas/nasMessage"
 	"github.com/omec-project/nas/nasType"
 	"github.com/omec-project/nas/security"
 	"github.com/omec-project/ngap/ngapType"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/fsm"
-	"github.com/omec-project/util/idgenerator"
-	"github.com/omec-project/util/ueauth"
-	"github.com/sirupsen/logrus"
 )
 
 type OnGoingProcedure string
@@ -66,10 +67,10 @@ const (
 )
 
 type AmfUe struct {
-	// Mutex sync.Mutex `json:"mutex,omitempty" yaml:"mutex" bson:"mutex,omitempty"`
+	//Mutex sync.Mutex `json:"mutex,omitempty" yaml:"mutex" bson:"mutex,omitempty"`
 	Mutex sync.Mutex `json:"-"`
 	/* the AMF which serving this AmfUe now */
-	ServingAMF *AMFContext `json:"servingAMF,omitempty"` // never nil
+	servingAMF *AMFContext `json:"servingAMF,omitempty"` // never nil
 
 	/* Gmm State */
 	State map[models.AccessType]*fsm.State `json:"-"`
@@ -147,12 +148,12 @@ type AmfUe struct {
 	SmContextList sync.Map `json:"-"` // map[int32]*SmContext, pdu session id as key
 	/* Related Context*/
 	//RanUe map[models.AccessType]*RanUe `json:"ranUe,omitempty" yaml:"ranUe" bson:"ranUe,omitempty"`
-	RanUe map[models.AccessType]*RanUe `json:"ranUe,omitempty"`
+	RanUe map[models.AccessType]*RanUe `json:"ranUe, omitEmpty"`
 	/* other */
-	OnGoing                       map[models.AccessType]*OnGoingProcedureWithPrio `json:"onGoing,omitempty"`
-	UeRadioCapability             string                                          `json:"ueRadioCapability,omitempty"` // OCTET string
-	Capability5GMM                nasType.Capability5GMM                          `json:"capability5GMM,omitempty"`
-	ConfigurationUpdateIndication nasType.ConfigurationUpdateIndication           `json:"configurationUpdateIndication,omitempty"`
+	onGoing                       map[models.AccessType]*OnGoing        `json:"onGoing,omitempty"`
+	UeRadioCapability             string                                `json:"ueRadioCapability,omitempty"` // OCTET string
+	Capability5GMM                nasType.Capability5GMM                `json:"capability5GMM,omitempty"`
+	ConfigurationUpdateIndication nasType.ConfigurationUpdateIndication `json:"configurationUpdateIndication,omitempty"`
 	/* context related to Paging */
 	UeRadioCapabilityForPaging                 *UERadioCapabilityForPaging                 `json:"ueRadioCapabilityForPaging,omitempty"`
 	InfoOnRecommendedCellsAndRanNodesForPaging *InfoOnRecommendedCellsAndRanNodesForPaging `json:"infoOnRecommendedCellsAndRanNodesForPaging,omitempty"`
@@ -168,8 +169,8 @@ type AmfUe struct {
 	Kn3iwf                   []uint8                      `json:"kn3iwf,omitempty"`    // 32 byte
 	NH                       []uint8                      `json:"nh,omitempty"`        // 32 byte
 	NCC                      uint8                        `json:"ncc,omitempty"`       // 0..7
-	// ULCount                  security.Count               `json:"ulCount,omitempty" yaml:"ulCount" bson:"ulCount,omitempty"`
-	// DLCount                  security.Count               `json:"dlCount,omitempty" yaml:"dlCount" bson:"dlCount,omitempty"`
+	//ULCount                  security.Count               `json:"ulCount,omitempty" yaml:"ulCount" bson:"ulCount,omitempty"`
+	//DLCount                  security.Count               `json:"dlCount,omitempty" yaml:"dlCount" bson:"dlCount,omitempty"`
 	ULCount      security.Count `json:"-"`
 	DLCount      security.Count `json:"-"`
 	CipheringAlg uint8          `json:"cipheringAlg,omitempty"`
@@ -201,15 +202,17 @@ type AmfUe struct {
 	T3512Value                      int `json:"t3512Value,omitempty"`                      // default 54 min
 	Non3gppDeregistrationTimerValue int `json:"non3gppDeregistrationTimerValue,omitempty"` // default 54 min
 
-	// AmfInstanceName and Ip
-	AmfInstanceName string        `json:"amfInstanceName,omitempty"`
-	AmfInstanceIp   string        `json:"amfInstanceIp,omitempty"`
-	EventChannel    *EventChannel `json:"-"`
+	//AmfInstanceName and Ip
+	AmfInstanceName string `json:"amfInstanceName,omitempty"`
+	AmfInstanceIp   string `json:"amfInstanceIp,omitempty"`
+	//EventChannel  chan OnGoing
+	//EventChannel *EventChannel `json:"eventChannel,omitempty" yaml:"eventChannel" bson:"eventChannel,omitempty"`
+	EventChannel *EventChannel `json:"-"`
 	// logger
-	// NASLog      *logrus.Entry `json:"nasLog,omitempty" yaml:"nasLog" bson:"nasLog,omitempty"`
-	// GmmLog      *logrus.Entry `json:"gmmLog,omitempty" yaml:"gmmLog" bson:"gmmLog,omitempty"`
-	// TxLog       *logrus.Entry `json:"txLog,omitempty" yaml:"txLog" bson:"txLog,omitempty"`
-	// ProducerLog *logrus.Entry `json:"producerLog,omitempty" yaml:"producerLog" bson:"producerLog,omitempty"`
+	//NASLog      *logrus.Entry `json:"nasLog,omitempty" yaml:"nasLog" bson:"nasLog,omitempty"`
+	//GmmLog      *logrus.Entry `json:"gmmLog,omitempty" yaml:"gmmLog" bson:"gmmLog,omitempty"`
+	//TxLog       *logrus.Entry `json:"txLog,omitempty" yaml:"txLog" bson:"txLog,omitempty"`
+	//ProducerLog *logrus.Entry `json:"producerLog,omitempty" yaml:"producerLog" bson:"producerLog,omitempty"`
 	NASLog      *logrus.Entry `json:"-"`
 	GmmLog      *logrus.Entry `json:"-"`
 	TxLog       *logrus.Entry `json:"-"`
@@ -249,6 +252,7 @@ func (ue *AmfUe) MarshalJSON() ([]byte, error) {
 				*n1n2MsgVal.Request.JsonData.N2InfoContainer = *ue.N1N2Message.Request.JsonData.N2InfoContainer
 			}
 		}
+
 	}
 
 	ue.SmContextList.Range(func(key, val interface{}) bool {
@@ -300,7 +304,7 @@ func (ue *AmfUe) UnmarshalJSON(data []byte) error {
 		Alias: (*Alias)(ue),
 	}
 	if err := json.Unmarshal(data, &auxCustom); err != nil {
-		logger.ContextLog.Errorln("AMFUe Unmarshal failed : ", err)
+		logger.ContextLog.Errorf("AMFUe Unmarshal failed : ", err)
 		return err
 	}
 
@@ -316,17 +320,16 @@ func (ue *AmfUe) UnmarshalJSON(data []byte) error {
 		}
 		ue.RanUe[index].RanUeNgapId = aux.RanUeNgapId
 		ue.RanUe[index].AmfUeNgapId = aux.AmfUeNgapId
-		ue.RanUe[index].Log = logger.NgapLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ue.RanUe[index].AmfUeNgapId))
+		// ue.RanUe[index].Log = logger.NgapLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ue.RanUe[index].AmfUeNgapId))
+		ue.RanUe[index].Log = logger.NgapLog
 		if ran != nil {
-			// ran.RanUeList = append(ran.RanUeList, ue.RanUe[index])
+			//ran.RanUeList = append(ran.RanUeList, ue.RanUe[index])
 			ue.RanUe[index].Ran = ran
+
 		}
 	}
 	for key, val := range aux.SmCtxList {
-		keyVal, err := strconv.ParseInt(key, 10, 32)
-		if err != nil {
-			logger.ContextLog.Errorf("Error parsing int from %s: %v", key, err)
-		}
+		keyVal, _ := strconv.ParseInt(key, 10, 32)
 		ue.StoreSmContext(int32(keyVal), &val)
 	}
 	sqn := uint8(aux.ULCount & 0x000000ff)
@@ -347,7 +350,8 @@ const (
 	NasMessage
 )
 
-type InterfaceMsg interface{}
+type InterfaceMsg interface {
+}
 
 /*type InterfaceMsg struct {
 	AnType        models.AccessType
@@ -406,7 +410,7 @@ type N1N2Message struct {
 	ResourceUri string
 }
 
-type OnGoingProcedureWithPrio struct {
+type OnGoing struct {
 	Procedure OnGoingProcedure
 	Ppi       int32 // Paging priority
 }
@@ -442,7 +446,7 @@ type NGRANCGI struct {
 }
 
 func (ue *AmfUe) init() {
-	ue.ServingAMF = AMF_Self()
+	ue.servingAMF = AMF_Self()
 	ue.State = make(map[models.AccessType]*fsm.State)
 	ue.State[models.AccessType__3_GPP_ACCESS] = fsm.NewState(Deregistered)
 	ue.State[models.AccessType_NON_3_GPP_ACCESS] = fsm.NewState(Deregistered)
@@ -453,15 +457,19 @@ func (ue *AmfUe) init() {
 	ue.AllowedNssai = make(map[models.AccessType][]models.AllowedSnssai)
 	ue.N1N2MessageIDGenerator = idgenerator.NewGenerator(1, 2147483647)
 	ue.N1N2MessageSubscribeIDGenerator = idgenerator.NewGenerator(1, 2147483647)
-	ue.OnGoing = make(map[models.AccessType]*OnGoingProcedureWithPrio)
-	ue.OnGoing[models.AccessType_NON_3_GPP_ACCESS] = new(OnGoingProcedureWithPrio)
-	ue.OnGoing[models.AccessType_NON_3_GPP_ACCESS].Procedure = OnGoingProcedureNothing
-	ue.OnGoing[models.AccessType__3_GPP_ACCESS] = new(OnGoingProcedureWithPrio)
-	ue.OnGoing[models.AccessType__3_GPP_ACCESS].Procedure = OnGoingProcedureNothing
+	ue.onGoing = make(map[models.AccessType]*OnGoing)
+	ue.onGoing[models.AccessType_NON_3_GPP_ACCESS] = new(OnGoing)
+	ue.onGoing[models.AccessType_NON_3_GPP_ACCESS].Procedure = OnGoingProcedureNothing
+	ue.onGoing[models.AccessType__3_GPP_ACCESS] = new(OnGoing)
+	ue.onGoing[models.AccessType__3_GPP_ACCESS].Procedure = OnGoingProcedureNothing
 	ue.ReleaseCause = make(map[models.AccessType]*CauseAll)
 	ue.AmfInstanceName = os.Getenv("HOSTNAME")
 	ue.AmfInstanceIp = os.Getenv("POD_IP")
-	// ue.TransientInfo = make(chan AmfUeTransientInfo, 10)
+	//ue.TransientInfo = make(chan AmfUeTransientInfo, 10)
+}
+
+func (ue *AmfUe) ServingAMF() *AMFContext {
+	return ue.servingAMF
 }
 
 func (ue *AmfUe) CmConnect(anType models.AccessType) bool {
@@ -482,10 +490,8 @@ func (ue *AmfUe) Remove() {
 		}
 	}
 
-	// tmsiGenerator.FreeID(int64(ue.Tmsi))
-	if err := AMF_Self().Drsm.ReleaseInt32ID(ue.Tmsi); err != nil {
-		logger.ContextLog.Errorf("Error releasing RanUe: %v", err)
-	}
+	//tmsiGenerator.FreeID(int64(ue.Tmsi))
+	AMF_Self().Drsm.ReleaseInt32ID(ue.Tmsi)
 
 	if len(ue.Supi) > 0 {
 		AMF_Self().UePool.Delete(ue.Supi)
@@ -502,21 +508,20 @@ func (ue *AmfUe) DetachRanUe(anType models.AccessType) {
 func (ue *AmfUe) AttachRanUe(ranUe *RanUe) {
 	/* detach any RanUe associated to it */
 	oldRanUe := ue.RanUe[ranUe.Ran.AnType]
+	if oldRanUe != nil {
+		oldRanUe.Log.Infof("Detached UeContext from OldRanUe")
+		ue.RanUe[ranUe.Ran.AnType].AmfUe = nil
+	}
 	ue.RanUe[ranUe.Ran.AnType] = ranUe
 	ranUe.AmfUe = ue
 
-	go func() {
-		time.Sleep(time.Second * 2)
-		if oldRanUe != nil {
-			oldRanUe.Log.Infof("Detached UeContext from OldRanUe")
-			oldRanUe.AmfUe = nil
-		}
-	}()
-
 	// set log information
-	ue.NASLog = logger.NasLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ranUe.AmfUeNgapId))
-	ue.GmmLog = logger.GmmLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ranUe.AmfUeNgapId))
-	ue.TxLog = logger.GmmLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ranUe.AmfUeNgapId))
+	// ue.NASLog = logger.NasLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ranUe.AmfUeNgapId))
+	// ue.GmmLog = logger.GmmLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ranUe.AmfUeNgapId))
+	// ue.TxLog = logger.GmmLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ranUe.AmfUeNgapId))
+	ue.NASLog = logger.NasLog
+	ue.GmmLog = logger.GmmLog
+	ue.TxLog = logger.GmmLog
 }
 
 func (ue *AmfUe) GetAnType() models.AccessType {
@@ -615,20 +620,16 @@ func (ue *AmfUe) DerivateKamf() {
 	}
 
 	P0 := []byte(groups[1])
-	L0 := ueauth.KDFLen(P0)
+	L0 := UeauCommon.KDFLen(P0)
 	P1 := ue.ABBA
-	L1 := ueauth.KDFLen(P1)
+	L1 := UeauCommon.KDFLen(P1)
 
 	KseafDecode, err := hex.DecodeString(ue.Kseaf)
 	if err != nil {
 		logger.ContextLog.Error(err)
 		return
 	}
-	KamfBytes, err := ueauth.GetKDFValue(KseafDecode, ueauth.FC_FOR_KAMF_DERIVATION, P0, L0, P1, L1)
-	if err != nil {
-		logger.ContextLog.Error(err)
-		return
-	}
+	KamfBytes := UeauCommon.GetKDFValue(KseafDecode, UeauCommon.FC_FOR_KAMF_DERIVATION, P0, L0, P1, L1)
 	ue.Kamf = hex.EncodeToString(KamfBytes)
 }
 
@@ -636,33 +637,25 @@ func (ue *AmfUe) DerivateKamf() {
 func (ue *AmfUe) DerivateAlgKey() {
 	// Security Key
 	P0 := []byte{security.NNASEncAlg}
-	L0 := ueauth.KDFLen(P0)
+	L0 := UeauCommon.KDFLen(P0)
 	P1 := []byte{ue.CipheringAlg}
-	L1 := ueauth.KDFLen(P1)
+	L1 := UeauCommon.KDFLen(P1)
 
 	KamfBytes, err := hex.DecodeString(ue.Kamf)
 	if err != nil {
 		logger.ContextLog.Error(err)
 		return
 	}
-	kenc, err := ueauth.GetKDFValue(KamfBytes, ueauth.FC_FOR_ALGORITHM_KEY_DERIVATION, P0, L0, P1, L1)
-	if err != nil {
-		logger.ContextLog.Error(err)
-		return
-	}
+	kenc := UeauCommon.GetKDFValue(KamfBytes, UeauCommon.FC_FOR_ALGORITHM_KEY_DERIVATION, P0, L0, P1, L1)
 	copy(ue.KnasEnc[:], kenc[16:32])
 
 	// Integrity Key
 	P0 = []byte{security.NNASIntAlg}
-	L0 = ueauth.KDFLen(P0)
+	L0 = UeauCommon.KDFLen(P0)
 	P1 = []byte{ue.IntegrityAlg}
-	L1 = ueauth.KDFLen(P1)
+	L1 = UeauCommon.KDFLen(P1)
 
-	kint, err := ueauth.GetKDFValue(KamfBytes, ueauth.FC_FOR_ALGORITHM_KEY_DERIVATION, P0, L0, P1, L1)
-	if err != nil {
-		logger.ContextLog.Error(err)
-		return
-	}
+	kint := UeauCommon.GetKDFValue(KamfBytes, UeauCommon.FC_FOR_ALGORITHM_KEY_DERIVATION, P0, L0, P1, L1)
 	copy(ue.KnasInt[:], kint[16:32])
 }
 
@@ -671,23 +664,19 @@ func (ue *AmfUe) DerivateAnKey(anType models.AccessType) {
 	accessType := security.AccessType3GPP // Defalut 3gpp
 	P0 := make([]byte, 4)
 	binary.BigEndian.PutUint32(P0, ue.ULCount.Get())
-	L0 := ueauth.KDFLen(P0)
+	L0 := UeauCommon.KDFLen(P0)
 	if anType == models.AccessType_NON_3_GPP_ACCESS {
 		accessType = security.AccessTypeNon3GPP
 	}
 	P1 := []byte{accessType}
-	L1 := ueauth.KDFLen(P1)
+	L1 := UeauCommon.KDFLen(P1)
 
 	KamfBytes, err := hex.DecodeString(ue.Kamf)
 	if err != nil {
 		logger.ContextLog.Error(err)
 		return
 	}
-	key, err := ueauth.GetKDFValue(KamfBytes, ueauth.FC_FOR_KGNB_KN3IWF_DERIVATION, P0, L0, P1, L1)
-	if err != nil {
-		logger.ContextLog.Error(err)
-		return
-	}
+	key := UeauCommon.GetKDFValue(KamfBytes, UeauCommon.FC_FOR_KGNB_KN3IWF_DERIVATION, P0, L0, P1, L1)
 	switch accessType {
 	case security.AccessType3GPP:
 		ue.Kgnb = key
@@ -699,18 +688,14 @@ func (ue *AmfUe) DerivateAnKey(anType models.AccessType) {
 // NH Derivation function defined in TS 33.501 Annex A.10
 func (ue *AmfUe) DerivateNH(syncInput []byte) {
 	P0 := syncInput
-	L0 := ueauth.KDFLen(P0)
+	L0 := UeauCommon.KDFLen(P0)
 
 	KamfBytes, err := hex.DecodeString(ue.Kamf)
 	if err != nil {
 		logger.ContextLog.Error(err)
 		return
 	}
-	ue.NH, err = ueauth.GetKDFValue(KamfBytes, ueauth.FC_FOR_NH_DERIVATION, P0, L0)
-	if err != nil {
-		logger.ContextLog.Error(err)
-		return
-	}
+	ue.NH = UeauCommon.GetKDFValue(KamfBytes, UeauCommon.FC_FOR_NH_DERIVATION, P0, L0)
 }
 
 func (ue *AmfUe) UpdateSecurityContext(anType models.AccessType) {
@@ -770,7 +755,7 @@ func (ue *AmfUe) SelectSecurityAlg(intOrder, encOrder []uint8) {
 	}
 }
 
-// this is clearing the transient data of registration request, this is called entrypoint of Deregistration and Registration state
+//this is clearing the transient data of registration request, this is called entrypoint of Deregistration and Registration state
 func (ue *AmfUe) ClearRegistrationRequestData(accessType models.AccessType) {
 	ue.RegistrationRequest = nil
 	ue.RegistrationType5GS = 0
@@ -783,31 +768,32 @@ func (ue *AmfUe) ClearRegistrationRequestData(accessType models.AccessType) {
 		ue.RanUe[accessType].RecvdInitialContextSetupResponse = false
 	}
 	ue.RetransmissionOfInitialNASMsg = false
-	ue.OnGoing[accessType].Procedure = OnGoingProcedureNothing
+	ue.onGoing[accessType].Procedure = OnGoingProcedureNothing
 }
 
-// this method called when we are reusing the same uecontext during the registration procedure
+//this method called when we are reusing the same uecontext during the registration procedure
 func (ue *AmfUe) ClearRegistrationData() {
-	// Allowed Nssai should be cleared first as it is a new Registration
+	//Allowed Nssai should be cleared first as it is a new Registration
 	ue.SubscribedNssai = nil
 	ue.AllowedNssai = make(map[models.AccessType][]models.AllowedSnssai)
 	ue.SubscriptionDataValid = false
-	// Clearing SMContextList locally
+	//Clearing SMContextList locally
 	ue.SmContextList.Range(func(key, _ interface{}) bool {
 		ue.SmContextList.Delete(key)
 		return true
 	})
+
 }
 
-func (ue *AmfUe) SetOnGoing(anType models.AccessType, onGoing *OnGoingProcedureWithPrio) {
-	prevOnGoing := ue.OnGoing[anType]
-	ue.OnGoing[anType] = onGoing
+func (ue *AmfUe) SetOnGoing(anType models.AccessType, onGoing *OnGoing) {
+	prevOnGoing := ue.onGoing[anType]
+	ue.onGoing[anType] = onGoing
 	ue.GmmLog.Debugf("OnGoing[%s]->[%s] PPI[%d]->[%d]", prevOnGoing.Procedure, onGoing.Procedure,
 		prevOnGoing.Ppi, onGoing.Ppi)
 }
 
-func (ue *AmfUe) GetOnGoing(anType models.AccessType) OnGoingProcedureWithPrio {
-	return *ue.OnGoing[anType]
+func (ue *AmfUe) OnGoing(anType models.AccessType) OnGoing {
+	return *ue.onGoing[anType]
 }
 
 func (ue *AmfUe) RemoveAmPolicyAssociation() {
@@ -925,7 +911,6 @@ func (ue *AmfUe) CopyDataFromUeContextModel(ueContext models.UeContext) {
 	if len(ueContext.SessionContextList) > 0 {
 		for _, pduSessionContext := range ueContext.SessionContextList {
 			smContext := SmContext{
-				Mu:              new(sync.RWMutex),
 				PduSessionIDVal: pduSessionContext.PduSessionId,
 				SmContextRefVal: pduSessionContext.SmContextRef,
 				SnssaiVal:       *pduSessionContext.SNssai,
@@ -1030,6 +1015,8 @@ func (ue *AmfUe) SetEventChannel(handler func(*AmfUe, NgapMsg)) {
 		ue.EventChannel.UpdateNgapHandler(handler)
 		go ue.EventChannel.Start()
 	}
+
+	return
 }
 
 func (ue *AmfUe) NewEventChannel() (tx *EventChannel) {
@@ -1039,11 +1026,12 @@ func (ue *AmfUe) NewEventChannel() (tx *EventChannel) {
 		Event:   make(chan string, 10),
 		AmfUe:   ue,
 	}
-	// tx.Message <- msg
+	//tx.Message <- msg
 	return tx
 }
 
 func getPublishUeCtxtInfoOp(state fsm.StateType) mi.SubscriberOp {
+
 	switch state {
 	case Deregistered:
 		return mi.SubsOpDel
@@ -1062,14 +1050,14 @@ func getPublishUeCtxtInfoOp(state fsm.StateType) mi.SubscriberOp {
 	}
 }
 
-// Collect Ctxt info and publish on Kafka stream
+//Collect Ctxt info and publish on Kafka stream
 func (ueContext *AmfUe) PublishUeCtxtInfo() {
 	op := getPublishUeCtxtInfoOp(ueContext.State[models.AccessType__3_GPP_ACCESS].Current())
 	kafkaSmCtxt := mi.CoreSubscriber{}
 
-	// Populate kafka sm ctxt struct
+	//Populate kafka sm ctxt struct
 	kafkaSmCtxt.Imsi = ueContext.Supi
-	kafkaSmCtxt.AmfId = ueContext.ServingAMF.NfId
+	kafkaSmCtxt.AmfId = ueContext.servingAMF.NfId
 	kafkaSmCtxt.Guti = ueContext.Guti
 	kafkaSmCtxt.Tmsi = ueContext.Tmsi
 	kafkaSmCtxt.AmfIp = ueContext.AmfInstanceIp
@@ -1083,8 +1071,6 @@ func (ueContext *AmfUe) PublishUeCtxtInfo() {
 	ueState := ueContext.GetCmInfo()
 	kafkaSmCtxt.UeState = string(ueState[0].CmState)
 
-	// Send to stream
-	if err := metrics.GetWriter().PublishUeCtxtEvent(kafkaSmCtxt, op); err != nil {
-		logger.ContextLog.Errorf("Could not publish Ue Context Event: %v", err)
-	}
+	//Send to stream
+	metrics.GetWriter().PublishUeCtxtEvent(kafkaSmCtxt, op)
 }
diff --git a/context/common_function.go b/context/common_function.go
index b082abf..a0ccb30 100644
--- a/context/common_function.go
+++ b/context/common_function.go
@@ -9,6 +9,7 @@ import (
 	"reflect"
 
 	"github.com/mohae/deepcopy"
+
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/openapi/models"
 )
diff --git a/context/context.go b/context/context.go
index 22765cc..a12b80f 100644
--- a/context/context.go
+++ b/context/context.go
@@ -20,16 +20,16 @@ import (
 
 	"github.com/omec-project/amf/factory"
 	"github.com/omec-project/amf/logger"
+	"github.com/omec-project/idgenerator"
 	"github.com/omec-project/openapi/models"
 	"github.com/omec-project/util/drsm"
-	"github.com/omec-project/util/idgenerator"
 )
 
 var (
 	amfContext = AMFContext{}
-	// tmsiGenerator                    *idgenerator.IDGenerator = nil
-	// amfUeNGAPIDGenerator             *idgenerator.IDGenerator = nil
-	// amfStatusSubscriptionIDGenerator *idgenerator.IDGenerator = nil
+	//tmsiGenerator                    *idgenerator.IDGenerator = nil
+	//amfUeNGAPIDGenerator             *idgenerator.IDGenerator = nil
+	//amfStatusSubscriptionIDGenerator *idgenerator.IDGenerator = nil
 	mutex sync.Mutex
 )
 
@@ -43,9 +43,9 @@ func init() {
 	AMF_Self().PlmnSupportList = make([]factory.PlmnSupportItem, 0, MaxNumOfPLMNs)
 	AMF_Self().NfService = make(map[models.ServiceName]models.NfService)
 	AMF_Self().NetworkName.Full = "free5GC"
-	// tmsiGenerator = idgenerator.NewGenerator(1, math.MaxInt32)
-	// amfStatusSubscriptionIDGenerator = idgenerator.NewGenerator(1, math.MaxInt32)
-	// amfUeNGAPIDGenerator = idgenerator.NewGenerator(1, MaxValueOfAmfUeNgapId)
+	//tmsiGenerator = idgenerator.NewGenerator(1, math.MaxInt32)
+	//amfStatusSubscriptionIDGenerator = idgenerator.NewGenerator(1, math.MaxInt32)
+	//amfUeNGAPIDGenerator = idgenerator.NewGenerator(1, MaxValueOfAmfUeNgapId)
 }
 
 type AMFContext struct {
@@ -112,18 +112,18 @@ func NewPlmnSupportItem() (item factory.PlmnSupportItem) {
 }
 
 func (context *AMFContext) TmsiAllocate() int32 {
-	// val, err := AllocateUniqueID(&tmsiGenerator, "tmsi")
+	//val, err := AllocateUniqueID(&tmsiGenerator, "tmsi")
 	val, err := context.Drsm.AllocateInt32ID()
 	if err != nil {
 		logger.ContextLog.Errorf("Allocate TMSI error: %+v", err)
 		return -1
 	}
 	logger.ContextLog.Infof("Allocate TMSI : %v", val)
-	return val
+	return int32(val)
 }
 
 func (context *AMFContext) AllocateAmfUeNgapID() (int64, error) {
-	// val, err := AllocateUniqueID(&amfUeNGAPIDGenerator, "amfUeNgapID")
+	//val, err := AllocateUniqueID(&amfUeNGAPIDGenerator, "amfUeNgapID")
 	val, err := context.Drsm.AllocateInt32ID()
 	if err != nil {
 		logger.ContextLog.Errorf("Allocate NgapID error: %+v", err)
@@ -146,10 +146,8 @@ func (context *AMFContext) AllocateGutiToUe(ue *AmfUe) {
 func (context *AMFContext) ReAllocateGutiToUe(ue *AmfUe) {
 	servedGuami := context.ServedGuamiList[0]
 
-	if err := context.Drsm.ReleaseInt32ID(ue.Tmsi); err != nil {
-		logger.ContextLog.Errorf("Errro releasing tmsi: %v", err)
-	}
-	// tmsiGenerator.FreeID(int64(ue.Tmsi))
+	context.Drsm.ReleaseInt32ID(ue.Tmsi)
+	//tmsiGenerator.FreeID(int64(ue.Tmsi))
 
 	ue.Tmsi = context.TmsiAllocate()
 
@@ -170,12 +168,13 @@ func (context *AMFContext) AllocateRegistrationArea(ue *AmfUe, anType models.Acc
 	taiList := make([]models.Tai, len(context.SupportTaiLists))
 	copy(taiList, context.SupportTaiLists)
 	for i := range taiList {
-		tmp, err := strconv.ParseUint(taiList[i].Tac, 10, 32)
-		if err != nil {
-			logger.ContextLog.Errorf("Could not convert TAC to int: %v", err)
-		}
+		tmp, _ := strconv.ParseUint(taiList[i].Tac, 10, 32)
 		taiList[i].Tac = fmt.Sprintf("%06x", tmp)
-		logger.ContextLog.Infof("Supported Tai List in AMF Plmn: %v, Tac: %v", taiList[i].PlmnId, taiList[i].Tac)
+		// logger.ContextLog.Infof("Supported Tai List in AMF Plmn: %v, Tac: %v", taiList[i].PlmnId, taiList[i].Tac)
+		logger.NasLog.Info("+---------+---------+")
+		logger.NasLog.Infof("| PLMN ID |   TAC   |")
+		logger.NasLog.Infof("|  %s%s  |  %s |", ue.Tai.PlmnId.Mcc, ue.Tai.PlmnId.Mnc, ue.Tai.Tac)
+		logger.NasLog.Info("+---------+---------+")
 	}
 	for _, supportTai := range taiList {
 		if reflect.DeepEqual(supportTai, ue.Tai) {
@@ -186,7 +185,7 @@ func (context *AMFContext) AllocateRegistrationArea(ue *AmfUe, anType models.Acc
 }
 
 func (context *AMFContext) NewAMFStatusSubscription(subscriptionData models.SubscriptionData) (subscriptionID string) {
-	// id, err := amfStatusSubscriptionIDGenerator.Allocate()
+	//id, err := amfStatusSubscriptionIDGenerator.Allocate()
 	id, err := context.Drsm.AllocateInt32ID()
 	if err != nil {
 		logger.ContextLog.Errorf("Allocate subscriptionID error: %+v", err)
@@ -213,10 +212,8 @@ func (context *AMFContext) DeleteAMFStatusSubscription(subscriptionID string) {
 	if id, err := strconv.ParseInt(subscriptionID, 10, 64); err != nil {
 		logger.ContextLog.Error(err)
 	} else {
-		// amfStatusSubscriptionIDGenerator.FreeID(id)
-		if err := context.Drsm.ReleaseInt32ID(int32(id)); err != nil {
-			logger.ContextLog.Error(err)
-		}
+		//amfStatusSubscriptionIDGenerator.FreeID(id)
+		context.Drsm.ReleaseInt32ID(int32(id))
 	}
 }
 
@@ -285,7 +282,7 @@ func (context *AMFContext) AmfUeFindBySupi(supi string) (ue *AmfUe, ok bool) {
 	} else if context.EnableDbStore {
 		ue, ok = DbFetchUeBySupi(supi)
 		if ue != nil && ok {
-			logger.ContextLog.Infoln("Ue with supi found in DB : ", supi)
+			logger.ContextLog.Infof("Ue with supi found in DB : ", supi)
 			context.UePool.Store(ue.Supi, ue)
 		} else {
 			logger.ContextLog.Infoln("Ue with Supi not found locally and in DB: ", supi)
@@ -340,7 +337,7 @@ func (context *AMFContext) NewAmfRan(conn net.Conn) *AmfRan {
 	ran.SupportedTAList = NewSupportedTAIList()
 	ran.Conn = conn
 	ran.GnbIp = conn.RemoteAddr().String()
-	ran.Log = logger.NgapLog.WithField(logger.FieldRanAddr, conn.RemoteAddr().String())
+	ran.Log = logger.NgapLog
 	context.AmfRanPool.Store(conn, &ran)
 	return &ran
 }
@@ -357,7 +354,7 @@ func (context *AMFContext) NewAmfRanAddr(remoteAddr string) *AmfRan {
 	ran := AmfRan{}
 	ran.SupportedTAList = NewSupportedTAIList()
 	ran.GnbIp = remoteAddr
-	ran.Log = logger.NgapLog.WithField(logger.FieldRanAddr, remoteAddr)
+	ran.Log = logger.NgapLog
 	context.AmfRanPool.Store(remoteAddr, &ran)
 	return &ran
 }
@@ -366,7 +363,7 @@ func (context *AMFContext) NewAmfRanId(GnbId string) *AmfRan {
 	ran := AmfRan{}
 	ran.SupportedTAList = NewSupportedTAIList()
 	ran.GnbId = GnbId
-	ran.Log = logger.NgapLog.WithField(logger.FieldRanId, GnbId)
+	ran.Log = logger.NgapLog
 	context.AmfRanPool.Store(GnbId, &ran)
 	return &ran
 }
@@ -438,10 +435,7 @@ func (context *AMFContext) InPlmnSupportList(snssai models.Snssai) bool {
 }
 
 func mapToByte(data map[string]interface{}) (ret []byte) {
-	ret, err := json.Marshal(data)
-	if err != nil {
-		logger.ContextLog.Error(err)
-	}
+	ret, _ = json.Marshal(data)
 	return
 }
 
@@ -474,17 +468,17 @@ func (context *AMFContext) AmfUeFindBySupiLocal(supi string) (ue *AmfUe, ok bool
 func (context *AMFContext) AmfUeFindByGuti(guti string) (ue *AmfUe, ok bool) {
 	ue, ok = context.AmfUeFindByGutiLocal(guti)
 	if ok {
-		logger.ContextLog.Infoln("Guti found locally : ", guti)
+		logger.ContextLog.Infof("Guti found locally : ", guti)
 	} else if context.EnableDbStore {
 		ue, ok = DbFetchUeByGuti(guti)
 		if ue != nil && ok {
-			logger.ContextLog.Infoln("Ue with Guti found in DB : ", guti)
+			logger.ContextLog.Infof("Ue with Guti found in DB : ", guti)
 			context.UePool.Store(ue.Supi, ue)
 		} else {
-			logger.ContextLog.Infoln("Ue with Guti not found locally and in DB: ", guti)
+			logger.ContextLog.Infof("Ue with Guti not found locally and in DB: ", guti)
 		}
 	} else {
-		logger.ContextLog.Infoln("Ue with Guti not found : ", guti)
+		logger.ContextLog.Infof("Ue with Guti not found : ", guti)
 	}
 	return
 }
diff --git a/context/db.go b/context/db.go
index 4055d4a..487a1e8 100644
--- a/context/db.go
+++ b/context/db.go
@@ -7,16 +7,17 @@ package context
 
 import (
 	"encoding/json"
-	"fmt"
+	// "fmt"
 	"os"
 	"sync"
 
+	"github.com/omec-project/MongoDBLibrary"
 	"github.com/omec-project/amf/factory"
+	"github.com/omec-project/idgenerator"
+	"go.mongodb.org/mongo-driver/bson"
+
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/idgenerator"
-	"github.com/omec-project/util/mongoapi"
-	"go.mongodb.org/mongo-driver/bson"
 )
 
 var dbMutex sync.Mutex
@@ -32,32 +33,30 @@ type CustomFieldsAmfUe struct {
 	RanId       string                       `json:"ranId"`
 }
 
-var (
-	Namespace     = os.Getenv("POD_NAMESPACE")
-	AmfUeDataColl = "amf.data.amfState"
-)
+var Namespace = os.Getenv("POD_NAMESPACE")
+var AmfUeDataColl = "amf.data.amfState"
 
 func AllocateUniqueID(generator **idgenerator.IDGenerator, idName string) (int64, error) {
-	// Use MongoDB increment field to generate new offset.
-	// generate ids between offset to 8192 above offset.
+	//Use MongoDB increment field to generate new offset.
+	//generate ids between offset to 8192 above offset.
 	dbMutex.Lock()
 	defer dbMutex.Unlock()
 	if *generator == nil {
-		logger.DataRepoLog.Infof("generator null. fetch offset from db")
-		val := mongoapi.CommonDBClient.GetUniqueIdentity(idName)
+		logger.ContextLog.Infof("generator null. fetch offset from db")
+		val := MongoDBLibrary.GetUniqueIdentity(idName)
 		// Mongodb returns value starting from 1.
 		// Limiting users to 8192(2^13) per instance.
 		// TODO : Make this value configurable.
 		//        Later this value can be used to trigger
 		//        creation of new instance
 		minVal := int64((val-1)*8192 + 1)
-		maxVal := minVal + 8192
+		maxVal := int64(minVal + 8192)
 		*generator = idgenerator.NewGenerator(minVal, maxVal)
 	}
 
 	val, err := (*generator).Allocate()
 	if err != nil {
-		logger.DataRepoLog.Warnf("Max IDs generated for Instance")
+		logger.ContextLog.Warnf("Max IDs generated for Instance")
 		return -1, err
 	}
 
@@ -75,56 +74,56 @@ func SetupAmfCollection() {
 		mongoDbUrl = factory.AmfConfig.Configuration.Mongodb.Url
 	}
 
-	logger.DataRepoLog.Infof("MondbName: %v, Url: %v", factory.AmfConfig.Configuration.AmfDBName, mongoDbUrl)
+	logger.ContextLog.Infof("MondbName: %s, Url: %v", "hexa-amf", mongoDbUrl)
 
 	if Namespace != "" {
 		AmfUeDataColl = Namespace + "." + AmfUeDataColl
 	}
 	for {
-		mongoapi.ConnectMongo(mongoDbUrl, factory.AmfConfig.Configuration.AmfDBName)
-		if mongoapi.CommonDBClient.(*mongoapi.MongoClient).Client == nil {
-			logger.DataRepoLog.Errorf("MongoDb Connection failed")
+		MongoDBLibrary.SetMongoDB(factory.AmfConfig.Configuration.AmfDBName, mongoDbUrl)
+		if MongoDBLibrary.Client == nil {
+			logger.ContextLog.Errorf("MongoDb Connection failed")
 		} else {
-			logger.DataRepoLog.Infof("Successfully connected to Mongodb")
+			logger.ContextLog.Infof("Successfully connected to Mongodb")
 			break
 		}
 	}
-	_, err := mongoapi.CommonDBClient.CreateIndex(AmfUeDataColl, "supi")
+	_, err := MongoDBLibrary.CreateIndex(AmfUeDataColl, "supi")
 	if err != nil {
-		logger.DataRepoLog.Errorf("Create index failed on Supi field.")
+		logger.ContextLog.Errorf("Create index failed on Supi field.")
 	}
 
-	_, err = mongoapi.CommonDBClient.CreateIndex(AmfUeDataColl, "guti")
+	_, err = MongoDBLibrary.CreateIndex(AmfUeDataColl, "guti")
 	if err != nil {
-		logger.DataRepoLog.Errorf("Create index failed on Guti field.")
+		logger.ContextLog.Errorf("Create index failed on Guti field.")
 	}
 
-	_, err = mongoapi.CommonDBClient.CreateIndex(AmfUeDataColl, "tmsi")
+	_, err = MongoDBLibrary.CreateIndex(AmfUeDataColl, "tmsi")
 	if err != nil {
-		logger.DataRepoLog.Errorf("Create index failed on Tmsi field.")
+		logger.ContextLog.Errorf("Create index failed on Tmsi field.")
 	}
 
-	/*_, err = CommonDBClient.CreateIndex(AmfUeDataColl, "customFieldsAmfUe.amfUeNgapId")
+	/*_, err = MongoDBLibrary.CreateIndex(AmfUeDataColl, "customFieldsAmfUe.amfUeNgapId")
 	if err != nil {
-		logger.DataRepoLog.Errorf("Create index failed on AmfUeNgapID field.")
+		logger.ContextLog.Errorf("Create index failed on AmfUeNgapID field.")
 	}*/
 
 	// Indexing for ranUeNgapId would fail if we have multiple gnbs.
 	// TODO: We should create index with multiple fields (ranUeNgapId & ranIpAddr)
-	/*_, err = CommonDBClient.CreateIndex(AmfUeDataColl, "customFieldsAmfUe.ranUeNgapId")
+	/*_, err = MongoDBLibrary.CreateIndex(AmfUeDataColl, "customFieldsAmfUe.ranUeNgapId")
 	if err != nil {
-		logger.DataRepoLog.Errorf("Create index failed on RanUeNgapID field.")
+		logger.ContextLog.Errorf("Create index failed on RanUeNgapID field.")
 	}*/
 }
 
 func ToBsonM(data *AmfUe) (ret bson.M) {
 	tmp, err := json.Marshal(data)
 	if err != nil {
-		logger.DataRepoLog.Errorf("amfue marshall error: %v", err)
+		logger.ContextLog.Errorf("amfue marshall error: %v", err)
 	}
 	err = json.Unmarshal(tmp, &ret)
 	if err != nil {
-		logger.DataRepoLog.Errorf("amfue unmarshall error: %v", err)
+		logger.ContextLog.Errorf("amfue unmarshall error: %v", err)
 	}
 
 	return
@@ -136,10 +135,7 @@ func StoreContextInDB(ue *AmfUe) {
 		amfUeBsonA := ToBsonM(ue)
 		filter := bson.M{"supi": ue.Supi}
 
-		_, postErr := mongoapi.CommonDBClient.RestfulAPIPost(AmfUeDataColl, filter, amfUeBsonA)
-		if postErr != nil {
-			logger.DataRepoLog.Warnln(postErr)
-		}
+		MongoDBLibrary.RestfulAPIPost(AmfUeDataColl, filter, amfUeBsonA)
 	}
 }
 
@@ -148,27 +144,21 @@ func DeleteContextFromDB(ue *AmfUe) {
 	if self.EnableDbStore {
 		filter := bson.M{"supi": ue.Supi}
 
-		delErr := mongoapi.CommonDBClient.RestfulAPIDeleteOne(AmfUeDataColl, filter)
-		if delErr != nil {
-			logger.DataRepoLog.Warnln(delErr)
-		}
+		MongoDBLibrary.RestfulAPIDeleteOne(AmfUeDataColl, filter)
 	}
 }
 
 func DbFetch(collName string, filter bson.M) *AmfUe {
 	ue := &AmfUe{}
 	ue.init()
-	result, getOneErr := mongoapi.CommonDBClient.RestfulAPIGetOne(collName, filter)
-	if getOneErr != nil {
-		logger.DataRepoLog.Warnln(getOneErr)
-	}
+	result := MongoDBLibrary.RestfulAPIGetOne(collName, filter)
 
 	if len(result) == 0 {
 		return nil
 	}
 	err := json.Unmarshal(mapToByte(result), ue)
 	if err != nil {
-		logger.DataRepoLog.Errorf("amfue unmarshall error: %v", err)
+		logger.ContextLog.Errorf("amfue unmarshall error: %v", err)
 		return nil
 	}
 
@@ -179,13 +169,11 @@ func DbFetch(collName string, filter bson.M) *AmfUe {
 	AMF_Self().RanUePool.Store(ue.RanUe[models.AccessType__3_GPP_ACCESS].AmfUeNgapId, ue.RanUe[models.AccessType__3_GPP_ACCESS])
 	AMF_Self().UePool.Store(ue.Supi, ue)
 	ue.EventChannel = nil
-	ue.NASLog = logger.NasLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ue.RanUe[models.AccessType__3_GPP_ACCESS].AmfUeNgapId))
-	ue.GmmLog = logger.GmmLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ue.RanUe[models.AccessType__3_GPP_ACCESS].AmfUeNgapId))
-	ue.TxLog = logger.GmmLog.WithField(logger.FieldAmfUeNgapID, fmt.Sprintf("AMF_UE_NGAP_ID:%d", ue.RanUe[models.AccessType__3_GPP_ACCESS].AmfUeNgapId))
-	ue.ProducerLog = logger.ProducerLog.WithField(logger.FieldSupi, fmt.Sprintf("SUPI:%s", ue.Supi))
-	ue.AmfInstanceName = os.Getenv("HOSTNAME")
+	ue.NASLog = logger.NasLog
+	ue.GmmLog = logger.GmmLog
+	ue.TxLog = logger.GmmLog
+	ue.ProducerLog = logger.ProducerLog
 	ue.AmfInstanceIp = os.Getenv("POD_IP")
-	ue.TxLog.Errorln("amfue fetched")
 	return ue
 }
 
@@ -196,15 +184,15 @@ func DbFetchRanUeByRanUeNgapID(ranUeNgapID int64, ran *AmfRan) *RanUe {
 
 	ue := DbFetch(AmfUeDataColl, filter)
 	if ue == nil {
-		logger.DataRepoLog.Errorln("DbFetchRanUeByRanUeNgapID: no document found for ranUeNgapID ", ranUeNgapID)
+		logger.ContextLog.Errorf("DbFetchRanUeByRanUeNgapID: no document found for ranUeNgapID ", ranUeNgapID)
 		return nil
 	}
 
-	// Check if some parallel procedure has already
-	// fetched AmfUe and stored the RanUE in context.
-	// If so, then return the stored RanUE
-	// else return RanUE from newly fetched AmfUe
-	// and store in context
+	//Check if some parallel procedure has already
+	//fetched AmfUe and stored the RanUE in context.
+	//If so, then return the stored RanUE
+	//else return RanUE from newly fetched AmfUe
+	//and store in context
 	ranUe := ran.RanUeFindByRanUeNgapIDLocal(ranUeNgapID)
 	if ranUe != nil {
 		return ranUe
@@ -218,15 +206,15 @@ func DbFetchRanUeByAmfUeNgapID(amfUeNgapID int64) *RanUe {
 	filter["customFieldsAmfUe.amfUeNgapId"] = amfUeNgapID
 	ue := DbFetch(AmfUeDataColl, filter)
 	if ue == nil {
-		logger.DataRepoLog.Errorln("DbFetchRanUeByAmfUeNgapID : no document found for amfUeNgapID ", amfUeNgapID)
+		logger.ContextLog.Errorf("DbFetchRanUeByAmfUeNgapID : no document found for amfUeNgapID ", amfUeNgapID)
 		return nil
 	}
 
-	// Check if some parallel procedure has already
-	// fetched AmfUe and stored the RanUE in context.
-	// If so, then return the stored RanUE
-	// else return RanUE from newly fetched AmfUe
-	// and store in context
+	//Check if some parallel procedure has already
+	//fetched AmfUe and stored the RanUE in context.
+	//If so, then return the stored RanUE
+	//else return RanUE from newly fetched AmfUe
+	//and store in context
 	ranUe := self.RanUeFindByAmfUeNgapIDLocal(amfUeNgapID)
 	if ranUe != nil {
 		return ranUe
@@ -241,17 +229,17 @@ func DbFetchUeByGuti(guti string) (ue *AmfUe, ok bool) {
 
 	ue = DbFetch(AmfUeDataColl, filter)
 	if ue == nil {
-		logger.DataRepoLog.Warnln("FindByGuti : no document found for guti ", guti)
+		logger.ContextLog.Warnf("FindByGuti : no document found for guti ", guti)
 		return nil, false
 	} else {
 		ok = true
 	}
 
-	// Check if some parallel procedure has already
-	// fetched AmfUe. If so, then return the same.
-	// else return newly fetched AmfUe and store in context
+	//Check if some parallel procedure has already
+	//fetched AmfUe. If so, then return the same.
+	//else return newly fetched AmfUe and store in context
 	if amfUe, ret := self.AmfUeFindByGutiLocal(guti); ret {
-		logger.DataRepoLog.Infoln("FindByGuti : found by local", guti)
+		logger.ContextLog.Infof("FindByGuti : found by local", guti)
 		ue = amfUe
 		ok = ret
 	}
@@ -266,16 +254,16 @@ func DbFetchUeBySupi(supi string) (ue *AmfUe, ok bool) {
 
 	ue = DbFetch(AmfUeDataColl, filter)
 	if ue == nil {
-		logger.DataRepoLog.Warnln("FindBySupi : no document found for supi ", supi)
+		logger.ContextLog.Warnf("FindBySupi : no document found for supi ", supi)
 		return nil, false
 	} else {
 		ok = true
 	}
-	// Check if some parallel procedure has already
-	// fetched AmfUe. If so, then return the same.
-	// else return newly fetched AmfUe and store in context
+	//Check if some parallel procedure has already
+	//fetched AmfUe. If so, then return the same.
+	//else return newly fetched AmfUe and store in context
 	if amfUe, ret := self.AmfUeFindBySupiLocal(supi); ret {
-		logger.DataRepoLog.Infoln("FindBySupi : found by local", supi)
+		logger.ContextLog.Infof("FindBySupi : found by local", supi)
 		ue = amfUe
 		ok = ret
 	}
@@ -286,17 +274,14 @@ func DbFetchUeBySupi(supi string) (ue *AmfUe, ok bool) {
 func DbFetchAllEntries() (ueList []*AmfUe) {
 	ue := &AmfUe{}
 	filter := bson.M{}
-	results, getManyErr := mongoapi.CommonDBClient.RestfulAPIGetMany(AmfUeDataColl, filter)
-	if getManyErr != nil {
-		logger.DataRepoLog.Warnln(getManyErr)
-	}
+	results := MongoDBLibrary.RestfulAPIGetMany(AmfUeDataColl, filter)
 
 	for _, val := range results {
 		ue = &AmfUe{}
 		ue.init()
 		err := json.Unmarshal(mapToByte(val), ue)
 		if err != nil {
-			logger.DataRepoLog.Errorf("amfue unmarshall error: %v", err)
+			logger.ContextLog.Errorf("amfue unmarshall error: %v", err)
 			return nil
 		}
 		ueList = append(ueList, ue)
diff --git a/context/ran_ue.go b/context/ran_ue.go
index 1ea9d5d..6894bab 100644
--- a/context/ran_ue.go
+++ b/context/ran_ue.go
@@ -14,11 +14,12 @@ import (
 	"time"
 
 	"github.com/mohae/deepcopy"
+	"github.com/sirupsen/logrus"
+
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/ngap/ngapConvert"
 	"github.com/omec-project/ngap/ngapType"
 	"github.com/omec-project/openapi/models"
-	"github.com/sirupsen/logrus"
 )
 
 type RelAction int
@@ -36,12 +37,12 @@ const (
 
 type RanUe struct {
 	/* UE identity*/
-	RanUeNgapId int64 `json:"ranUeNgapId,omitempty"`
-	AmfUeNgapId int64 `json:"amfUeNgapId,omitempty"`
+	RanUeNgapId int64 `json:"ranUeNgapId, omitempty"`
+	AmfUeNgapId int64 `json:"amfUeNgapId, omitempty"`
 
 	/* HandOver Info*/
 	HandOverType        ngapType.HandoverType
-	SuccessPduSessionId []int32 `json:"successPduSessionId,omitempty"`
+	SuccessPduSessionId []int32 `json:"successPduSessionId, omitempty"`
 	SourceUe            *RanUe  `json:"-"`
 	TargetUe            *RanUe  `json:"-"`
 
@@ -105,10 +106,8 @@ func (ranUe *RanUe) Remove() error {
 	}
 	self := AMF_Self()
 	self.RanUePool.Delete(ranUe.AmfUeNgapId)
-	// amfUeNGAPIDGenerator.FreeID(ranUe.AmfUeNgapId)
-	if err := self.Drsm.ReleaseInt32ID(int32(ranUe.AmfUeNgapId)); err != nil {
-		logger.ContextLog.Errorf("Error releasing UE: %v", err)
-	}
+	//amfUeNGAPIDGenerator.FreeID(ranUe.AmfUeNgapId)
+	self.Drsm.ReleaseInt32ID(int32(ranUe.AmfUeNgapId))
 	return nil
 }
 
@@ -245,10 +244,7 @@ func (ranUe *RanUe) UpdateLocation(userLocationInformation *ngapType.UserLocatio
 		ranUe.Location.N3gaLocation.PortNumber = ngapConvert.PortNumberToInt(port)
 		// N3GPP TAI is operator-specific
 		// TODO: define N3GPP TAI
-		tmp, err := strconv.ParseUint(amfSelf.SupportTaiLists[0].Tac, 10, 32)
-		if err != nil {
-			logger.ContextLog.Errorf("Error parsing TAC: %v", err)
-		}
+		tmp, _ := strconv.ParseUint(amfSelf.SupportTaiLists[0].Tac, 10, 32)
 		tac := fmt.Sprintf("%06x", tmp)
 		ranUe.Location.N3gaLocation.N3gppTai = &models.Tai{
 			PlmnId: amfSelf.SupportTaiLists[0].PlmnId,
diff --git a/context/sm_context.go b/context/sm_context.go
index c9b44dc..9d5b0cd 100644
--- a/context/sm_context.go
+++ b/context/sm_context.go
@@ -15,7 +15,7 @@ import (
 )
 
 type SmContext struct {
-	Mu *sync.RWMutex // protect the following fields
+	Mu sync.RWMutex // protect the following fields
 
 	// pdu session information
 	PduSessionIDVal int32
@@ -33,7 +33,7 @@ type SmContext struct {
 	HSmfIDVal string
 	VSmfIDVal string
 
-	// status of pdusession
+	//status of pdusession
 	PduSessionInactiveVal bool
 
 	// for duplicate pdu session id handling
@@ -44,10 +44,7 @@ type SmContext struct {
 }
 
 func NewSmContext(pduSessionID int32) *SmContext {
-	c := &SmContext{
-		PduSessionIDVal: pduSessionID,
-		Mu:              new(sync.RWMutex),
-	}
+	c := &SmContext{PduSessionIDVal: pduSessionID}
 	return c
 }
 
diff --git a/context/timer.go b/context/timer.go
index 450269f..02a8713 100644
--- a/context/timer.go
+++ b/context/timer.go
@@ -24,8 +24,7 @@ type Timer struct {
 // parameter expireTimes to tell the user that the current expireTimes.
 func NewTimer(d time.Duration, maxRetryTimes int,
 	expiredFunc func(expireTimes int32),
-	cancelFunc func(),
-) *Timer {
+	cancelFunc func()) *Timer {
 	t := &Timer{}
 	atomic.StoreInt32(&t.expireTimes, 0)
 	atomic.StoreInt32(&t.maxRetryTimes, int32(maxRetryTimes))
diff --git a/context/transaction.go b/context/transaction.go
index 02e2696..c306d49 100644
--- a/context/transaction.go
+++ b/context/transaction.go
@@ -35,27 +35,26 @@ func (tx *EventChannel) UpdateConfigHandler(handler func(s1, s2, s3 string, msg
 	tx.AmfUe.TxLog.Infof("updated confighandler")
 	tx.ConfigHandler = handler
 }
-
 func (tx *EventChannel) Start() {
 	for {
 		select {
 		case msg := <-tx.Message:
-			switch msg := msg.(type) {
+			switch msg.(type) {
 			case NasMsg:
-				tx.NasHandler(tx.AmfUe, msg)
+				tx.NasHandler(tx.AmfUe, msg.(NasMsg))
 			case NgapMsg:
-				tx.NgapHandler(tx.AmfUe, msg)
+				tx.NgapHandler(tx.AmfUe, msg.(NgapMsg))
 			case SbiMsg:
-				p_1, p_2, p_3, p_4 := tx.SbiHandler(msg.UeContextId, msg.ReqUri, msg.Msg)
+				p_1, p_2, p_3, p_4 := tx.SbiHandler(msg.(SbiMsg).UeContextId, msg.(SbiMsg).ReqUri, msg.(SbiMsg).Msg)
 				res := SbiResponseMsg{
 					RespData:       p_1,
 					LocationHeader: p_2,
 					ProblemDetails: p_3,
 					TransferErr:    p_4,
 				}
-				msg.Result <- res
+				msg.(SbiMsg).Result <- res
 			case ConfigMsg:
-				tx.ConfigHandler(msg.Supi, msg.Sst, msg.Sd, msg.Msg)
+				tx.ConfigHandler(msg.(ConfigMsg).Supi, msg.(ConfigMsg).Sst, msg.(ConfigMsg).Sd, msg.(ConfigMsg).Msg)
 			}
 		case event := <-tx.Event:
 			if event == "quit" {
diff --git a/eventexposure/api_individual_subscription_document.go b/eventexposure/api_individual_subscription_document.go
index e675f0d..23677ab 100644
--- a/eventexposure/api_individual_subscription_document.go
+++ b/eventexposure/api_individual_subscription_document.go
@@ -21,14 +21,14 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
 
 // DeleteSubscription - Namf_EventExposure Unsubscribe service Operation
 func HTTPDeleteSubscription(c *gin.Context) {
-	req := httpwrapper.NewRequest(c.Request, nil)
+	req := http_wrapper.NewRequest(c.Request, nil)
 	req.Params["subscriptionId"] = c.Param("subscriptionId")
 
 	rsp := producer.HandleDeleteAMFEventSubscription(req)
@@ -81,7 +81,7 @@ func HTTPModifySubscription(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, modifySubscriptionRequest)
+	req := http_wrapper.NewRequest(c.Request, modifySubscriptionRequest)
 	req.Params["subscriptionId"] = c.Param("subscriptionId")
 
 	rsp := producer.HandleModifyAMFEventSubscription(req)
diff --git a/eventexposure/api_subscriptions_collection_document.go b/eventexposure/api_subscriptions_collection_document.go
index e89c927..da4478b 100644
--- a/eventexposure/api_subscriptions_collection_document.go
+++ b/eventexposure/api_subscriptions_collection_document.go
@@ -21,7 +21,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -56,7 +56,7 @@ func HTTPCreateSubscription(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, createEventSubscription)
+	req := http_wrapper.NewRequest(c.Request, createEventSubscription)
 
 	rsp := producer.HandleCreateAMFEventSubscription(req)
 
diff --git a/factory/config.go b/factory/config.go
index bcda5fc..25bfca1 100644
--- a/factory/config.go
+++ b/factory/config.go
@@ -64,7 +64,6 @@ type Configuration struct {
 	PlmnSupportList                 []PlmnSupportItem         `yaml:"plmnSupportList,omitempty"`
 	SupportDnnList                  []string                  `yaml:"supportDnnList,omitempty"`
 	NrfUri                          string                    `yaml:"nrfUri,omitempty"`
-	WebuiUri                        string                    `yaml:"webuiUri"`
 	Security                        *Security                 `yaml:"security,omitempty"`
 	NetworkName                     NetworkName               `yaml:"networkName,omitempty"`
 	T3502Value                      int                       `yaml:"t3502Value,omitempty"`
@@ -76,7 +75,7 @@ type Configuration struct {
 	T3560                           TimerValue                `yaml:"t3560"`
 	T3565                           TimerValue                `yaml:"t3565"`
 
-	// Maintain TaiList per slice
+	//Maintain TaiList per slice
 	SliceTaiList             map[string][]models.Tai `yaml:"sliceTaiList,omitempty"`
 	EnableSctpLb             bool                    `yaml:"enableSctpLb"`
 	EnableDbStore            bool                    `yaml:"enableDBStore"`
diff --git a/factory/factory.go b/factory/factory.go
index e7ae088..a471bc0 100644
--- a/factory/factory.go
+++ b/factory/factory.go
@@ -12,18 +12,20 @@ package factory
 
 import (
 	"fmt"
+	"io/ioutil"
 	"os"
 	"reflect"
 
-	"github.com/omec-project/amf/logger"
 	"gopkg.in/yaml.v2"
+
+	"github.com/omec-project/amf/logger"
 )
 
 var AmfConfig Config
 
 // TODO: Support configuration update from REST api
 func InitConfigFactory(f string) error {
-	if content, err := os.ReadFile(f); err != nil {
+	if content, err := ioutil.ReadFile(f); err != nil {
 		return err
 	} else {
 		AmfConfig = Config{}
@@ -31,16 +33,13 @@ func InitConfigFactory(f string) error {
 		if yamlErr := yaml.Unmarshal(content, &AmfConfig); yamlErr != nil {
 			return yamlErr
 		}
-		if AmfConfig.Configuration.WebuiUri == "" {
-			AmfConfig.Configuration.WebuiUri = "webui:9876"
-		}
 	}
 
 	return nil
 }
 
 func UpdateAmfConfig(f string) error {
-	if content, err := os.ReadFile(f); err != nil {
+	if content, err := ioutil.ReadFile(f); err != nil {
 		return err
 	} else {
 		var amfConfig Config
@@ -48,70 +47,70 @@ func UpdateAmfConfig(f string) error {
 		if yamlErr := yaml.Unmarshal(content, &amfConfig); yamlErr != nil {
 			return yamlErr
 		}
-		// Checking which config has been changed
-		if !reflect.DeepEqual(AmfConfig.Configuration.AmfName, amfConfig.Configuration.AmfName) {
+		//Checking which config has been changed
+		if reflect.DeepEqual(AmfConfig.Configuration.AmfName, amfConfig.Configuration.AmfName) == false {
 			logger.CfgLog.Infoln("updated AMF Name is changed to ", amfConfig.Configuration.AmfName)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.NgapIpList, amfConfig.Configuration.NgapIpList) {
+		if reflect.DeepEqual(AmfConfig.Configuration.NgapIpList, amfConfig.Configuration.NgapIpList) == false {
 			logger.CfgLog.Infoln("updated NgapList ", amfConfig.Configuration.NgapIpList)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.Sbi, amfConfig.Configuration.Sbi) {
+		if reflect.DeepEqual(AmfConfig.Configuration.Sbi, amfConfig.Configuration.Sbi) == false {
 			logger.CfgLog.Infoln("updated Sbi ", amfConfig.Configuration.Sbi)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.NetworkFeatureSupport5GS, amfConfig.Configuration.NetworkFeatureSupport5GS) {
+		if reflect.DeepEqual(AmfConfig.Configuration.NetworkFeatureSupport5GS, amfConfig.Configuration.NetworkFeatureSupport5GS) == false {
 			logger.CfgLog.Infoln("updated NetworkFeatureSupport5GS ", amfConfig.Configuration.NetworkFeatureSupport5GS)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.ServiceNameList, amfConfig.Configuration.ServiceNameList) {
+		if reflect.DeepEqual(AmfConfig.Configuration.ServiceNameList, amfConfig.Configuration.ServiceNameList) == false {
 			logger.CfgLog.Infoln("updated ServiceNameList ", amfConfig.Configuration.ServiceNameList)
 		}
 
 		/* we will not update below 3 configs if its controlled by ROC */
 		/* TODO: document this as dynamic configmap updates for below 3 configs we dont support if its controlled by ROC*/
 		if os.Getenv("MANAGED_BY_CONFIG_POD") == "true" {
-			if !reflect.DeepEqual(AmfConfig.Configuration.ServedGumaiList, amfConfig.Configuration.ServedGumaiList) {
+			if reflect.DeepEqual(AmfConfig.Configuration.ServedGumaiList, amfConfig.Configuration.ServedGumaiList) == false {
 				logger.CfgLog.Infoln("updated ServedGumaiList ", amfConfig.Configuration.ServedGumaiList)
 			}
-			if !reflect.DeepEqual(AmfConfig.Configuration.SupportTAIList, amfConfig.Configuration.SupportTAIList) {
+			if reflect.DeepEqual(AmfConfig.Configuration.SupportTAIList, amfConfig.Configuration.SupportTAIList) == false {
 				logger.CfgLog.Infoln("updated SupportTAIList ", amfConfig.Configuration.SupportTAIList)
 			}
-			if !reflect.DeepEqual(AmfConfig.Configuration.PlmnSupportList, amfConfig.Configuration.PlmnSupportList) {
+			if reflect.DeepEqual(AmfConfig.Configuration.PlmnSupportList, amfConfig.Configuration.PlmnSupportList) == false {
 				logger.CfgLog.Infoln("updated PlmnSupportList ", amfConfig.Configuration.PlmnSupportList)
 			}
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.SupportDnnList, amfConfig.Configuration.SupportDnnList) {
+		if reflect.DeepEqual(AmfConfig.Configuration.SupportDnnList, amfConfig.Configuration.SupportDnnList) == false {
 			logger.CfgLog.Infoln("updated SupportDnnList ", amfConfig.Configuration.SupportDnnList)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.NrfUri, amfConfig.Configuration.NrfUri) {
+		if reflect.DeepEqual(AmfConfig.Configuration.NrfUri, amfConfig.Configuration.NrfUri) == false {
 			logger.CfgLog.Infoln("updated NrfUri ", amfConfig.Configuration.NrfUri)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.Security, amfConfig.Configuration.Security) {
+		if reflect.DeepEqual(AmfConfig.Configuration.Security, amfConfig.Configuration.Security) == false {
 			logger.CfgLog.Infoln("updated Security ", amfConfig.Configuration.Security)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.NetworkName, amfConfig.Configuration.NetworkName) {
+		if reflect.DeepEqual(AmfConfig.Configuration.NetworkName, amfConfig.Configuration.NetworkName) == false {
 			logger.CfgLog.Infoln("updated NetworkName ", amfConfig.Configuration.NetworkName)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.T3502Value, amfConfig.Configuration.T3502Value) {
+		if reflect.DeepEqual(AmfConfig.Configuration.T3502Value, amfConfig.Configuration.T3502Value) == false {
 			logger.CfgLog.Infoln("updated T3502Value ", amfConfig.Configuration.T3502Value)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.T3512Value, amfConfig.Configuration.T3512Value) {
+		if reflect.DeepEqual(AmfConfig.Configuration.T3512Value, amfConfig.Configuration.T3512Value) == false {
 			logger.CfgLog.Infoln("updated T3512Value ", amfConfig.Configuration.T3512Value)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.Non3gppDeregistrationTimerValue, amfConfig.Configuration.Non3gppDeregistrationTimerValue) {
+		if reflect.DeepEqual(AmfConfig.Configuration.Non3gppDeregistrationTimerValue, amfConfig.Configuration.Non3gppDeregistrationTimerValue) == false {
 			logger.CfgLog.Infoln("updated Non3gppDeregistrationTimerValue ", amfConfig.Configuration.Non3gppDeregistrationTimerValue)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.T3513, amfConfig.Configuration.T3513) {
+		if reflect.DeepEqual(AmfConfig.Configuration.T3513, amfConfig.Configuration.T3513) == false {
 			logger.CfgLog.Infoln("updated T3513 ", amfConfig.Configuration.T3513)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.T3522, amfConfig.Configuration.T3522) {
+		if reflect.DeepEqual(AmfConfig.Configuration.T3522, amfConfig.Configuration.T3522) == false {
 			logger.CfgLog.Infoln("updated T3522 ", amfConfig.Configuration.T3522)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.T3550, amfConfig.Configuration.T3550) {
+		if reflect.DeepEqual(AmfConfig.Configuration.T3550, amfConfig.Configuration.T3550) == false {
 			logger.CfgLog.Infoln("updated T3550 ", amfConfig.Configuration.T3550)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.T3560, amfConfig.Configuration.T3560) {
+		if reflect.DeepEqual(AmfConfig.Configuration.T3560, amfConfig.Configuration.T3560) == false {
 			logger.CfgLog.Infoln("updated T3560 ", amfConfig.Configuration.T3560)
 		}
-		if !reflect.DeepEqual(AmfConfig.Configuration.T3565, amfConfig.Configuration.T3565) {
+		if reflect.DeepEqual(AmfConfig.Configuration.T3565, amfConfig.Configuration.T3565) == false {
 			logger.CfgLog.Infoln("updated T3565 ", amfConfig.Configuration.T3565)
 		}
 
diff --git a/gmm/handler.go b/gmm/handler.go
index b5e040c..225b700 100644
--- a/gmm/handler.go
+++ b/gmm/handler.go
@@ -20,13 +20,15 @@ import (
 	"github.com/antihax/optional"
 	"github.com/mitchellh/mapstructure"
 	"github.com/mohae/deepcopy"
+	"github.com/omec-project/amf/logger"
+
 	"github.com/omec-project/amf/consumer"
 	"github.com/omec-project/amf/context"
 	gmm_message "github.com/omec-project/amf/gmm/message"
-	"github.com/omec-project/amf/logger"
 	ngap_message "github.com/omec-project/amf/ngap/message"
 	"github.com/omec-project/amf/producer/callback"
 	"github.com/omec-project/amf/util"
+	"github.com/omec-project/fsm"
 	"github.com/omec-project/nas"
 	"github.com/omec-project/nas/nasConvert"
 	"github.com/omec-project/nas/nasMessage"
@@ -36,19 +38,10 @@ import (
 	"github.com/omec-project/ngap/ngapType"
 	"github.com/omec-project/openapi/Nnrf_NFDiscovery"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/fsm"
-)
-
-const (
-	S_NSSAI_CONGESTION        = "S-NSSAI_CONGESTION"
-	DNN_CONGESTION            = "DNN_CONGESTION"
-	PRIORITIZED_SERVICES_ONLY = "PRIORITIZED_SERVICES_ONLY"
-	OUT_OF_LADN_SERVICE_AREA  = "OUT_OF_LADN_SERVICE_AREA"
 )
 
 func HandleULNASTransport(ue *context.AmfUe, anType models.AccessType,
-	ulNasTransport *nasMessage.ULNASTransport,
-) error {
+	ulNasTransport *nasMessage.ULNASTransport) error {
 	ue.GmmLog.Infoln("Handle UL NAS Transport")
 
 	if ue.MacFailed {
@@ -87,8 +80,7 @@ func HandleULNASTransport(ue *context.AmfUe, anType models.AccessType,
 }
 
 func transport5GSMMessage(ue *context.AmfUe, anType models.AccessType,
-	ulNasTransport *nasMessage.ULNASTransport,
-) error {
+	ulNasTransport *nasMessage.ULNASTransport) error {
 	var pduSessionID int32
 
 	ue.GmmLog.Info("Transport 5GSM Message to SMF")
@@ -129,9 +121,7 @@ func transport5GSMMessage(ue *context.AmfUe, anType models.AccessType,
 
 		if !smContextExist {
 			msg := new(nas.Message)
-			if err := msg.PlainNasDecode(&smMessage); err != nil {
-				ue.GmmLog.Errorf("Could not decode Nas message: %v", err)
-			}
+			msg.PlainNasDecode(&smMessage)
 			if msg.GsmMessage != nil && msg.GsmMessage.Status5GSM != nil {
 				ue.GmmLog.Warningf("SmContext doesn't exist, 5GSM Status message received from UE with cause %v", msg.GsmMessage.Status5GSM.Cause5GSM)
 				return nil
@@ -153,20 +143,19 @@ func transport5GSMMessage(ue *context.AmfUe, anType models.AccessType,
 					Release: true,
 					Cause:   models.Cause_REL_DUE_TO_DUPLICATE_SESSION_ID,
 					SmContextStatusUri: fmt.Sprintf("%s/namf-callback/v1/smContextStatus/%s/%d",
-						ue.ServingAMF.GetIPv4Uri(), ue.Guti, pduSessionID),
+						ue.ServingAMF().GetIPv4Uri(), ue.Guti, pduSessionID),
 				}
 				ue.GmmLog.Warningf("Duplicated PDU session ID[%d]", pduSessionID)
 				smContext.SetDuplicatedPduSessionID(true)
 				response, _, _, err := consumer.SendUpdateSmContextRequest(smContext, updateData, nil, nil)
 				if err != nil {
 					return err
-				}
-				if response == nil {
+				} else if response == nil {
 					err := fmt.Errorf("PDU Session ID[%d] can't be released in DUPLICATE_SESSION_ID case", pduSessionID)
 					ue.GmmLog.Errorln(err)
 					gmm_message.SendDLNASTransport(ue.RanUe[anType], nasMessage.PayloadContainerTypeN1SMInfo,
 						smMessage, pduSessionID, nasMessage.Cause5GMMPayloadWasNotForwarded, nil, 0)
-				} else {
+				} else if response != nil {
 					smContext.SetUserLocation(ue.Location)
 					responseData := response.JsonData
 					n2Info := response.BinaryDataN2SmInformation
@@ -224,7 +213,7 @@ func transport5GSMMessage(ue *context.AmfUe, anType models.AccessType,
 				} else {
 					// if user's subscription context obtained from UDM does not contain the default DNN for the,
 					// S-NSSAI, the AMF shall use a locally configured DNN as the DNN
-					dnn = ue.ServingAMF.SupportDnnLists[0]
+					dnn = ue.ServingAMF().SupportDnnLists[0]
 
 					if ue.SmfSelectionData != nil {
 						snssaiStr := util.SnssaiModelsToHex(snssai)
@@ -243,7 +232,8 @@ func transport5GSMMessage(ue *context.AmfUe, anType models.AccessType,
 					gmm_message.SendDLNASTransport(ue.RanUe[anType], nasMessage.PayloadContainerTypeN1SMInfo,
 						smMessage, pduSessionID, cause, nil, 0)
 				} else {
-					_, smContextRef, errResponse, problemDetail, err := consumer.SendCreateSmContextRequest(ue, newSmContext, nil, smMessage)
+					_, smContextRef, errResponse, problemDetail, err :=
+						consumer.SendCreateSmContextRequest(ue, newSmContext, nil, smMessage)
 					if err != nil {
 						ue.GmmLog.Errorf("CreateSmContextRequest Error: %+v", err)
 						return nil
@@ -260,8 +250,8 @@ func transport5GSMMessage(ue *context.AmfUe, anType models.AccessType,
 						newSmContext.SetUserLocation(deepcopy.Copy(ue.Location).(models.UserLocation))
 						ue.StoreSmContext(pduSessionID, newSmContext)
 						ue.GmmLog.Infof("create smContext[pduSessionID: %d] Success", pduSessionID)
-						// TODO: handle response(response N2SmInfo to RAN if exists)
 						ue.PublishUeCtxtInfo()
+						// TODO: handle response(response N2SmInfo to RAN if exists)
 					}
 				}
 			case nasMessage.ULNASTransportRequestTypeModificationRequest:
@@ -302,8 +292,7 @@ func forward5GSMMessageToSMF(
 	accessType models.AccessType,
 	pduSessionID int32,
 	smContext *context.SmContext,
-	smMessage []byte,
-) error {
+	smMessage []byte) error {
 	smContextUpdateData := models.SmContextUpdateData{
 		N1SmMsg: &models.RefToBinaryData{
 			ContentId: "N1SmMsg",
@@ -381,8 +370,7 @@ func forward5GSMMessageToSMF(
 
 // Handle cleartext IEs of Registration Request, which cleattext IEs defined in TS 24.501 4.4.6
 func HandleRegistrationRequest(ue *context.AmfUe, anType models.AccessType, procedureCode int64,
-	registrationRequest *nasMessage.RegistrationRequest,
-) error {
+	registrationRequest *nasMessage.RegistrationRequest) error {
 	var guamiFromUeGuti models.Guami
 	amfSelf := context.AMF_Self()
 
@@ -398,12 +386,12 @@ func HandleRegistrationRequest(ue *context.AmfUe, anType models.AccessType, proc
 
 	// MacFailed is set if plain Registration Request message received with GUTI/SUCI or
 	// integrity protected Registration Reguest message received but mac verification Failed
-	if ue.MacFailed {
+	if ue.MacFailed == true {
 		amfSelf.ReAllocateGutiToUe(ue)
 		ue.SecurityContextAvailable = false
 	}
 
-	ue.SetOnGoing(anType, &context.OnGoingProcedureWithPrio{
+	ue.SetOnGoing(anType, &context.OnGoing{
 		Procedure: context.OnGoingProcedureRegistration,
 	})
 
@@ -854,11 +842,11 @@ func HandleMobilityAndPeriodicRegistrationUpdating(ue *context.AmfUe, anType mod
 							cause := nasMessage.Cause5GMMProtocolErrorUnspecified
 							if errResponse != nil {
 								switch errResponse.JsonData.Error.Cause {
-								case OUT_OF_LADN_SERVICE_AREA:
+								case "OUT_OF_LADN_SERVICE_AREA":
 									cause = nasMessage.Cause5GMMLADNNotAvailable
-								case PRIORITIZED_SERVICES_ONLY:
+								case "PRIORITIZED_SERVICES_ONLY":
 									cause = nasMessage.Cause5GMMRestrictedServiceArea
-								case DNN_CONGESTION, S_NSSAI_CONGESTION:
+								case "DNN_CONGESTION", "S-NSSAI_CONGESTION":
 									cause = nasMessage.Cause5GMMInsufficientUserPlaneResourcesForThePDUSession
 								}
 							}
@@ -970,11 +958,11 @@ func HandleMobilityAndPeriodicRegistrationUpdating(ue *context.AmfUe, anType mod
 						cause := nasMessage.Cause5GMMProtocolErrorUnspecified
 						if errRes != nil {
 							switch errRes.JsonData.Error.Cause {
-							case OUT_OF_LADN_SERVICE_AREA:
+							case "OUT_OF_LADN_SERVICE_AREA":
 								cause = nasMessage.Cause5GMMLADNNotAvailable
-							case PRIORITIZED_SERVICES_ONLY:
+							case "PRIORITIZED_SERVICES_ONLY":
 								cause = nasMessage.Cause5GMMRestrictedServiceArea
-							case DNN_CONGESTION, S_NSSAI_CONGESTION:
+							case "DNN_CONGESTION", "S-NSSAI_CONGESTION":
 								cause = nasMessage.Cause5GMMInsufficientUserPlaneResourcesForThePDUSession
 							}
 						}
@@ -1183,16 +1171,18 @@ func communicateWithUDM(ue *context.AmfUe, accessType models.AccessType) error {
 
 func getSubscribedNssai(ue *context.AmfUe) {
 	amfSelf := context.AMF_Self()
-	param := Nnrf_NFDiscovery.SearchNFInstancesParamOpts{
-		Supi: optional.NewString(ue.Supi),
-	}
-	for {
-		err := consumer.SearchUdmSdmInstance(ue, amfSelf.NrfUri, models.NfType_UDM, models.NfType_AMF, &param)
-		if err != nil {
-			ue.GmmLog.Errorf("AMF can not select an Nudm_SDM Instance by NRF[Error: %+v]", err)
-			time.Sleep(2 * time.Second)
-		} else {
-			break
+	if ue.NudmSDMUri == "" {
+		param := Nnrf_NFDiscovery.SearchNFInstancesParamOpts{
+			Supi: optional.NewString(ue.Supi),
+		}
+		for {
+			err := consumer.SearchUdmSdmInstance(ue, amfSelf.NrfUri, models.NfType_UDM, models.NfType_AMF, &param)
+			if err != nil {
+				ue.GmmLog.Errorf("AMF can not select an Nudm_SDM Instance by NRF[Error: %+v]", err)
+				time.Sleep(2 * time.Second)
+			} else {
+				break
+			}
 		}
 	}
 	problemDetails, err := consumer.SDMGetSliceSelectionSubscriptionData(ue)
@@ -1284,8 +1274,10 @@ func handleRequestedNssai(ue *context.AmfUe, anType models.AccessType) error {
 					}
 
 					if !reflect.DeepEqual(*guami.PlmnId, targetAmfPlmnId) {
-						searchTargetAmfQueryParam.TargetPlmnList = optional.NewInterface(util.MarshToJsonString([]models.PlmnId{targetAmfPlmnId}))
-						searchTargetAmfQueryParam.RequesterPlmnList = optional.NewInterface(util.MarshToJsonString([]models.PlmnId{*guami.PlmnId}))
+						searchTargetAmfQueryParam.TargetPlmnList =
+							optional.NewInterface(util.MarshToJsonString([]models.PlmnId{targetAmfPlmnId}))
+						searchTargetAmfQueryParam.RequesterPlmnList =
+							optional.NewInterface(util.MarshToJsonString([]models.PlmnId{*guami.PlmnId}))
 					}
 
 					searchTargetAmfQueryParam.AmfRegionId = optional.NewString(targetAmfSetToken[2])
@@ -1490,8 +1482,7 @@ func HandleNotificationResponse(ue *context.AmfUe, notificationResponse *nasMess
 }
 
 func HandleConfigurationUpdateComplete(ue *context.AmfUe,
-	configurationUpdateComplete *nasMessage.ConfigurationUpdateComplete,
-) error {
+	configurationUpdateComplete *nasMessage.ConfigurationUpdateComplete) error {
 	ue.GmmLog.Info("Handle Configuration Update Complete")
 
 	if ue.MacFailed {
@@ -1563,24 +1554,24 @@ func AuthenticationProcedure(ue *context.AmfUe, accessType models.AccessType) (b
 }
 
 func NetworkInitiatedDeregistrationProcedure(ue *context.AmfUe, accessType models.AccessType) (err error) {
+
 	anType := util.AnTypeToNas(accessType)
 	if ue.CmConnect(accessType) && ue.State[accessType].Is(context.Registered) {
-		// setting reregistration required flag to true
+		//setting reregistration required flag to true
 		gmm_message.SendDeregistrationRequest(ue.RanUe[accessType], anType, true, 0)
 	} else {
 		SetDeregisteredState(ue, anType)
 	}
 	// TODO: Need to implement Nudm_SDM_Unsubscribe
 
-	var problemDetails *models.ProblemDetails
 	ue.SmContextList.Range(func(key, value interface{}) bool {
 		smContext := value.(*context.SmContext)
 
 		if smContext.AccessType() == accessType {
 			ue.GmmLog.Infof("Sending SmContext [slice: %v, dnn: %v] Release Request to SMF", smContext.Snssai(), smContext.Dnn())
-			problemDetails, err = consumer.SendReleaseSmContextRequest(ue, smContext, nil, "", nil)
-			if problemDetails != nil {
-				ue.GmmLog.Errorf("Release SmContext Failed Problem[%+v]", problemDetails)
+			problemDetail, err := consumer.SendReleaseSmContextRequest(ue, smContext, nil, "", nil)
+			if problemDetail != nil {
+				ue.GmmLog.Errorf("Release SmContext Failed Problem[%+v]", problemDetail)
 			} else if err != nil {
 				ue.GmmLog.Errorf("Release SmContext Error[%v]", err.Error())
 			}
@@ -1599,7 +1590,7 @@ func NetworkInitiatedDeregistrationProcedure(ue *context.AmfUe, accessType model
 
 		if terminateAmPolicyAssocaition {
 			ue.GmmLog.Infof("Sending AmPolicyControlDelete to AMF")
-			problemDetails, err = consumer.AMPolicyControlDelete(ue)
+			problemDetails, err := consumer.AMPolicyControlDelete(ue)
 			if problemDetails != nil {
 				err = fmt.Errorf("AM Policy Control Delete Failed Problem[%+v]", problemDetails)
 				// Should error be logged here ?
@@ -1610,7 +1601,7 @@ func NetworkInitiatedDeregistrationProcedure(ue *context.AmfUe, accessType model
 			}
 		}
 	}
-	// if ue is not connected mode, removing UE Context
+	//if ue is not connected mode, removing UE Context
 	if !ue.State[accessType].Is(context.Registered) {
 		if ue.CmConnect(accessType) {
 			ngap_message.SendUEContextReleaseCommand(ue.RanUe[models.AccessType__3_GPP_ACCESS],
@@ -1625,31 +1616,32 @@ func NetworkInitiatedDeregistrationProcedure(ue *context.AmfUe, accessType model
 
 // TODO: to be implemented
 func HandleUeSliceInfoDelete(ue *context.AmfUe, accessType models.AccessType, nssai models.Snssai) (err error) {
-	// TODO send configuration update to update allowed nssai list with re-registration required to UE
+
+	//TODO send configuration update to update allowed nssai list with re-registration required to UE
 	//     so that pdu session sync up happen in registration procedure when UE triggers this procedure
-	// gmm_message.SendConfigurationUpdateCommand(ue, models.AccessType__3_GPP_ACCESS, nil)
+	//gmm_message.SendConfigurationUpdateCommand(ue, models.AccessType__3_GPP_ACCESS, nil)
 
-	// we are doing local cleanup for now, below code will be deprecated when we support
+	//we are doing local cleanup for now, below code will be deprecated when we support
 	// Configuration Update
-	var problemDetails *models.ProblemDetails
 	ue.SmContextList.Range(func(key, value interface{}) bool {
 		smContext := value.(*context.SmContext)
-		if smContext.Snssai().Sst == nssai.Sst && smContext.Snssai().Sd == nssai.Sd {
+		if smContext.Snssai().Sst == int32(nssai.Sst) && smContext.Snssai().Sd == nssai.Sd {
 			logger.GmmLog.Infof("Deleted Slice [sst: %v, sd: %v]matched with smcontext, sending Release SMContext Request to SMF",
 				smContext.Snssai().Sst, smContext.Snssai().Sd)
-			// send smcontext release request
-			problemDetails, err = consumer.SendReleaseSmContextRequest(ue, smContext, nil, "", nil)
-			if problemDetails != nil {
-				ue.GmmLog.Errorf("Release SmContext Failed Problem[%+v]", problemDetails)
+			//send smcontext release request
+			problemDetail, err := consumer.SendReleaseSmContextRequest(ue, smContext, nil, "", nil)
+			if problemDetail != nil {
+				ue.GmmLog.Errorf("Release SmContext Failed Problem[%+v]", problemDetail)
 			} else if err != nil {
 				ue.GmmLog.Errorf("Release SmContext Error[%v]", err.Error())
 			}
+
 		}
 		return true
 	})
 
 	var allowedList []models.AllowedSnssai
-	// update Allowed Nssai List
+	//update Allowed Nssai List
 	for _, slice := range ue.AllowedNssai[accessType] {
 		if slice.AllowedSnssai.Sst != nssai.Sst && slice.AllowedSnssai.Sd != nssai.Sd {
 			allowedList = append(allowedList, slice)
@@ -1662,12 +1654,13 @@ func HandleUeSliceInfoDelete(ue *context.AmfUe, accessType models.AccessType, ns
 
 // TODO: to be implemented
 func HandleUeSliceInfoAdd(ue *context.AmfUe, accessType models.AccessType, nssai models.Snssai) (err error) {
-	// TODO send configuration update to update allowed nssai list with re-registration required to UE
+
+	//TODO send configuration update to update allowed nssai list with re-registration required to UE
 	//     so that pdu session sync up happen in registration procedure when UE triggers this procedure
-	// gmm_message.SendConfigurationUpdateCommand(ue, models.AccessType__3_GPP_ACCESS, nil)
+	//gmm_message.SendConfigurationUpdateCommand(ue, models.AccessType__3_GPP_ACCESS, nil)
 
 	var allowedList []models.AllowedSnssai
-	// update Allowed Nssai List
+	//update Allowed Nssai List
 	for _, slice := range ue.AllowedNssai[accessType] {
 		if slice.AllowedSnssai.Sst != nssai.Sst && slice.AllowedSnssai.Sd != nssai.Sd {
 			allowedList = append(allowedList, slice)
@@ -1684,8 +1677,7 @@ func HandleUeSliceInfoAdd(ue *context.AmfUe, accessType models.AccessType, nssai
 
 // TS 24501 5.6.1
 func HandleServiceRequest(ue *context.AmfUe, anType models.AccessType,
-	serviceRequest *nasMessage.ServiceRequest,
-) error {
+	serviceRequest *nasMessage.ServiceRequest) error {
 	if ue == nil {
 		return fmt.Errorf("AmfUe is nil")
 	}
@@ -1702,8 +1694,8 @@ func HandleServiceRequest(ue *context.AmfUe, anType models.AccessType,
 	}
 
 	// Set No ongoing
-	if procedure := ue.GetOnGoing(anType).Procedure; procedure == context.OnGoingProcedurePaging {
-		ue.SetOnGoing(anType, &context.OnGoingProcedureWithPrio{
+	if procedure := ue.OnGoing(anType).Procedure; procedure == context.OnGoingProcedurePaging {
+		ue.SetOnGoing(anType, &context.OnGoing{
 			Procedure: context.OnGoingProcedureNothing,
 		})
 	} else if procedure != context.OnGoingProcedureNothing {
@@ -1774,7 +1766,7 @@ func HandleServiceRequest(ue *context.AmfUe, anType models.AccessType,
 		return nil
 	}
 
-	// TODO: workaround to send service accept in ICSR
+	//TODO: workaround to send service accept in ICSR
 	ue.RanUe[anType].UeContextRequest = true
 	if serviceType == nasMessage.ServiceTypeSignalling {
 		err := sendServiceAccept(ue, anType, ctxList, suList, nil, nil, nil, nil)
@@ -1812,11 +1804,11 @@ func HandleServiceRequest(ue *context.AmfUe, anType models.AccessType,
 						cause := nasMessage.Cause5GMMProtocolErrorUnspecified
 						if errRes != nil {
 							switch errRes.JsonData.Error.Cause {
-							case OUT_OF_LADN_SERVICE_AREA:
+							case "OUT_OF_LADN_SERVICE_AREA":
 								cause = nasMessage.Cause5GMMLADNNotAvailable
-							case PRIORITIZED_SERVICES_ONLY:
+							case "PRIORITIZED_SERVICES_ONLY":
 								cause = nasMessage.Cause5GMMRestrictedServiceArea
-							case DNN_CONGESTION, S_NSSAI_CONGESTION:
+							case "DNN_CONGESTION", "S-NSSAI_CONGESTION":
 								cause = nasMessage.Cause5GMMInsufficientUserPlaneResourcesForThePDUSession
 							}
 						}
@@ -1911,11 +1903,11 @@ func HandleServiceRequest(ue *context.AmfUe, anType models.AccessType,
 							cause := nasMessage.Cause5GMMProtocolErrorUnspecified
 							if errRes != nil {
 								switch errRes.JsonData.Error.Cause {
-								case OUT_OF_LADN_SERVICE_AREA:
+								case "OUT_OF_LADN_SERVICE_AREA":
 									cause = nasMessage.Cause5GMMLADNNotAvailable
-								case PRIORITIZED_SERVICES_ONLY:
+								case "PRIORITIZED_SERVICES_ONLY":
 									cause = nasMessage.Cause5GMMRestrictedServiceArea
-								case DNN_CONGESTION, S_NSSAI_CONGESTION:
+								case "DNN_CONGESTION", "S-NSSAI_CONGESTION":
 									cause = nasMessage.Cause5GMMInsufficientUserPlaneResourcesForThePDUSession
 								}
 							}
@@ -2016,8 +2008,7 @@ func HandleServiceRequest(ue *context.AmfUe, anType models.AccessType,
 
 func sendServiceAccept(ue *context.AmfUe, anType models.AccessType, ctxList ngapType.PDUSessionResourceSetupListCxtReq,
 	suList ngapType.PDUSessionResourceSetupListSUReq, pDUSessionStatus *[16]bool,
-	reactivationResult *[16]bool, errPduSessionId, errCause []uint8,
-) error {
+	reactivationResult *[16]bool, errPduSessionId, errCause []uint8) error {
 	if ue.RanUe[anType].UeContextRequest {
 		// update Kgnb/Kn3iwf
 		ue.UpdateSecurityContext(anType)
@@ -2047,8 +2038,7 @@ func sendServiceAccept(ue *context.AmfUe, anType models.AccessType, ctxList ngap
 
 // TS 24.501 5.4.1
 func HandleAuthenticationResponse(ue *context.AmfUe, accessType models.AccessType,
-	authenticationResponse *nasMessage.AuthenticationResponse,
-) error {
+	authenticationResponse *nasMessage.AuthenticationResponse) error {
 	ue.GmmLog.Info("Handle Authentication Response")
 
 	if ue.T3560 != nil {
@@ -2173,8 +2163,7 @@ func HandleAuthenticationResponse(ue *context.AmfUe, accessType models.AccessTyp
 }
 
 func HandleAuthenticationFailure(ue *context.AmfUe, anType models.AccessType,
-	authenticationFailure *nasMessage.AuthenticationFailure,
-) error {
+	authenticationFailure *nasMessage.AuthenticationFailure) error {
 	ue.GmmLog.Info("Handle Authentication Failure")
 
 	if ue.T3560 != nil {
@@ -2249,8 +2238,7 @@ func HandleAuthenticationFailure(ue *context.AmfUe, anType models.AccessType,
 }
 
 func HandleRegistrationComplete(ue *context.AmfUe, accessType models.AccessType,
-	registrationComplete *nasMessage.RegistrationComplete,
-) error {
+	registrationComplete *nasMessage.RegistrationComplete) error {
 	ue.GmmLog.Info("Handle Registration Complete")
 
 	if ue.T3550 != nil {
@@ -2282,8 +2270,7 @@ func HandleRegistrationComplete(ue *context.AmfUe, accessType models.AccessType,
 
 // TS 33.501 6.7.2
 func HandleSecurityModeComplete(ue *context.AmfUe, anType models.AccessType, procedureCode int64,
-	securityModeComplete *nasMessage.SecurityModeComplete,
-) error {
+	securityModeComplete *nasMessage.SecurityModeComplete) error {
 	ue.GmmLog.Info("Handle Security Mode Complete")
 
 	if ue.MacFailed {
@@ -2335,8 +2322,7 @@ func HandleSecurityModeComplete(ue *context.AmfUe, anType models.AccessType, pro
 }
 
 func HandleSecurityModeReject(ue *context.AmfUe, anType models.AccessType,
-	securityModeReject *nasMessage.SecurityModeReject,
-) error {
+	securityModeReject *nasMessage.SecurityModeReject) error {
 	ue.GmmLog.Info("Handle Security Mode Reject")
 
 	if ue.T3560 != nil {
@@ -2358,8 +2344,7 @@ func HandleSecurityModeReject(ue *context.AmfUe, anType models.AccessType,
 
 // TS 23.502 4.2.2.3
 func HandleDeregistrationRequest(ue *context.AmfUe, anType models.AccessType,
-	deregistrationRequest *nasMessage.DeregistrationRequestUEOriginatingDeregistration,
-) error {
+	deregistrationRequest *nasMessage.DeregistrationRequestUEOriginatingDeregistration) error {
 	ue.GmmLog.Info("Handle Deregistration Request(UE Originating)")
 
 	targetDeregistrationAccessType := deregistrationRequest.GetAccessType()
@@ -2450,8 +2435,7 @@ func HandleDeregistrationRequest(ue *context.AmfUe, anType models.AccessType,
 
 // TS 23.502 4.2.2.3
 func HandleDeregistrationAccept(ue *context.AmfUe, anType models.AccessType,
-	deregistrationAccept *nasMessage.DeregistrationAcceptUETerminatedDeregistration,
-) error {
+	deregistrationAccept *nasMessage.DeregistrationAcceptUETerminatedDeregistration) error {
 	ue.GmmLog.Info("Handle Deregistration Accept(UE Terminated)")
 
 	if ue.T3522 != nil {
diff --git a/gmm/init.go b/gmm/init.go
index d577acb..8ddeed8 100644
--- a/gmm/init.go
+++ b/gmm/init.go
@@ -9,7 +9,7 @@ package gmm
 import (
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
-	"github.com/omec-project/util/fsm"
+	"github.com/omec-project/fsm"
 )
 
 const (
diff --git a/gmm/init_test.go b/gmm/init_test.go
index 8d4dba9..e8c2aeb 100644
--- a/gmm/init_test.go
+++ b/gmm/init_test.go
@@ -11,7 +11,7 @@ import (
 	"testing"
 
 	"github.com/omec-project/amf/gmm"
-	"github.com/omec-project/util/fsm"
+	"github.com/omec-project/fsm"
 )
 
 func TestGmmFSM(t *testing.T) {
diff --git a/gmm/message/build.go b/gmm/message/build.go
index 0bf054c..a728964 100644
--- a/gmm/message/build.go
+++ b/gmm/message/build.go
@@ -11,6 +11,7 @@ import (
 	"encoding/hex"
 
 	"github.com/mitchellh/mapstructure"
+
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/factory"
 	"github.com/omec-project/amf/logger"
@@ -23,8 +24,7 @@ import (
 )
 
 func BuildDLNASTransport(ue *context.AmfUe, payloadContainerType uint8, nasPdu []byte,
-	pduSessionId uint8, cause *uint8, backoffTimerUint *uint8, backoffTimer uint8,
-) ([]byte, error) {
+	pduSessionId uint8, cause *uint8, backoffTimerUint *uint8, backoffTimer uint8) ([]byte, error) {
 	m := nas.NewMessage()
 	m.GmmMessage = nas.NewGmmMessage()
 	m.GmmHeader.SetMessageType(nas.MsgTypeDLNASTransport)
@@ -135,7 +135,8 @@ func BuildAuthenticationRequest(ue *context.AmfUe) ([]byte, error) {
 		if err != nil {
 			return nil, err
 		}
-		authenticationRequest.AuthenticationParameterRAND = nasType.NewAuthenticationParameterRAND(nasMessage.AuthenticationRequestAuthenticationParameterRANDType)
+		authenticationRequest.AuthenticationParameterRAND =
+			nasType.NewAuthenticationParameterRAND(nasMessage.AuthenticationRequestAuthenticationParameterRANDType)
 		copy(tmpArray[:], rand[0:16])
 		authenticationRequest.AuthenticationParameterRAND.SetRANDValue(tmpArray)
 
@@ -143,7 +144,8 @@ func BuildAuthenticationRequest(ue *context.AmfUe) ([]byte, error) {
 		if err != nil {
 			return nil, err
 		}
-		authenticationRequest.AuthenticationParameterAUTN = nasType.NewAuthenticationParameterAUTN(nasMessage.AuthenticationRequestAuthenticationParameterAUTNType)
+		authenticationRequest.AuthenticationParameterAUTN =
+			nasType.NewAuthenticationParameterAUTN(nasMessage.AuthenticationRequestAuthenticationParameterAUTNType)
 		authenticationRequest.AuthenticationParameterAUTN.SetLen(uint8(len(autn)))
 		copy(tmpArray[:], autn[0:16])
 		authenticationRequest.AuthenticationParameterAUTN.SetAUTN(tmpArray)
@@ -164,8 +166,7 @@ func BuildAuthenticationRequest(ue *context.AmfUe) ([]byte, error) {
 }
 
 func BuildServiceAccept(ue *context.AmfUe, pDUSessionStatus *[16]bool,
-	reactivationResult *[16]bool, errPduSessionId, errCause []uint8,
-) ([]byte, error) {
+	reactivationResult *[16]bool, errPduSessionId, errCause []uint8) ([]byte, error) {
 	m := nas.NewMessage()
 	m.GmmMessage = nas.NewGmmMessage()
 	m.GmmHeader.SetMessageType(nas.MsgTypeServiceAccept)
@@ -350,7 +351,8 @@ func BuildSecurityModeCommand(ue *context.AmfUe, eapSuccess bool, eapMessage str
 		securityModeCommand.IMEISVRequest.SetIMEISVRequestValue(nasMessage.IMEISVRequested)
 	}
 
-	securityModeCommand.Additional5GSecurityInformation = nasType.NewAdditional5GSecurityInformation(nasMessage.SecurityModeCommandAdditional5GSecurityInformationType)
+	securityModeCommand.Additional5GSecurityInformation =
+		nasType.NewAdditional5GSecurityInformation(nasMessage.SecurityModeCommandAdditional5GSecurityInformationType)
 	securityModeCommand.Additional5GSecurityInformation.SetLen(1)
 	if ue.RetransmissionOfInitialNASMsg {
 		securityModeCommand.Additional5GSecurityInformation.SetRINMR(1)
@@ -394,8 +396,7 @@ func BuildSecurityModeCommand(ue *context.AmfUe, eapSuccess bool, eapMessage str
 
 // T3346 timer are not supported
 func BuildDeregistrationRequest(ue *context.RanUe, accessType uint8, reRegistrationRequired bool,
-	cause5GMM uint8,
-) ([]byte, error) {
+	cause5GMM uint8) ([]byte, error) {
 	m := nas.NewMessage()
 	m.GmmMessage = nas.NewGmmMessage()
 	m.GmmHeader.SetMessageType(nas.MsgTypeDeregistrationRequestUETerminatedDeregistration)
@@ -452,8 +453,7 @@ func BuildRegistrationAccept(
 	anType models.AccessType,
 	pDUSessionStatus *[16]bool,
 	reactivationResult *[16]bool,
-	errPduSessionId, errCause []uint8,
-) ([]byte, error) {
+	errPduSessionId, errCause []uint8) ([]byte, error) {
 	m := nas.NewMessage()
 	m.GmmMessage = nas.NewGmmMessage()
 	m.GmmHeader.SetMessageType(nas.MsgTypeRegistrationAccept)
@@ -541,7 +541,8 @@ func BuildRegistrationAccept(
 	*/
 	// 5gs network feature support
 	if factory.AmfConfig.Configuration.Get5gsNwFeatSuppEnable() {
-		registrationAccept.NetworkFeatureSupport5GS = nasType.NewNetworkFeatureSupport5GS(nasMessage.RegistrationAcceptNetworkFeatureSupport5GSType)
+		registrationAccept.NetworkFeatureSupport5GS =
+			nasType.NewNetworkFeatureSupport5GS(nasMessage.RegistrationAcceptNetworkFeatureSupport5GSType)
 		registrationAccept.NetworkFeatureSupport5GS.SetLen(2)
 		if anType == models.AccessType__3_GPP_ACCESS {
 			registrationAccept.SetIMSVoPS3GPP(factory.AmfConfig.Configuration.Get5gsNwFeatSuppImsVoPS())
@@ -563,7 +564,8 @@ func BuildRegistrationAccept(
 	}
 
 	if reactivationResult != nil {
-		registrationAccept.PDUSessionReactivationResult = nasType.NewPDUSessionReactivationResult(nasMessage.RegistrationAcceptPDUSessionReactivationResultType)
+		registrationAccept.PDUSessionReactivationResult =
+			nasType.NewPDUSessionReactivationResult(nasMessage.RegistrationAcceptPDUSessionReactivationResultType)
 		registrationAccept.PDUSessionReactivationResult.SetLen(2)
 		registrationAccept.PDUSessionReactivationResult.Buffer = nasConvert.PSIToBuf(*reactivationResult)
 	}
@@ -588,7 +590,8 @@ func BuildRegistrationAccept(
 	}
 
 	if ue.NetworkSlicingSubscriptionChanged {
-		registrationAccept.NetworkSlicingIndication = nasType.NewNetworkSlicingIndication(nasMessage.RegistrationAcceptNetworkSlicingIndicationType)
+		registrationAccept.NetworkSlicingIndication =
+			nasType.NewNetworkSlicingIndication(nasMessage.RegistrationAcceptNetworkSlicingIndicationType)
 		registrationAccept.NetworkSlicingIndication.SetNSSCI(1)
 		registrationAccept.NetworkSlicingIndication.SetDCNI(0)
 		ue.NetworkSlicingSubscriptionChanged = false // reset the value
@@ -611,7 +614,8 @@ func BuildRegistrationAccept(
 	}*/
 
 	if anType == models.AccessType_NON_3_GPP_ACCESS {
-		registrationAccept.Non3GppDeregistrationTimerValue = nasType.NewNon3GppDeregistrationTimerValue(nasMessage.RegistrationAcceptNon3GppDeregistrationTimerValueType)
+		registrationAccept.Non3GppDeregistrationTimerValue =
+			nasType.NewNon3GppDeregistrationTimerValue(nasMessage.RegistrationAcceptNon3GppDeregistrationTimerValueType)
 		registrationAccept.Non3GppDeregistrationTimerValue.SetLen(1)
 		timerValue := nasConvert.GPRSTimer2ToNas(ue.Non3gppDeregistrationTimerValue)
 		registrationAccept.Non3GppDeregistrationTimerValue.SetGPRSTimer2Value(timerValue)
@@ -626,7 +630,8 @@ func BuildRegistrationAccept(
 	}*/
 
 	if ue.UESpecificDRX != nasMessage.DRXValueNotSpecified {
-		registrationAccept.NegotiatedDRXParameters = nasType.NewNegotiatedDRXParameters(nasMessage.RegistrationAcceptNegotiatedDRXParametersType)
+		registrationAccept.NegotiatedDRXParameters =
+			nasType.NewNegotiatedDRXParameters(nasMessage.RegistrationAcceptNegotiatedDRXParametersType)
 		registrationAccept.NegotiatedDRXParameters.SetLen(1)
 		registrationAccept.NegotiatedDRXParameters.SetDRXValue(ue.UESpecificDRX)
 	}
@@ -636,6 +641,24 @@ func BuildRegistrationAccept(
 	return nas_security.Encode(ue, m)
 }
 
+func includeConfiguredNssaiCheck(ue *context.AmfUe) bool {
+	if len(ue.ConfiguredNssai) == 0 {
+		return false
+	}
+
+	registrationRequest := ue.RegistrationRequest
+	if registrationRequest.RequestedNSSAI == nil {
+		return true
+	}
+	if ue.NetworkSliceInfo != nil && len(ue.NetworkSliceInfo.RejectedNssaiInPlmn) != 0 {
+		return true
+	}
+	if registrationRequest.NetworkSlicingIndication != nil && registrationRequest.NetworkSlicingIndication.GetDCNI() == 1 {
+		return true
+	}
+	return false
+}
+
 func BuildStatus5GMM(cause uint8) ([]byte, error) {
 	m := nas.NewMessage()
 	m.GmmMessage = nas.NewGmmMessage()
@@ -653,8 +676,7 @@ func BuildStatus5GMM(cause uint8) ([]byte, error) {
 }
 
 func BuildConfigurationUpdateCommand(ue *context.AmfUe, anType models.AccessType,
-	networkSlicingIndication *nasType.NetworkSlicingIndication,
-) ([]byte, error) {
+	networkSlicingIndication *nasType.NetworkSlicingIndication) ([]byte, error) {
 	m := nas.NewMessage()
 	m.GmmMessage = nas.NewGmmMessage()
 	m.GmmHeader.SetMessageType(nas.MsgTypeConfigurationUpdateCommand)
@@ -666,12 +688,14 @@ func BuildConfigurationUpdateCommand(ue *context.AmfUe, anType models.AccessType
 	configurationUpdateCommand.SetMessageType(nas.MsgTypeConfigurationUpdateCommand)
 
 	if ue.ConfigurationUpdateIndication.Octet != 0 {
-		configurationUpdateCommand.ConfigurationUpdateIndication = nasType.NewConfigurationUpdateIndication(nasMessage.ConfigurationUpdateCommandConfigurationUpdateIndicationType)
+		configurationUpdateCommand.ConfigurationUpdateIndication =
+			nasType.NewConfigurationUpdateIndication(nasMessage.ConfigurationUpdateCommandConfigurationUpdateIndicationType)
 		configurationUpdateCommand.ConfigurationUpdateIndication = &ue.ConfigurationUpdateIndication
 	}
 
 	if networkSlicingIndication != nil {
-		configurationUpdateCommand.NetworkSlicingIndication = nasType.NewNetworkSlicingIndication(nasMessage.ConfigurationUpdateCommandNetworkSlicingIndicationType)
+		configurationUpdateCommand.NetworkSlicingIndication =
+			nasType.NewNetworkSlicingIndication(nasMessage.ConfigurationUpdateCommandNetworkSlicingIndicationType)
 		configurationUpdateCommand.NetworkSlicingIndication = networkSlicingIndication
 	}
 
@@ -689,7 +713,8 @@ func BuildConfigurationUpdateCommand(ue *context.AmfUe, anType models.AccessType
 	}
 
 	if len(ue.AllowedNssai[anType]) > 0 {
-		configurationUpdateCommand.AllowedNSSAI = nasType.NewAllowedNSSAI(nasMessage.ConfigurationUpdateCommandAllowedNSSAIType)
+		configurationUpdateCommand.AllowedNSSAI =
+			nasType.NewAllowedNSSAI(nasMessage.ConfigurationUpdateCommandAllowedNSSAIType)
 		var buf []uint8
 		for _, allowedSnssai := range ue.AllowedNssai[anType] {
 			buf = append(buf, nasConvert.SnssaiToNas(*allowedSnssai.AllowedSnssai)...)
@@ -699,7 +724,8 @@ func BuildConfigurationUpdateCommand(ue *context.AmfUe, anType models.AccessType
 	}
 
 	if len(ue.ConfiguredNssai) > 0 {
-		configurationUpdateCommand.ConfiguredNSSAI = nasType.NewConfiguredNSSAI(nasMessage.ConfigurationUpdateCommandConfiguredNSSAIType)
+		configurationUpdateCommand.ConfiguredNSSAI =
+			nasType.NewConfiguredNSSAI(nasMessage.ConfigurationUpdateCommandConfiguredNSSAIType)
 		var buf []uint8
 		for _, snssai := range ue.ConfiguredNssai {
 			buf = append(buf, nasConvert.SnssaiToNas(*snssai.ConfiguredSnssai)...)
@@ -720,7 +746,8 @@ func BuildConfigurationUpdateCommand(ue *context.AmfUe, anType models.AccessType
 	// TODO: UniversalTimeAndLocalTimeZone
 	if anType == models.AccessType__3_GPP_ACCESS && ue.AmPolicyAssociation != nil &&
 		ue.AmPolicyAssociation.ServAreaRes != nil {
-		configurationUpdateCommand.ServiceAreaList = nasType.NewServiceAreaList(nasMessage.ConfigurationUpdateCommandServiceAreaListType)
+		configurationUpdateCommand.ServiceAreaList =
+			nasType.NewServiceAreaList(nasMessage.ConfigurationUpdateCommandServiceAreaListType)
 		partialServiceAreaList := nasConvert.PartialServiceAreaListToNas(ue.PlmnId, *ue.AmPolicyAssociation.ServAreaRes)
 		configurationUpdateCommand.ServiceAreaList.SetLen(uint8(len(partialServiceAreaList)))
 		configurationUpdateCommand.ServiceAreaList.SetPartialServiceAreaList(partialServiceAreaList)
@@ -742,19 +769,22 @@ func BuildConfigurationUpdateCommand(ue *context.AmfUe, anType models.AccessType
 	if ue.TimeZone != "" {
 		localTimeZone := nasConvert.LocalTimeZoneToNas(ue.TimeZone)
 		localTimeZone.SetIei(nasMessage.ConfigurationUpdateCommandLocalTimeZoneType)
-		configurationUpdateCommand.LocalTimeZone = nasType.NewLocalTimeZone(nasMessage.ConfigurationUpdateCommandLocalTimeZoneType)
+		configurationUpdateCommand.LocalTimeZone =
+			nasType.NewLocalTimeZone(nasMessage.ConfigurationUpdateCommandLocalTimeZoneType)
 		configurationUpdateCommand.LocalTimeZone = &localTimeZone
 	}
 
 	if ue.TimeZone != "" {
 		daylightSavingTime := nasConvert.DaylightSavingTimeToNas(ue.TimeZone)
 		daylightSavingTime.SetIei(nasMessage.ConfigurationUpdateCommandNetworkDaylightSavingTimeType)
-		configurationUpdateCommand.NetworkDaylightSavingTime = nasType.NewNetworkDaylightSavingTime(nasMessage.ConfigurationUpdateCommandNetworkDaylightSavingTimeType)
+		configurationUpdateCommand.NetworkDaylightSavingTime =
+			nasType.NewNetworkDaylightSavingTime(nasMessage.ConfigurationUpdateCommandNetworkDaylightSavingTimeType)
 		configurationUpdateCommand.NetworkDaylightSavingTime = &daylightSavingTime
 	}
 
 	if len(ue.LadnInfo) > 0 {
-		configurationUpdateCommand.LADNInformation = nasType.NewLADNInformation(nasMessage.ConfigurationUpdateCommandLADNInformationType)
+		configurationUpdateCommand.LADNInformation =
+			nasType.NewLADNInformation(nasMessage.ConfigurationUpdateCommandLADNInformationType)
 		var buf []uint8
 		for _, ladn := range ue.LadnInfo {
 			ladnNas := nasConvert.LadnToNas(ladn.Dnn, ladn.TaiLists)
diff --git a/gmm/message/send.go b/gmm/message/send.go
index c853253..d2e4773 100644
--- a/gmm/message/send.go
+++ b/gmm/message/send.go
@@ -19,8 +19,7 @@ import (
 
 // backOffTimerUint = 7 means backoffTimer is null
 func SendDLNASTransport(ue *context.RanUe, payloadContainerType uint8, nasPdu []byte,
-	pduSessionId int32, cause uint8, backOffTimerUint *uint8, backOffTimer uint8,
-) {
+	pduSessionId int32, cause uint8, backOffTimerUint *uint8, backOffTimer uint8) {
 	ue.AmfUe.GmmLog.Info("Send DL NAS Transport")
 	var causePtr *uint8
 	if cause != 0 {
@@ -51,7 +50,7 @@ func SendNotification(ue *context.RanUe, nasMsg []byte) {
 			ngap_message.SendDownlinkNasTransport(ue, nasMsg, nil)
 		}, func() {
 			amfUe.GmmLog.Warnf("T3565 Expires %d times, abort notification procedure", cfg.MaxRetryTimes)
-			if amfUe.GetOnGoing(models.AccessType__3_GPP_ACCESS).Procedure != context.OnGoingProcedureN2Handover {
+			if amfUe.OnGoing(models.AccessType__3_GPP_ACCESS).Procedure != context.OnGoingProcedureN2Handover {
 				callback.SendN1N2TransferFailureNotification(amfUe, models.N1N2MessageTransferCause_UE_NOT_RESPONDING)
 			}
 			amfUe.T3565 = nil // clear the timer
@@ -105,8 +104,7 @@ func SendAuthenticationRequest(ue *context.RanUe) {
 }
 
 func SendServiceAccept(ue *context.RanUe, pDUSessionStatus *[16]bool, reactivationResult *[16]bool,
-	errPduSessionId, errCause []uint8,
-) {
+	errPduSessionId, errCause []uint8) {
 	ue.AmfUe.GmmLog.Info("Send Service Accept")
 
 	nasMsg, err := BuildServiceAccept(ue.AmfUe, pDUSessionStatus, reactivationResult, errPduSessionId, errCause)
@@ -118,8 +116,7 @@ func SendServiceAccept(ue *context.RanUe, pDUSessionStatus *[16]bool, reactivati
 }
 
 func SendConfigurationUpdateCommand(amfUe *context.AmfUe, accessType models.AccessType,
-	networkSlicingIndication *nasType.NetworkSlicingIndication,
-) {
+	networkSlicingIndication *nasType.NetworkSlicingIndication) {
 	amfUe.GmmLog.Info("Configuration Update Command")
 
 	nasMsg, err := BuildConfigurationUpdateCommand(amfUe, accessType, networkSlicingIndication)
@@ -211,7 +208,7 @@ func SendSecurityModeCommand(ue *context.RanUe, eapSuccess bool, eapMessage stri
 func SendDeregistrationRequest(ue *context.RanUe, accessType uint8, reRegistrationRequired bool, cause5GMM uint8) {
 	ue.AmfUe.GmmLog.Info("Send Deregistration Request")
 
-	// setting accesstype
+	//setting accesstype
 	ue.AmfUe.DeregistrationTargetAccessType = accessType
 
 	nasMsg, err := BuildDeregistrationRequest(ue, accessType, reRegistrationRequired, cause5GMM)
@@ -267,8 +264,7 @@ func SendRegistrationAccept(
 	pDUSessionStatus *[16]bool,
 	reactivationResult *[16]bool,
 	errPduSessionId, errCause []uint8,
-	pduSessionResourceSetupList *ngapType.PDUSessionResourceSetupListCxtReq,
-) {
+	pduSessionResourceSetupList *ngapType.PDUSessionResourceSetupListCxtReq) {
 	ue.GmmLog.Info("Send Registration Accept")
 
 	nasMsg, err := BuildRegistrationAccept(ue, anType, pDUSessionStatus, reactivationResult, errPduSessionId, errCause)
diff --git a/gmm/mock_gmm.go b/gmm/mock_gmm.go
index 1daab92..cca9959 100644
--- a/gmm/mock_gmm.go
+++ b/gmm/mock_gmm.go
@@ -8,17 +8,15 @@ package gmm
 import (
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
-	"github.com/omec-project/util/fsm"
+	"github.com/omec-project/fsm"
 )
 
-var (
-	MockRegisteredCallCount            uint32 = 0
-	MockDeregisteredInitiatedCallCount uint32 = 0
-	MockContextSetupCallCount          uint32 = 0
-	MockDeRegisteredCallCount          uint32 = 0
-	MockSecurityModeCallCount          uint32 = 0
-	MockAuthenticationCallCount        uint32 = 0
-)
+var MockRegisteredCallCount uint32 = 0
+var MockDeregisteredInitiatedCallCount uint32 = 0
+var MockContextSetupCallCount uint32 = 0
+var MockDeRegisteredCallCount uint32 = 0
+var MockSecurityModeCallCount uint32 = 0
+var MockAuthenticationCallCount uint32 = 0
 
 var mockCallbacks = fsm.Callbacks{
 	context.Deregistered:            MockDeRegistered,
diff --git a/gmm/sm.go b/gmm/sm.go
index 14dd54b..7b4f89f 100644
--- a/gmm/sm.go
+++ b/gmm/sm.go
@@ -8,17 +8,17 @@
 package gmm
 
 import (
-	"fmt"
+	// "fmt"
 
 	"github.com/omec-project/amf/context"
 	gmm_message "github.com/omec-project/amf/gmm/message"
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/util"
+	"github.com/omec-project/fsm"
 	"github.com/omec-project/nas"
 	"github.com/omec-project/nas/nasMessage"
 	"github.com/omec-project/nas/security"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/fsm"
 )
 
 func DeRegistered(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
@@ -58,9 +58,7 @@ func DeRegistered(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 	case NwInitiatedDeregistrationEvent:
 		amfUe := args[ArgAmfUe].(*context.AmfUe)
 		accessType := args[ArgAccessType].(models.AccessType)
-		if err := NetworkInitiatedDeregistrationProcedure(amfUe, accessType); err != nil {
-			logger.GmmLog.Errorln(err)
-		}
+		NetworkInitiatedDeregistrationProcedure(amfUe, accessType)
 	case StartAuthEvent:
 		logger.GmmLog.Debugln(event)
 	case fsm.ExitEvent:
@@ -78,7 +76,7 @@ func Registered(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 		accessType := args[ArgAccessType].(models.AccessType)
 		amfUe.ClearRegistrationRequestData(accessType)
 		amfUe.GmmLog.Debugln("EntryEvent at GMM State[Registered]")
-		// store context in DB. Registration procedure is complete.
+		//store context in DB. Registration procedure is complete.
 		amfUe.PublishUeCtxtInfo()
 		context.StoreContextInDB(amfUe)
 	case GmmMessageEvent:
@@ -140,9 +138,7 @@ func Registered(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 	case NwInitiatedDeregistrationEvent:
 		amfUe := args[ArgAmfUe].(*context.AmfUe)
 		accessType := args[ArgAccessType].(models.AccessType)
-		if err := NetworkInitiatedDeregistrationProcedure(amfUe, accessType); err != nil {
-			logger.GmmLog.Errorln(err)
-		}
+		NetworkInitiatedDeregistrationProcedure(amfUe, accessType)
 	/*TODO */
 	case SliceInfoAddEvent:
 	case SliceInfoDeleteEvent:
@@ -158,10 +154,9 @@ func Authentication(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 	switch event {
 	case fsm.EntryEvent:
 		amfUe = args[ArgAmfUe].(*context.AmfUe)
-		amfUe.GmmLog = amfUe.GmmLog.WithField(logger.FieldSuci, fmt.Sprintf("SUCI:%s", amfUe.Suci))
-		amfUe.TxLog = amfUe.TxLog.WithField(logger.FieldSuci, fmt.Sprintf("SUCI:%s", amfUe.Suci))
+		amfUe.GmmLog = amfUe.GmmLog
+		amfUe.TxLog = amfUe.TxLog
 		amfUe.GmmLog.Debugln("EntryEvent at GMM State[Authentication]")
-		amfUe.PublishUeCtxtInfo()
 		fallthrough
 	case AuthRestartEvent:
 		amfUe = args[ArgAmfUe].(*context.AmfUe)
@@ -226,15 +221,11 @@ func Authentication(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 		amfUe := args[ArgAmfUe].(*context.AmfUe)
 		accessType := args[ArgAccessType].(models.AccessType)
 		logger.GmmLog.Debugln(event)
-		if err := HandleAuthenticationError(amfUe, accessType); err != nil {
-			logger.GmmLog.Errorln(err)
-		}
+		HandleAuthenticationError(amfUe, accessType)
 	case NwInitiatedDeregistrationEvent:
 		amfUe := args[ArgAmfUe].(*context.AmfUe)
 		accessType := args[ArgAccessType].(models.AccessType)
-		if err := NetworkInitiatedDeregistrationProcedure(amfUe, accessType); err != nil {
-			logger.GmmLog.Errorln(err)
-		}
+		NetworkInitiatedDeregistrationProcedure(amfUe, accessType)
 	case fsm.ExitEvent:
 		// clear authentication related data at exit
 		amfUe := args[ArgAmfUe].(*context.AmfUe)
@@ -252,10 +243,10 @@ func SecurityMode(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 		amfUe := args[ArgAmfUe].(*context.AmfUe)
 		accessType := args[ArgAccessType].(models.AccessType)
 		// set log information
-		amfUe.NASLog = amfUe.NASLog.WithField(logger.FieldSupi, fmt.Sprintf("SUPI:%s", amfUe.Supi))
-		amfUe.TxLog = amfUe.NASLog.WithField(logger.FieldSupi, fmt.Sprintf("SUPI:%s", amfUe.Supi))
-		amfUe.GmmLog = amfUe.GmmLog.WithField(logger.FieldSupi, fmt.Sprintf("SUPI:%s", amfUe.Supi))
-		amfUe.ProducerLog = logger.ProducerLog.WithField(logger.FieldSupi, fmt.Sprintf("SUPI:%s", amfUe.Supi))
+		amfUe.NASLog = amfUe.NASLog
+		amfUe.TxLog = amfUe.NASLog
+		amfUe.GmmLog = amfUe.GmmLog
+		amfUe.ProducerLog = logger.ProducerLog
 		amfUe.PublishUeCtxtInfo()
 		amfUe.GmmLog.Debugln("EntryEvent at GMM State[SecurityMode]")
 		if amfUe.SecurityContextIsValid() {
@@ -276,14 +267,11 @@ func SecurityMode(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 			// Generate KnasEnc, KnasInt
 			amfUe.DerivateAlgKey()
 			if amfUe.CipheringAlg == security.AlgCiphering128NEA0 && amfUe.IntegrityAlg == security.AlgIntegrity128NIA0 {
-				err := GmmFSM.SendEvent(state, SecuritySkipEvent, fsm.ArgsType{
+				GmmFSM.SendEvent(state, SecuritySkipEvent, fsm.ArgsType{
 					ArgAmfUe:      amfUe,
 					ArgAccessType: accessType,
 					ArgNASMessage: amfUe.RegistrationRequest,
 				})
-				if err != nil {
-					logger.GmmLog.Errorln(err)
-				}
 			} else {
 				gmm_message.SendSecurityModeCommand(amfUe.RanUe[accessType], eapSuccess, eapMessage)
 			}
@@ -311,7 +299,7 @@ func SecurityMode(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 				logger.GmmLog.Errorln(err)
 			}
 		case nas.MsgTypeRegistrationRequest:
-			// Sending AbortEvent to ongoing procedure
+			//Sending AbortEvent to ongoing procedure
 			err := GmmFSM.SendEvent(state, SecurityModeAbortEvent, fsm.ArgsType{
 				ArgAmfUe:      amfUe,
 				ArgAccessType: accessType,
@@ -351,9 +339,7 @@ func SecurityMode(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 		accessType := args[ArgAccessType].(models.AccessType)
 		amfUe.T3560.Stop()
 		amfUe.T3560 = nil
-		if err := NetworkInitiatedDeregistrationProcedure(amfUe, accessType); err != nil {
-			logger.GmmLog.Errorln(err)
-		}
+		NetworkInitiatedDeregistrationProcedure(amfUe, accessType)
 	case SecurityModeSuccessEvent:
 		logger.GmmLog.Debugln(event)
 	case SecurityModeFailEvent:
@@ -453,9 +439,7 @@ func ContextSetup(state *fsm.State, event fsm.EventType, args fsm.ArgsType) {
 		amfUe.T3550.Stop()
 		amfUe.T3550 = nil
 		amfUe.State[accessType].Set(context.Registered)
-		if err := NetworkInitiatedDeregistrationProcedure(amfUe, accessType); err != nil {
-			logger.GmmLog.Errorln(err)
-		}
+		NetworkInitiatedDeregistrationProcedure(amfUe, accessType)
 	case ContextSetupFailEvent:
 		logger.GmmLog.Debugln(event)
 	case fsm.ExitEvent:
diff --git a/go.mod b/go.mod
index 567a3da..af02ca8 100644
--- a/go.mod
+++ b/go.mod
@@ -1,124 +1,131 @@
 module github.com/omec-project/amf
 
-go 1.21
+go 1.19
 
 require (
 	git.cs.nctu.edu.tw/calee/sctp v1.1.0
+	github.com/Nikhil690/connsert v1.3.7
 	github.com/antihax/optional v1.0.0
 	github.com/antonfisher/nested-logrus-formatter v1.3.1
-	github.com/fsnotify/fsnotify v1.7.0
-	github.com/gin-contrib/cors v1.7.1
+	github.com/fsnotify/fsnotify v1.4.9
+	github.com/gin-contrib/cors v1.3.1
 	github.com/gin-gonic/gin v1.9.1
 	github.com/google/uuid v1.6.0
-	github.com/mitchellh/mapstructure v1.5.0
+	github.com/mitchellh/mapstructure v1.4.1
 	github.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826
-	github.com/omec-project/aper v1.1.2
-	github.com/omec-project/config5g v1.3.3
-	github.com/omec-project/http2_util v1.2.0
+	github.com/omec-project/MongoDBLibrary v1.1.3
+	github.com/omec-project/UeauCommon v1.1.0
+	github.com/omec-project/aper v1.1.0
+	github.com/omec-project/fsm v1.1.0
+	github.com/omec-project/http2_util v1.1.0
+	github.com/omec-project/http_wrapper v1.1.0
+	github.com/omec-project/idgenerator v1.1.0
 	github.com/omec-project/logger_util v1.2.0
-	github.com/omec-project/metricfunc v1.4.0
-	github.com/omec-project/nas v1.2.2
-	github.com/omec-project/ngap v1.2.0
-	github.com/omec-project/nrf v1.4.0
-	github.com/omec-project/openapi v1.2.0
+	github.com/omec-project/nas v1.1.4
+	github.com/omec-project/ngap v1.1.0
+	github.com/omec-project/openapi v1.1.0
+	github.com/omec-project/path_util v1.1.0
 	github.com/omec-project/util v1.0.13
-	github.com/prometheus/client_golang v1.19.0
+	github.com/prometheus/client_golang v1.14.0
 	github.com/sirupsen/logrus v1.9.3
-	github.com/spf13/viper v1.18.2
-	github.com/stretchr/testify v1.9.0
-	github.com/urfave/cli v1.22.14
-	go.mongodb.org/mongo-driver v1.11.7
-	google.golang.org/grpc v1.63.2
+	github.com/spf13/viper v1.7.1
+	github.com/stretchr/testify v1.8.3
+	github.com/urfave/cli v1.22.10
+	go.mongodb.org/mongo-driver v1.11.0
+	google.golang.org/grpc v1.62.1
 	google.golang.org/protobuf v1.33.0
 	gopkg.in/yaml.v2 v2.4.0
 )
 
+require (
+	github.com/bytedance/sonic v1.9.1 // indirect
+	github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.2 // indirect
+	github.com/goccy/go-json v0.10.2 // indirect
+	github.com/klauspost/cpuid/v2 v2.2.4 // indirect
+	github.com/pelletier/go-toml/v2 v2.0.8 // indirect
+	github.com/pierrec/lz4/v4 v4.1.15 // indirect
+	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
+	golang.org/x/arch v0.3.0 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240123012728-ef4313101c80 // indirect
+	google.golang.org/genproto/googleapis/rpc v0.0.0-20240123012728-ef4313101c80 // indirect
+)
+
 require (
 	github.com/aead/cmac v0.0.0-20160719120800-7af84192f0b1 // indirect
 	github.com/asaskevich/govalidator v0.0.0-20210307081110-f21760c49a8d // indirect
 	github.com/avast/retry-go/v4 v4.1.0 // indirect
 	github.com/beorn7/perks v1.0.1 // indirect
-	github.com/bytedance/sonic v1.11.3 // indirect
 	github.com/cespare/xxhash/v2 v2.2.0 // indirect
-	github.com/chenzhuoyu/base64x v0.0.0-20230717121745-296ad89f973d // indirect
-	github.com/chenzhuoyu/iasm v0.9.1 // indirect
 	github.com/coreos/go-semver v0.3.0 // indirect
 	github.com/coreos/go-systemd/v22 v22.3.2 // indirect
 	github.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect
-	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect
+	github.com/davecgh/go-spew v1.1.1 // indirect
 	github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect
-	github.com/evanphx/json-patch v5.9.0+incompatible // indirect
-	github.com/gabriel-vasile/mimetype v1.4.3 // indirect
+	github.com/evanphx/json-patch v4.11.0+incompatible // indirect
 	github.com/gin-contrib/sse v0.1.0 // indirect
 	github.com/go-playground/locales v0.14.1 // indirect
 	github.com/go-playground/universal-translator v0.18.1 // indirect
-	github.com/go-playground/validator/v10 v10.19.0 // indirect
+	github.com/go-playground/validator/v10 v10.14.0 // indirect
 	github.com/go-redis/redis/v8 v8.11.5 // indirect
-	github.com/goccy/go-json v0.10.2 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
-	github.com/golang-jwt/jwt v3.2.2+incompatible // indirect
-	github.com/golang/protobuf v1.5.4 // indirect
+	github.com/golang-jwt/jwt v3.2.1+incompatible // indirect
+	github.com/golang/protobuf v1.5.3 // indirect
 	github.com/golang/snappy v0.0.4 // indirect
 	github.com/h2non/parth v0.0.0-20190131123155-b4df798d6542 // indirect
 	github.com/hashicorp/hcl v1.0.0 // indirect
 	github.com/jmoiron/sqlx v1.3.5 // indirect
 	github.com/json-iterator/go v1.1.12 // indirect
-	github.com/klauspost/compress v1.17.0 // indirect
-	github.com/klauspost/cpuid/v2 v2.2.7 // indirect
-	github.com/leodido/go-urn v1.4.0 // indirect
+	github.com/klauspost/compress v1.15.9 // indirect
+	github.com/leodido/go-urn v1.2.4 // indirect
 	github.com/lib/pq v1.10.6 // indirect
-	github.com/magiconair/properties v1.8.7 // indirect
-	github.com/mattn/go-isatty v0.0.20 // indirect
+	github.com/magiconair/properties v1.8.6 // indirect
+	github.com/mattn/go-isatty v0.0.19 // indirect
+	github.com/matttproud/golang_protobuf_extensions v1.0.1 // indirect
 	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
 	github.com/modern-go/reflect2 v1.0.2 // indirect
 	github.com/montanaflynn/stats v0.6.6 // indirect
 	github.com/omec-project/logger_conf v1.1.1 // indirect
-	github.com/omec-project/util_3gpp v1.2.1 // indirect
-	github.com/pelletier/go-toml/v2 v2.2.0 // indirect
-	github.com/pierrec/lz4/v4 v4.1.15 // indirect
+	github.com/omec-project/metricfunc v1.1.1
+	github.com/omec-project/nrf v1.0.1
+	github.com/omec-project/util_3gpp v1.1.1 // indirect
+	github.com/pelletier/go-toml v1.7.0 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
-	github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect
-	github.com/prometheus/client_model v0.5.0 // indirect
-	github.com/prometheus/common v0.48.0 // indirect
-	github.com/prometheus/procfs v0.12.0 // indirect
+	github.com/pmezard/go-difflib v1.0.0 // indirect
+	github.com/prometheus/client_model v0.3.0 // indirect
+	github.com/prometheus/common v0.37.0 // indirect
+	github.com/prometheus/procfs v0.8.0 // indirect
 	github.com/russross/blackfriday/v2 v2.1.0 // indirect
-	github.com/sagikazarmark/locafero v0.4.0 // indirect
-	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
-	github.com/segmentio/kafka-go v0.4.47
-	github.com/sourcegraph/conc v0.3.0 // indirect
-	github.com/spf13/afero v1.11.0 // indirect
-	github.com/spf13/cast v1.6.0 // indirect
-	github.com/spf13/pflag v1.0.5 // indirect
-	github.com/subosito/gotenv v1.6.0 // indirect
+	github.com/segmentio/kafka-go v0.4.38
+	github.com/spf13/afero v1.1.2 // indirect
+	github.com/spf13/cast v1.3.0 // indirect
+	github.com/spf13/jwalterweatherman v1.0.0 // indirect
+	github.com/spf13/pflag v1.0.3 // indirect
+	github.com/subosito/gotenv v1.2.0 // indirect
 	github.com/thakurajayL/go-ipam v0.0.5-dev // indirect
-	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
-	github.com/ugorji/go/codec v1.2.12 // indirect
+	github.com/ugorji/go/codec v1.2.11 // indirect
 	github.com/xdg-go/pbkdf2 v1.0.0 // indirect
-	github.com/xdg-go/scram v1.1.2 // indirect
-	github.com/xdg-go/stringprep v1.0.4 // indirect
+	github.com/xdg-go/scram v1.1.1 // indirect
+	github.com/xdg-go/stringprep v1.0.3 // indirect
 	github.com/youmark/pkcs8 v0.0.0-20201027041543-1326539a0a0a // indirect
-	go.etcd.io/etcd/api/v3 v3.5.10 // indirect
-	go.etcd.io/etcd/client/pkg/v3 v3.5.10 // indirect
-	go.etcd.io/etcd/client/v3 v3.5.10 // indirect
+	go.etcd.io/etcd/api/v3 v3.5.4 // indirect
+	go.etcd.io/etcd/client/pkg/v3 v3.5.4 // indirect
+	go.etcd.io/etcd/client/v3 v3.5.4 // indirect
 	go.uber.org/atomic v1.9.0 // indirect
-	go.uber.org/multierr v1.9.0 // indirect
-	go.uber.org/zap v1.24.0 // indirect
+	go.uber.org/multierr v1.8.0 // indirect
+	go.uber.org/zap v1.23.0 // indirect
 	go4.org/intern v0.0.0-20220617035311-6925f38cc365 // indirect
-	go4.org/unsafe/assume-no-moving-gc v0.0.0-20230525183740-e7c30c78aeb2 // indirect
-	golang.org/x/arch v0.7.0 // indirect
-	golang.org/x/crypto v0.21.0 // indirect
-	golang.org/x/exp v0.0.0-20230905200255-921286631fa9 // indirect
-	golang.org/x/net v0.22.0 // indirect
-	golang.org/x/oauth2 v0.17.0 // indirect
+	go4.org/unsafe/assume-no-moving-gc v0.0.0-20220617031537-928513b29760 // indirect
+	golang.org/x/crypto v0.18.0 // indirect
+	golang.org/x/net v0.20.0 // indirect
+	golang.org/x/oauth2 v0.16.0 // indirect
 	golang.org/x/sync v0.6.0 // indirect
-	golang.org/x/sys v0.18.0 // indirect
+	golang.org/x/sys v0.16.0 // indirect
 	golang.org/x/text v0.14.0 // indirect
 	google.golang.org/appengine v1.6.8 // indirect
-	google.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240227224415-6ceb2ff114de // indirect
-	google.golang.org/genproto/googleapis/rpc v0.0.0-20240227224415-6ceb2ff114de // indirect
+	google.golang.org/genproto v0.0.0-20240123012728-ef4313101c80 // indirect
 	gopkg.in/h2non/gock.v1 v1.1.2 // indirect
-	gopkg.in/ini.v1 v1.67.0 // indirect
+	gopkg.in/ini.v1 v1.51.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	inet.af/netaddr v0.0.0-20220811202034-502d2d690317 // indirect
 )
diff --git a/go.sum b/go.sum
index 98dc576..418d167 100644
--- a/go.sum
+++ b/go.sum
@@ -1,166 +1,387 @@
+cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+cloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=
+cloud.google.com/go v0.44.1/go.mod h1:iSa0KzasP4Uvy3f1mN/7PiObzGgflwredwwASm/v6AU=
+cloud.google.com/go v0.44.2/go.mod h1:60680Gw3Yr4ikxnPRS/oxxkBccT6SA1yMk63TGekxKY=
+cloud.google.com/go v0.45.1/go.mod h1:RpBamKRgapWJb87xiFSdk4g1CME7QZg3uwTez+TSTjc=
+cloud.google.com/go v0.46.3/go.mod h1:a6bKKbmY7er1mI7TEI4lsAkts/mkhTSZK8w33B4RAg0=
+cloud.google.com/go v0.50.0/go.mod h1:r9sluTvynVuxRIOHXQEHMFffphuXHOMZMycpNR5e6To=
+cloud.google.com/go v0.52.0/go.mod h1:pXajvRH/6o3+F9jDHZWQ5PbGhn+o8w9qiu/CffaVdO4=
+cloud.google.com/go v0.53.0/go.mod h1:fp/UouUEsRkN6ryDKNW/Upv/JBKnv6WDthjR6+vze6M=
+cloud.google.com/go v0.54.0/go.mod h1:1rq2OEkV3YMf6n/9ZvGWI3GWw0VoqH/1x2nd8Is/bPc=
+cloud.google.com/go v0.56.0/go.mod h1:jr7tqZxxKOVYizybht9+26Z/gUq7tiRzu+ACVAMbKVk=
+cloud.google.com/go v0.57.0/go.mod h1:oXiQ6Rzq3RAkkY7N6t3TcE6jE+CIBBbA36lwQ1JyzZs=
+cloud.google.com/go v0.62.0/go.mod h1:jmCYTdRCQuc1PHIIJ/maLInMho30T/Y0M4hTdTShOYc=
+cloud.google.com/go v0.65.0/go.mod h1:O5N8zS7uWy9vkA9vayVHs65eM1ubvY4h553ofrNHObY=
+cloud.google.com/go/bigquery v1.0.1/go.mod h1:i/xbL2UlR5RvWAURpBYZTtm/cXjCha9lbfbpx4poX+o=
+cloud.google.com/go/bigquery v1.3.0/go.mod h1:PjpwJnslEMmckchkHFfq+HTD2DmtT67aNFKH1/VBDHE=
+cloud.google.com/go/bigquery v1.4.0/go.mod h1:S8dzgnTigyfTmLBfrtrhyYhwRxG72rYxvftPBK2Dvzc=
+cloud.google.com/go/bigquery v1.5.0/go.mod h1:snEHRnqQbz117VIFhE8bmtwIDY80NLUZUMb4Nv6dBIg=
+cloud.google.com/go/bigquery v1.7.0/go.mod h1://okPTzCYNXSlb24MZs83e2Do+h+VXtc4gLoIoXIAPc=
+cloud.google.com/go/bigquery v1.8.0/go.mod h1:J5hqkt3O0uAFnINi6JXValWIb1v0goeZM77hZzJN/fQ=
+cloud.google.com/go/datastore v1.0.0/go.mod h1:LXYbyblFSglQ5pkeyhO+Qmw7ukd3C+pD7TKLgZqpHYE=
+cloud.google.com/go/datastore v1.1.0/go.mod h1:umbIZjpQpHh4hmRpGhH4tLFup+FVzqBi1b3c64qFpCk=
+cloud.google.com/go/firestore v1.1.0/go.mod h1:ulACoGHTpvq5r8rxGJ4ddJZBZqakUQqClKRT5SZwBmk=
+cloud.google.com/go/pubsub v1.0.1/go.mod h1:R0Gpsv3s54REJCy4fxDixWD93lHJMoZTyQ2kNxGRt3I=
+cloud.google.com/go/pubsub v1.1.0/go.mod h1:EwwdRX2sKPjnvnqCa270oGRyludottCI76h+R3AArQw=
+cloud.google.com/go/pubsub v1.2.0/go.mod h1:jhfEVHT8odbXTkndysNHCcx0awwzvfOlguIAii9o8iA=
+cloud.google.com/go/pubsub v1.3.1/go.mod h1:i+ucay31+CNRpDW4Lu78I4xXG+O1r/MAHgjpRVR+TSU=
+cloud.google.com/go/storage v1.0.0/go.mod h1:IhtSnM/ZTZV8YYJWCY8RULGVqBDmpoyjwiyrjsg+URw=
+cloud.google.com/go/storage v1.5.0/go.mod h1:tpKbwo567HUNpVclU5sGELwQWBDZ8gh0ZeosJ0Rtdos=
+cloud.google.com/go/storage v1.6.0/go.mod h1:N7U0C8pVQ/+NIKOBQyamJIeKQKkZ+mxpohlUTyfDhBk=
+cloud.google.com/go/storage v1.8.0/go.mod h1:Wv1Oy7z6Yz3DshWRJFhqM/UCfaWIRTdp0RXyy7KQOVs=
+cloud.google.com/go/storage v1.10.0/go.mod h1:FLPqc6j+Ki4BU591ie1oL6qBQGu2Bl/tZ9ullr3+Kg0=
+dmitri.shuralyov.com/gpu/mtl v0.0.0-20190408044501-666a987793e9/go.mod h1:H6x//7gZCb22OMCxBHrMx7a5I7Hp++hsVxbQ4BYO7hU=
 git.cs.nctu.edu.tw/calee/sctp v1.1.0 h1:caiPJ0g2sH1QmDkC7x2yklKrc01Fuo1rqYW68Tq4mU0=
 git.cs.nctu.edu.tw/calee/sctp v1.1.0/go.mod h1:NeOuBXO1iJBtldmNhkfSH8yFbnxlhI8eEJdUd7DZvws=
 github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 h1:UQHMgLO+TxOElx5B5HZ4hJQsoJ/PvUvKRhJHDQXO8P8=
-github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=
-github.com/BurntSushi/toml v1.3.2/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=
+github.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=
+github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
+github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=
 github.com/Microsoft/go-winio v0.5.2 h1:a9IhgEQBCUEk6QCdml9CiJGhAws+YwffDHEMp1VMrpA=
-github.com/Microsoft/go-winio v0.5.2/go.mod h1:WpS1mjBmmwHBEWmogvA2mj8546UReBk4v8QkMxJ6pZY=
 github.com/Microsoft/hcsshim v0.9.4 h1:mnUj0ivWy6UzbB1uLFqKR6F+ZyiDc7j4iGgHTpO+5+I=
-github.com/Microsoft/hcsshim v0.9.4/go.mod h1:7pLA8lDk46WKDWlVsENo92gC0XFa8rbKfyFRBqxEbCc=
+github.com/Nikhil690/connsert v1.3.7 h1:ykj9qzwJ17s9UguimfZ76+V3GcigFO99M+h95OJT2jI=
+github.com/Nikhil690/connsert v1.3.7/go.mod h1:7whEDot7nGA+cDMGXq+MV67wDJHkSN/g6lyL+eUaM2M=
+github.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=
 github.com/aead/cmac v0.0.0-20160719120800-7af84192f0b1 h1:+JkXLHME8vLJafGhOH4aoV2Iu8bR55nU6iKMVfYVLjY=
 github.com/aead/cmac v0.0.0-20160719120800-7af84192f0b1/go.mod h1:nuudZmJhzWtx2212z+pkuy7B6nkBqa+xwNXZHL1j8cg=
+github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
+github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
+github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
+github.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
+github.com/alecthomas/units v0.0.0-20190924025748-f65c72e2690d/go.mod h1:rBZYJk541a8SKzHPHnH3zbiI+7dagKZ0cgpgrD7Fyho=
 github.com/antihax/optional v1.0.0 h1:xK2lYat7ZLaVVcIuj82J8kIro4V6kDe0AUDFboUCwcg=
 github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
+github.com/antonfisher/nested-logrus-formatter v1.3.0/go.mod h1:6WTfyWFkBc9+zyBaKIqRrg/KwMqBbodBjgbHjDz7zjA=
 github.com/antonfisher/nested-logrus-formatter v1.3.1 h1:NFJIr+pzwv5QLHTPyKz9UMEoHck02Q9L0FP13b/xSbQ=
 github.com/antonfisher/nested-logrus-formatter v1.3.1/go.mod h1:6WTfyWFkBc9+zyBaKIqRrg/KwMqBbodBjgbHjDz7zjA=
+github.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e/go.mod h1:3U/XgcO3hCbHZ8TKRvWD2dDTCfh9M9ya+I9JpbB7O8o=
+github.com/armon/go-metrics v0.0.0-20180917152333-f0300d1749da/go.mod h1:Q73ZrmVTwzkszR9V5SSuryQ31EELlFMUz1kKyl939pY=
+github.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=
+github.com/asaskevich/govalidator v0.0.0-20200907205600-7a23bdc65eef/go.mod h1:WaHUgvxTVq04UNunO+XhnAqY/wQc+bxr74GqbsZ/Jqw=
 github.com/asaskevich/govalidator v0.0.0-20210307081110-f21760c49a8d h1:Byv0BzEl3/e6D5CLfI0j/7hiIEtvGVFPCZ7Ei2oq8iQ=
 github.com/asaskevich/govalidator v0.0.0-20210307081110-f21760c49a8d/go.mod h1:WaHUgvxTVq04UNunO+XhnAqY/wQc+bxr74GqbsZ/Jqw=
 github.com/avast/retry-go/v4 v4.1.0 h1:CwudD9anYv6JMVnDuTRlK6kLo4dBamiL+F3U8YDiyfg=
 github.com/avast/retry-go/v4 v4.1.0/go.mod h1:HqmLvS2VLdStPCGDFjSuZ9pzlTqVRldCI4w2dO4m1Ms=
 github.com/benbjohnson/clock v1.3.0 h1:ip6w0uFQkncKQ979AypyG0ER7mqUSBdKLOgAle/AT8A=
-github.com/benbjohnson/clock v1.3.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=
+github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
+github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=
 github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
 github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
+github.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
+github.com/bketelsen/crypt v0.0.3-0.20200106085610-5cbc8cc4026c/go.mod h1:MKsuJmJgSg28kpZDP6UIiPt0e0Oz0kqKNGyRaWEPv84=
 github.com/bytedance/sonic v1.5.0/go.mod h1:ED5hyg4y6t3/9Ku1R6dU/4KyJ48DZ4jPhfY1O2AihPM=
-github.com/bytedance/sonic v1.10.0-rc/go.mod h1:ElCzW+ufi8qKqNW0FY314xriJhyJhuoJ3gFZdAHF7NM=
-github.com/bytedance/sonic v1.11.3 h1:jRN+yEjakWh8aK5FzrciUHG8OFXK+4/KrAX/ysEtHAA=
-github.com/bytedance/sonic v1.11.3/go.mod h1:iZcSUejdk5aukTND/Eu/ivjQuEL0Cu9/rf50Hi0u/g4=
+github.com/bytedance/sonic v1.9.1 h1:6iJ6NqdoxCDr6mbY8h18oSO+cShGSMRGCEo7F2h0x8s=
+github.com/bytedance/sonic v1.9.1/go.mod h1:i736AoUSYt75HyZLoJW9ERYxcy6eaN6h4BZXU064P/U=
 github.com/cenkalti/backoff/v4 v4.1.3 h1:cFAlzYUlVYDysBEH2T5hyJZMh3+5+WCBvSnK6Q8UtC4=
-github.com/cenkalti/backoff/v4 v4.1.3/go.mod h1:scbssz8iZGpm3xbr14ovlUdkxfGXNInqkPWOWmG2CLw=
+github.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=
+github.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=
+github.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
+github.com/cespare/xxhash/v2 v2.1.2/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=
 github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/chenzhuoyu/base64x v0.0.0-20211019084208-fb5309c8db06/go.mod h1:DH46F32mSOjUmXrMHnKwZdA8wcEefY7UVqBKYGjpdQY=
+github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 h1:qSGYFH7+jGhDF8vLC+iwCD4WpbV1EBDSzWkJODFLams=
 github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311/go.mod h1:b583jCggY9gE99b6G5LEC39OIiVsWj+R97kbl5odCEk=
-github.com/chenzhuoyu/base64x v0.0.0-20230717121745-296ad89f973d h1:77cEq6EriyTZ0g/qfRdp61a3Uu/AWrgIq2s0ClJV1g0=
-github.com/chenzhuoyu/base64x v0.0.0-20230717121745-296ad89f973d/go.mod h1:8EPpVsBuRksnlj1mLy4AWzRNQYxauNi62uWcE3to6eA=
-github.com/chenzhuoyu/iasm v0.9.0/go.mod h1:Xjy2NpN3h7aUqeqM+woSuuvxmIe6+DDsiNLIrkAmYog=
-github.com/chenzhuoyu/iasm v0.9.1 h1:tUHQJXo3NhBqw6s33wkGn9SP3bvrWLdlVIJ3hQBL7P0=
-github.com/chenzhuoyu/iasm v0.9.1/go.mod h1:Xjy2NpN3h7aUqeqM+woSuuvxmIe6+DDsiNLIrkAmYog=
+github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=
+github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=
+github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=
+github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
+github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
+github.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=
+github.com/cncf/udpa/go v0.0.0-20210930031921-04548b0d99d4/go.mod h1:6pvJx4me5XPnfI9Z40ddWsdw2W/uZgQLFXToKeRcDiI=
+github.com/cncf/xds/go v0.0.0-20210312221358-fbca930ec8ed/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=
+github.com/cncf/xds/go v0.0.0-20210922020428-25de7278fc84/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=
+github.com/cncf/xds/go v0.0.0-20211001041855-01bcc9b48dfe/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=
+github.com/cncf/xds/go v0.0.0-20211011173535-cb28da3451f1/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=
 github.com/containerd/cgroups v1.0.4 h1:jN/mbWBEaz+T1pi5OFtnkQ+8qnmEbAr1Oo1FRm5B0dA=
-github.com/containerd/cgroups v1.0.4/go.mod h1:nLNQtsF7Sl2HxNebu77i1R0oDlhiTG+kO4JTrUzo6IA=
 github.com/containerd/containerd v1.6.6 h1:xJNPhbrmz8xAMDNoVjHy9YHtWwEQNS+CDkcIRh7t8Y0=
-github.com/containerd/containerd v1.6.6/go.mod h1:ZoP1geJldzCVY3Tonoz7b1IXk8rIX0Nltt5QE4OMNk0=
+github.com/coreos/bbolt v1.3.2/go.mod h1:iRUV2dpdMOn7Bo10OQBFzIJO9kkE559Wcmn+qkEiiKk=
+github.com/coreos/etcd v3.3.13+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=
 github.com/coreos/go-semver v0.3.0 h1:wkHLiw0WNATZnSG7epLsujiMCgPAc9xhjJ4tgnAxmfM=
 github.com/coreos/go-semver v0.3.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=
+github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=
 github.com/coreos/go-systemd/v22 v22.3.2 h1:D9/bQk5vlXQFZ6Kwuu6zaiXJ9oTPe68++AzAJc1DzSI=
 github.com/coreos/go-systemd/v22 v22.3.2/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
+github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=
+github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=
 github.com/cpuguy83/go-md2man/v2 v2.0.2 h1:p1EgwI/C7NhT0JmVkwCD2ZBK8j4aeHQX2pMHHBfMQ6w=
 github.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=
-github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=
 github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78=
 github.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f/go.mod h1:cuUVRXasLTGF7a8hSLbxyZXjz+1KgoB3wDUb6vlszIc=
+github.com/dgryski/go-sip13 v0.0.0-20181026042036-e10d5fee7954/go.mod h1:vAd38F8PWV+bWy6jNmig1y/TA+kYO4g3RSRF0IAv0no=
 github.com/docker/distribution v2.8.1+incompatible h1:Q50tZOPR6T/hjNsyc9g8/syEs6bk8XXApsHjKukMl68=
-github.com/docker/distribution v2.8.1+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=
 github.com/docker/docker v20.10.17+incompatible h1:JYCuMrWaVNophQTOrMMoSwudOVEfcegoZZrleKc1xwE=
-github.com/docker/docker v20.10.17+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=
 github.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=
-github.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=
 github.com/docker/go-units v0.4.0 h1:3uh0PgVws3nIA0Q+MwDC8yjEPf9zjRfZZWXZYDct3Tw=
-github.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
+github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
 github.com/dvyukov/go-fuzz v0.0.0-20210103155950-6a8e9d1f2415/go.mod h1:11Gm+ccJnvAhCNLlf5+cS9KjtbaD5I5zaZpFMsTHWTw=
-github.com/evanphx/json-patch v5.9.0+incompatible h1:fBXyNpNMuTTDdquAq/uisOr2lShz4oaXpDTX2bLe7ls=
-github.com/evanphx/json-patch v5.9.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=
-github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=
-github.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=
-github.com/fsnotify/fsnotify v1.7.0 h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=
-github.com/fsnotify/fsnotify v1.7.0/go.mod h1:40Bi/Hjc2AVfZrqy+aj+yEI+/bRxZnMJyTJwOpGvigM=
-github.com/gabriel-vasile/mimetype v1.4.3 h1:in2uUcidCuFcDKtdcBxlR0rJ1+fsokWf+uqxgUFjbI0=
-github.com/gabriel-vasile/mimetype v1.4.3/go.mod h1:d8uq/6HKRL6CGdk+aubisF/M5GcPfT7nKyLpA0lbSSk=
-github.com/gin-contrib/cors v1.7.1 h1:s9SIppU/rk8enVvkzwiC2VK3UZ/0NNGsWfUKvV55rqs=
-github.com/gin-contrib/cors v1.7.1/go.mod h1:n/Zj7B4xyrgk/cX1WCX2dkzFfaNm/xJb6oIUk7WTtps=
+github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
+github.com/envoyproxy/go-control-plane v0.9.9-0.20201210154907-fd9021fe5dad/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=
+github.com/envoyproxy/go-control-plane v0.9.9-0.20210217033140-668b12f5399d/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=
+github.com/envoyproxy/go-control-plane v0.9.9-0.20210512163311-63b5d3c536b0/go.mod h1:hliV/p42l8fGbc6Y9bQ70uLwIvmJyVE5k4iMKlh8wCQ=
+github.com/envoyproxy/go-control-plane v0.10.2-0.20220325020618-49ff273808a1/go.mod h1:KJwIaB5Mv44NWtYuAOFCVOjcI94vtpEz2JU/D2v6IjE=
+github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
+github.com/evanphx/json-patch v4.9.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=
+github.com/evanphx/json-patch v4.11.0+incompatible h1:glyUF9yIYtMHzn8xaKw5rMhdWcwsYV8dZHIq5567/xs=
+github.com/evanphx/json-patch v4.11.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=
+github.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=
+github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
+github.com/fsnotify/fsnotify v1.4.9 h1:hsms1Qyu0jgnwNXIxa+/V/PDsU6CfLf6CNO8H7IWoS4=
+github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
+github.com/gabriel-vasile/mimetype v1.4.2 h1:w5qFW6JKBz9Y393Y4q372O9A7cUSequkh1Q7OhCmWKU=
+github.com/gabriel-vasile/mimetype v1.4.2/go.mod h1:zApsH/mKG4w07erKIaJPFiX0Tsq9BFQgN3qGY5GnNgA=
+github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
+github.com/gin-contrib/cors v1.3.1 h1:doAsuITavI4IOcd0Y19U4B+O0dNWihRyX//nn4sEmgA=
+github.com/gin-contrib/cors v1.3.1/go.mod h1:jjEJ4268OPZUcU7k9Pm653S7lXUGcqMADzFA61xsmDk=
 github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
 github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
+github.com/gin-gonic/gin v1.5.0/go.mod h1:Nd6IXA8m5kNZdNEHMBd93KT+mdY3+bewLgRvmCsR2Do=
+github.com/gin-gonic/gin v1.7.0/go.mod h1:jD2toBW3GZUr5UMcdrwQA10I7RuaFOl/SGeDjXkfUtY=
 github.com/gin-gonic/gin v1.9.1 h1:4idEAncQnU5cB7BeOkPtxjfCSye0AAm1R0RVIqJ+Jmg=
 github.com/gin-gonic/gin v1.9.1/go.mod h1:hPrL7YrpYKXt5YId3A/Tnip5kqbEAP+KLuI3SUcPTeU=
+github.com/go-gl/glfw v0.0.0-20190409004039-e6da0acd62b1/go.mod h1:vR7hzQXu2zJy9AVAgeJqvqgH9Q5CA+iKCZ2gyEVpxRU=
+github.com/go-gl/glfw/v3.3/glfw v0.0.0-20191125211704-12ad95a8df72/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=
+github.com/go-gl/glfw/v3.3/glfw v0.0.0-20200222043503-6f7a984d4dc4/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=
+github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
+github.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
+github.com/go-kit/log v0.1.0/go.mod h1:zbhenjAZHb184qTLMA9ZjW7ThYL0H2mk7Q6pNt4vbaY=
+github.com/go-kit/log v0.2.0/go.mod h1:NwTd00d/i8cPZ3xOwwiv2PO5MOcx78fFErGNcVmBjv0=
+github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=
+github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=
+github.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=
+github.com/go-logfmt/logfmt v0.5.1/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=
+github.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
 github.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=
-github.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
+github.com/go-playground/locales v0.12.1/go.mod h1:IUMDtCfWo/w/mtMfIE/IG2K+Ey3ygWanZIBtBW0W2TM=
+github.com/go-playground/locales v0.13.0/go.mod h1:taPMhCMXrRLJO55olJkUXHZBHCxTMfnGwq/HNwmWNS8=
 github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
 github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
+github.com/go-playground/universal-translator v0.16.0/go.mod h1:1AnU7NaIRDWWzGEKwgtJRd2xk99HeFyHw3yid4rvQIY=
+github.com/go-playground/universal-translator v0.17.0/go.mod h1:UkSxE5sNxxRwHyU+Scu5vgOQjsIJAF8j9muTVoKLVtA=
 github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
 github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
-github.com/go-playground/validator/v10 v10.19.0 h1:ol+5Fu+cSq9JD7SoSqe04GMI92cbn0+wvQ3bZ8b/AU4=
-github.com/go-playground/validator/v10 v10.19.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
+github.com/go-playground/validator/v10 v10.4.1/go.mod h1:nlOn6nFhuKACm19sB/8EGNn9GlaMV7XkbRSipzJ0Ii4=
+github.com/go-playground/validator/v10 v10.14.0 h1:vgvQWe3XCz3gIeFDm/HnTIbj6UGmg/+t63MyGU2n5js=
+github.com/go-playground/validator/v10 v10.14.0/go.mod h1:9iXMNT7sEkjXb0I+enO7QXmzG6QCsPWY4zveKFVRSyU=
 github.com/go-redis/redis/v8 v8.11.5 h1:AcZZR7igkdvfVmQTPnu9WE37LRrO/YrBH5zWyjDC0oI=
 github.com/go-redis/redis/v8 v8.11.5/go.mod h1:gREzHqY1hg6oD9ngVRbLStwAWKhA0FEgq8Jd4h5lpwo=
 github.com/go-sql-driver/mysql v1.6.0 h1:BCTh4TKNUYmOmMUcQ3IipzF5prigylS7XXjEkfCHuOE=
 github.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=
+github.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=
+github.com/gobuffalo/attrs v0.0.0-20190224210810-a9411de4debd/go.mod h1:4duuawTqi2wkkpB4ePgWMaai6/Kc6WEz83bhFwpHzj0=
+github.com/gobuffalo/depgen v0.0.0-20190329151759-d478694a28d3/go.mod h1:3STtPUQYuzV0gBVOY3vy6CfMm/ljR4pABfrTeHNLHUY=
+github.com/gobuffalo/depgen v0.1.0/go.mod h1:+ifsuy7fhi15RWncXQQKjWS9JPkdah5sZvtHc2RXGlg=
+github.com/gobuffalo/envy v1.6.15/go.mod h1:n7DRkBerg/aorDM8kbduw5dN3oXGswK5liaSCx4T5NI=
+github.com/gobuffalo/envy v1.7.0/go.mod h1:n7DRkBerg/aorDM8kbduw5dN3oXGswK5liaSCx4T5NI=
+github.com/gobuffalo/flect v0.1.0/go.mod h1:d2ehjJqGOH/Kjqcoz+F7jHTBbmDb38yXA598Hb50EGs=
+github.com/gobuffalo/flect v0.1.1/go.mod h1:8JCgGVbRjJhVgD6399mQr4fx5rRfGKVzFjbj6RE/9UI=
+github.com/gobuffalo/flect v0.1.3/go.mod h1:8JCgGVbRjJhVgD6399mQr4fx5rRfGKVzFjbj6RE/9UI=
+github.com/gobuffalo/genny v0.0.0-20190329151137-27723ad26ef9/go.mod h1:rWs4Z12d1Zbf19rlsn0nurr75KqhYp52EAGGxTbBhNk=
+github.com/gobuffalo/genny v0.0.0-20190403191548-3ca520ef0d9e/go.mod h1:80lIj3kVJWwOrXWWMRzzdhW3DsrdjILVil/SFKBzF28=
+github.com/gobuffalo/genny v0.1.0/go.mod h1:XidbUqzak3lHdS//TPu2OgiFB+51Ur5f7CSnXZ/JDvo=
+github.com/gobuffalo/genny v0.1.1/go.mod h1:5TExbEyY48pfunL4QSXxlDOmdsD44RRq4mVZ0Ex28Xk=
+github.com/gobuffalo/gitgen v0.0.0-20190315122116-cc086187d211/go.mod h1:vEHJk/E9DmhejeLeNt7UVvlSGv3ziL+djtTr3yyzcOw=
+github.com/gobuffalo/gogen v0.0.0-20190315121717-8f38393713f5/go.mod h1:V9QVDIxsgKNZs6L2IYiGR8datgMhB577vzTDqypH360=
+github.com/gobuffalo/gogen v0.1.0/go.mod h1:8NTelM5qd8RZ15VjQTFkAW6qOMx5wBbW4dSCS3BY8gg=
+github.com/gobuffalo/gogen v0.1.1/go.mod h1:y8iBtmHmGc4qa3urIyo1shvOD8JftTtfcKi+71xfDNE=
+github.com/gobuffalo/logger v0.0.0-20190315122211-86e12af44bc2/go.mod h1:QdxcLw541hSGtBnhUc4gaNIXRjiDppFGaDqzbrBd3v8=
+github.com/gobuffalo/mapi v1.0.1/go.mod h1:4VAGh89y6rVOvm5A8fKFxYG+wIW6LO1FMTG9hnKStFc=
+github.com/gobuffalo/mapi v1.0.2/go.mod h1:4VAGh89y6rVOvm5A8fKFxYG+wIW6LO1FMTG9hnKStFc=
+github.com/gobuffalo/packd v0.0.0-20190315124812-a385830c7fc0/go.mod h1:M2Juc+hhDXf/PnmBANFCqx4DM3wRbgDvnVWeG2RIxq4=
+github.com/gobuffalo/packd v0.1.0/go.mod h1:M2Juc+hhDXf/PnmBANFCqx4DM3wRbgDvnVWeG2RIxq4=
+github.com/gobuffalo/packr/v2 v2.0.9/go.mod h1:emmyGweYTm6Kdper+iywB6YK5YzuKchGtJQZ0Odn4pQ=
+github.com/gobuffalo/packr/v2 v2.2.0/go.mod h1:CaAwI0GPIAv+5wKLtv8Afwl+Cm78K/I/VCm/3ptBN+0=
+github.com/gobuffalo/syncx v0.0.0-20190224160051-33c29581e754/go.mod h1:HhnNqWY95UYwwW3uSASeV7vtgYkT2t16hJgV3AEPUpw=
 github.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=
 github.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=
 github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
+github.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
+github.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
-github.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=
-github.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
+github.com/golang-jwt/jwt v3.2.1+incompatible h1:73Z+4BJcrTC+KczS6WvTPvRGOp1WmfEP4Q1lOd9Z/+c=
+github.com/golang-jwt/jwt v3.2.1+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=
+github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
+github.com/golang/groupcache v0.0.0-20190129154638-5b532d6fd5ef/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/groupcache v0.0.0-20190702054246-869f871628b6/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/groupcache v0.0.0-20191227052852-215e87163ea7/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
-github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
+github.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
+github.com/golang/mock v1.3.1/go.mod h1:sBzyDLLjw3U8JLTeZvSv8jJB+tU5PVekmnlKIyFUx0Y=
+github.com/golang/mock v1.4.0/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=
+github.com/golang/mock v1.4.1/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=
+github.com/golang/mock v1.4.3/go.mod h1:UOMv5ysSaYNkG+OFQykRIcU/QvvxJf3p21QfJ2Bt3cw=
+github.com/golang/mock v1.4.4/go.mod h1:l3mdAwkq5BuhzHwde/uurv3sEJeZMXNpwsxVWU71h+4=
+github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+github.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+github.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=
+github.com/golang/protobuf v1.3.4/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=
+github.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=
+github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
+github.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=
+github.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=
+github.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=
+github.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=
+github.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=
+github.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
+github.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
 github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
 github.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
-github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=
-github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
+github.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=
+github.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
 github.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
 github.com/golang/snappy v0.0.4 h1:yAGX7huGHXlcLOEtBnF4w7FQwA26wojNCwOYAEhLjQM=
 github.com/golang/snappy v0.0.4/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
+github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
+github.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
+github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
+github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
+github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
+github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.4.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
-github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
+github.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=
+github.com/google/martian/v3 v3.0.0/go.mod h1:y5Zk1BBys9G+gd6Jrk0W3cC1+ELVxBWuIGO+w/tUAp0=
+github.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=
+github.com/google/pprof v0.0.0-20190515194954-54271f7e092f/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=
+github.com/google/pprof v0.0.0-20191218002539-d4f498aebedc/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
+github.com/google/pprof v0.0.0-20200212024743-f11f1df84d12/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
+github.com/google/pprof v0.0.0-20200229191704-1ebb73c60ed3/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
+github.com/google/pprof v0.0.0-20200430221834-fc25d7d30c6d/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
+github.com/google/pprof v0.0.0-20200708004538-1a94d8640e99/go.mod h1:ZgVRPoUq/hfqzAqh7sHMqb3I9Rq5C59dIz2SbBwJ4eM=
+github.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=
+github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
 github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
-github.com/gopherjs/gopherjs v1.17.2 h1:fQnZVsXk8uxXIStYb0N4bGk7jeyTalG/wsZjQ25dO0g=
-github.com/gopherjs/gopherjs v1.17.2/go.mod h1:pRRIvn/QzFLrKfvEz3qUuEhtE/zLCWfreZ6J5gM2i+k=
+github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=
+github.com/googleapis/gax-go/v2 v2.0.5/go.mod h1:DWXyrwAJ9X0FpwwEdw+IPEYBICEFu5mhpdKc/us6bOk=
+github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1 h1:EGx4pi6eqNxGaHF6qqu48+N2wcFQ5qg5FXgOdqsJ5d8=
+github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=
+github.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
+github.com/grpc-ecosystem/go-grpc-middleware v1.0.0/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=
+github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=
+github.com/grpc-ecosystem/grpc-gateway v1.9.0/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=
+github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=
 github.com/h2non/parth v0.0.0-20190131123155-b4df798d6542 h1:2VTzZjLZBgl62/EtslCrtky5vbi9dd7HrQPQIx6wqiw=
 github.com/h2non/parth v0.0.0-20190131123155-b4df798d6542/go.mod h1:Ow0tF8D4Kplbc8s8sSb3V2oUCygFHVp8gC3Dn6U4MNI=
+github.com/hashicorp/consul/api v1.1.0/go.mod h1:VmuI/Lkw1nC05EYQWNKwWGbkg+FbDBtguAZLlVdkD9Q=
+github.com/hashicorp/consul/sdk v0.1.1/go.mod h1:VKf9jXwCTEY1QZP2MOLRhb5i/I/ssyNV1vwHyQBF0x8=
+github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=
+github.com/hashicorp/go-cleanhttp v0.5.1/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=
+github.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=
+github.com/hashicorp/go-msgpack v0.5.3/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=
+github.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=
+github.com/hashicorp/go-rootcerts v1.0.0/go.mod h1:K6zTfqpRlCUIjkwsN4Z+hiSfzSTQa6eBIzfwKfwNnHU=
+github.com/hashicorp/go-sockaddr v1.0.0/go.mod h1:7Xibr9yA9JjQq1JpNB2Vw7kxv8xerXegt+ozgdvDeDU=
+github.com/hashicorp/go-syslog v1.0.0/go.mod h1:qPfqrKkXGihmCqbJM2mZgkZGvKG1dFdvsLplgctolz4=
+github.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
+github.com/hashicorp/go-uuid v1.0.1/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
+github.com/hashicorp/go.net v0.0.1/go.mod h1:hjKkEWcCURg++eb33jQU7oqQcI9XDCnUzHA0oac0k90=
+github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
+github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
 github.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=
 github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=
+github.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=
+github.com/hashicorp/mdns v1.0.0/go.mod h1:tL+uN++7HEJ6SQLQ2/p+z2pH24WQKWjBPkE0mNTz8vQ=
+github.com/hashicorp/memberlist v0.1.3/go.mod h1:ajVTdAv/9Im8oMAAj5G31PhhMCZJV2pPBoIllUwCN7I=
+github.com/hashicorp/serf v0.8.2/go.mod h1:6hOLApaqBFA1NXqRQAsxw9QxuDEvNxSQRwA/JwenrHc=
+github.com/ianlancetaylor/demangle v0.0.0-20181102032728-5e5cf60278f6/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=
+github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=
 github.com/jmoiron/sqlx v1.3.5 h1:vFFPA71p1o5gAeqtEAwLU4dnX2napprKtHr7PYIcN3g=
 github.com/jmoiron/sqlx v1.3.5/go.mod h1:nRVWtLre0KfCLJvgxzCsLVMogSvQ1zNJtpYr2Ccp0mQ=
+github.com/joho/godotenv v1.3.0/go.mod h1:7hK45KPybAkOC6peb+G5yklZfMxEjkZhHbwpqxOKXbg=
+github.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=
+github.com/jpillora/backoff v1.0.0/go.mod h1:J/6gKK9jxlEcS3zixgDgUAsiuZ7yrSoa/FX5e0EB2j4=
+github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
+github.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
+github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
+github.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
+github.com/json-iterator/go v1.1.11/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
 github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
+github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=
+github.com/jstemmer/go-junit-report v0.9.1/go.mod h1:Brl9GWCQeLvo8nXZwPNNblvFj/XSXhF0NWZEnDohbsk=
 github.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=
 github.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=
+github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=
+github.com/julienschmidt/httprouter v1.3.0/go.mod h1:JR6WtHb+2LUe8TCKY3cZOxFyyO8IZAc4RVcycCCAKdM=
+github.com/karrick/godirwalk v1.8.0/go.mod h1:H5KPZjojv4lE+QYImBI8xVtrBRgYrIVsaRPx4tDPEn4=
+github.com/karrick/godirwalk v1.10.3/go.mod h1:RoGL9dQei4vP9ilrpETWE8CLOZ1kiN0LhBygSwrAsHA=
+github.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=
 github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
 github.com/klauspost/compress v1.13.6/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=
+github.com/klauspost/compress v1.15.9 h1:wKRjX6JRtDdrE9qwa4b/Cip7ACOshUI4smpCQanqjSY=
 github.com/klauspost/compress v1.15.9/go.mod h1:PhcZ0MbTNciWF3rruxRgKxI5NkcHHrHUDtV4Yw2GlzU=
-github.com/klauspost/compress v1.17.0 h1:Rnbp4K9EjcDuVuHtd0dgA4qNuv9yKDYKK1ulpJwgrqM=
-github.com/klauspost/compress v1.17.0/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=
 github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
-github.com/klauspost/cpuid/v2 v2.2.7 h1:ZWSB3igEs+d0qvnxR/ZBzXVmxkgt8DdzP6m9pfuVLDM=
-github.com/klauspost/cpuid/v2 v2.2.7/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=
-github.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=
+github.com/klauspost/cpuid/v2 v2.2.4 h1:acbojRNwl3o09bUq+yDCtZFc1aiwaAAxtcn8YkZXnvk=
+github.com/klauspost/cpuid/v2 v2.2.4/go.mod h1:RVVoqg1df56z8g3pUjL/3lE5UfnlrJX8tyFgg4nqhuY=
+github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
+github.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
+github.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
+github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=
+github.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
-github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
-github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
+github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
-github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
-github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
-github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
-github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
+github.com/leodido/go-urn v1.1.0/go.mod h1:+cyI34gQWZcE1eQU7NVgKkkzdXDQHr1dBMtdAPozLkw=
+github.com/leodido/go-urn v1.2.0/go.mod h1:+8+nEpDfqqsY+g338gtMEUOtuK+4dEMhiQEgxpxOKII=
+github.com/leodido/go-urn v1.2.4 h1:XlAE/cm/ms7TE/VMVoduSpNBoyc2dOxHs5MZSwAN63Q=
+github.com/leodido/go-urn v1.2.4/go.mod h1:7ZrI8mTSeBSHl/UaRyKQW1qZeMgak41ANeCNaVckg+4=
 github.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
 github.com/lib/pq v1.10.6 h1:jbk+ZieJ0D7EVGJYpL9QTz7/YW6UHbmdnZWYyK5cdBs=
 github.com/lib/pq v1.10.6/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
-github.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=
-github.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=
-github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
-github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
+github.com/magiconair/properties v1.8.1/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
+github.com/magiconair/properties v1.8.6 h1:5ibWZ6iY0NctNGWo87LalDlEZ6R41TqbbDamhfG/Qzo=
+github.com/magiconair/properties v1.8.6/go.mod h1:y3VJvCyxH9uVvJTWEGAELF3aiYNyPKd5NZ3oSwXrF60=
+github.com/markbates/oncer v0.0.0-20181203154359-bf2de49a0be2/go.mod h1:Ld9puTsIW75CHf65OeIOkyKbteujpZVXDpWK6YGZbxE=
+github.com/markbates/safe v1.0.1/go.mod h1:nAqgmRi7cY2nqMc92/bSEeQA+R4OheNU2T1kNSCBdG0=
+github.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=
+github.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=
+github.com/mattn/go-isatty v0.0.9/go.mod h1:YNRxwqDuOph6SZLI9vUUz6OYw3QyUt7WiY2yME+cCiQ=
+github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
+github.com/mattn/go-isatty v0.0.19 h1:JITubQf0MOLdlGRuRq+jtsDlekdYPia9ZFsB8h/APPA=
+github.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
 github.com/mattn/go-sqlite3 v1.14.6 h1:dNPt6NO46WmLVt2DLNpwczCmdV5boIZ6g/tlDrlRUbg=
 github.com/mattn/go-sqlite3 v1.14.6/go.mod h1:NyWgC/yNuGj7Q9rpYnZvas74GogHl5/Z4A/KQRfk6bU=
-github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
-github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
+github.com/matttproud/golang_protobuf_extensions v1.0.1 h1:4hp9jkHxhMHkqkrB3Ix0jegS5sx/RkqARlsWZ6pIwiU=
+github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
+github.com/miekg/dns v1.0.14/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=
+github.com/mitchellh/cli v1.0.0/go.mod h1:hNIlj7HEI86fIcpObd7a0FcrxTWetlwJDGcceTlRvqc=
+github.com/mitchellh/go-homedir v1.0.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
+github.com/mitchellh/go-testing-interface v1.0.0/go.mod h1:kRemZodwjscx+RGhAo8eIhFbs2+BFgRtFPeD/KE+zxI=
+github.com/mitchellh/gox v0.4.0/go.mod h1:Sd9lOJ0+aimLBi73mGofS1ycjY8lL3uZM3JPS42BGNg=
+github.com/mitchellh/iochan v1.0.0/go.mod h1:JwYml1nuB7xOzsp52dPpHFffvOCDupsG0QubkSMEySY=
+github.com/mitchellh/mapstructure v0.0.0-20160808181253-ca63d7c062ee/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
+github.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
+github.com/mitchellh/mapstructure v1.4.1 h1:CpVNEelQCZBooIPDn+AR3NpivK/TIKU8bDxdASFVQag=
+github.com/mitchellh/mapstructure v1.4.1/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
 github.com/moby/sys/mount v0.3.3 h1:fX1SVkXFJ47XWDoeFW4Sq7PdQJnV2QIDZAqjNqgEjUs=
-github.com/moby/sys/mount v0.3.3/go.mod h1:PBaEorSNTLG5t/+4EgukEQVlAvVEc6ZjTySwKdqp5K0=
 github.com/moby/sys/mountinfo v0.6.2 h1:BzJjoreD5BMFNmD9Rus6gdd1pLuecOFPt8wC+Vygl78=
-github.com/moby/sys/mountinfo v0.6.2/go.mod h1:IJb6JQeOklcdMU9F5xQ8ZALD+CUr5VlGpwtX+VE0rpI=
 github.com/moby/term v0.0.0-20210619224110-3f7ff695adc6 h1:dcztxKSvZ4Id8iPpHERQBbIJfabdt4wUm5qy3wOL2Zc=
-github.com/moby/term v0.0.0-20210619224110-3f7ff695adc6/go.mod h1:E2VnQOmVuvZB6UYnnDB0qG5Nq/1tD9acaOpo6xmt0Kw=
 github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
+github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
+github.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
 github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
 github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
 github.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 h1:RWengNIwukTxcDr9M+97sNutRR1RKhG96O6jWumTTnw=
@@ -169,274 +390,633 @@ github.com/montanaflynn/stats v0.0.0-20171201202039-1bf9dbcd8cbe/go.mod h1:wL8QJ
 github.com/montanaflynn/stats v0.6.6 h1:Duep6KMIDpY4Yo11iFsvyqJDyfzLF9+sndUKT+v64GQ=
 github.com/montanaflynn/stats v0.6.6/go.mod h1:etXPPgVO6n31NxCd9KQUMvCM+ve0ruNzt6R8Bnaayow=
 github.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=
-github.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=
+github.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=
+github.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=
 github.com/nbio/st v0.0.0-20140626010706-e9e8d9816f32 h1:W6apQkHrMkS0Muv8G/TipAy/FJl/rCYT0+EuS8+Z0z4=
 github.com/nbio/st v0.0.0-20140626010706-e9e8d9816f32/go.mod h1:9wM+0iRr9ahx58uYLpLIr5fm8diHn0JbqRycJi6w0Ms=
 github.com/nxadm/tail v1.4.8 h1:nPr65rt6Y5JFSKQO7qToXr7pePgD6Gwiw05lkbyAQTE=
-github.com/nxadm/tail v1.4.8/go.mod h1:+ncqLTQzXmGhMZNUePPaPqPvBxHAIsmXswZKocGu+AU=
-github.com/omec-project/aper v1.1.2 h1:oRtfloQJQV5HXhOkPpOXbRW9Ay8TAe5kTcbMMkInmOQ=
-github.com/omec-project/aper v1.1.2/go.mod h1:jDWasZ2XLFL2uSEWhgGlT/ELyrpwCJd/2kE/VEGG8Ew=
-github.com/omec-project/config5g v1.3.3 h1:VHhC6Plo+znCOZ5x1VFg83wGQLTSGPl9iftmSAShjkc=
-github.com/omec-project/config5g v1.3.3/go.mod h1:RBHRSYOudbWOqxFUWdNXjyxiAvljMyUYteC2jye5CaU=
-github.com/omec-project/http2_util v1.2.0 h1:ggQ1GjY2x6VRpKuRhZj0t9dh6eISY6LRBv4rlMD++8s=
-github.com/omec-project/http2_util v1.2.0/go.mod h1:KLgvU3o7qmG/i5XO/qITscFql2tWCAmjE6glX+dxe7M=
+github.com/oklog/ulid v1.3.1/go.mod h1:CirwcVhetQ6Lv90oh/F+FBtV6XMibvdAFo93nm5qn4U=
+github.com/omec-project/MongoDBLibrary v1.1.2/go.mod h1:bchS8sexPvTzgcA+fGzGeMyQk2Ji2xyAYgXDg6wOg1I=
+github.com/omec-project/MongoDBLibrary v1.1.3 h1:3/2Luxl4YBe9cP2cRNtPruroBGonmiQbnCviYby1fo4=
+github.com/omec-project/MongoDBLibrary v1.1.3/go.mod h1:bchS8sexPvTzgcA+fGzGeMyQk2Ji2xyAYgXDg6wOg1I=
+github.com/omec-project/TimeDecode v1.1.0/go.mod h1:yqMSNEIvj60RA9vGmwqsemuSA4+J23NVg91Xy+1Dfcs=
+github.com/omec-project/UeauCommon v1.1.0 h1:ynW22r/Xx/z6saviuzUeNjYlqdJfiMNtNwlv6Ot76Wk=
+github.com/omec-project/UeauCommon v1.1.0/go.mod h1:brKbJNGvDPgHcubWt6G45hVuxZ2Crdp/1tKXWw6zTCY=
+github.com/omec-project/aper v1.1.0 h1:4FkTkDNGBWnTtEgCDuEitFjww1CJWVQhGqMs91triuU=
+github.com/omec-project/aper v1.1.0/go.mod h1:oOkKRI2BIo8SHpCsEzNbo9qiowEtEy3q+wmO7TuDrx4=
+github.com/omec-project/config5g v1.2.0/go.mod h1:AWFzCbbgCBx/iJwt+zWbpDGLHRpFzg24OYHqIkdcMVA=
+github.com/omec-project/fsm v1.1.0 h1:DYa5GMlzOfHY+qyQqSPNi/SgNGE7gNWo+g72tyhxNeQ=
+github.com/omec-project/fsm v1.1.0/go.mod h1:/j5mdVQW0dt+tkgYWh5TsQCpLhxHlmSPIWDUOvTYFGw=
+github.com/omec-project/http2_util v1.1.0 h1:8H2NME/V8iONth8TlyK/3w4pguAzaeUnEv9pmeAocwQ=
+github.com/omec-project/http2_util v1.1.0/go.mod h1:QwoZRaUyhEp/kTEqXvf0gCYtfQrNHBdkVw939vsMjZY=
+github.com/omec-project/http_wrapper v1.1.0 h1:2hD8RUaR/VVg3tUUfuxsuo1/JNpZLiAE8IvATGqDME4=
+github.com/omec-project/http_wrapper v1.1.0/go.mod h1:mc045fjVVJ0/q0g4QG4nuSC0N1BIqGR/ZoK76XgifVU=
+github.com/omec-project/idgenerator v1.1.0 h1:XDHZYO13VqZCkRhMA4xNl19MqCL3AFaY2MNwoF8uzVs=
+github.com/omec-project/idgenerator v1.1.0/go.mod h1:qFK0oP9WNCBjro7ZXPzmbSzCosWmxp4KRVORPl6ztRo=
+github.com/omec-project/logger_conf v1.0.100-dev/go.mod h1:Upj0MgzSpB/Ifw+3WsBaYbqWuF4SyyUeKqW7/HhL8Aw=
+github.com/omec-project/logger_conf v1.1.0/go.mod h1:2+SOX9OFbPZ+UNv8k+tvPnaWHo4CuX5G/x12dz5sWUE=
 github.com/omec-project/logger_conf v1.1.1 h1:qo0cF5gnPfth8wy+I/QjiOx+F5jB6h4GLSOdyS+ted8=
 github.com/omec-project/logger_conf v1.1.1/go.mod h1:2EwoAXjOcRTweseN+ogWifJvjocEKjz3kxRaIC4I88g=
+github.com/omec-project/logger_util v1.0.100-dev/go.mod h1:UkD09amIhlh8P0k82A6Uz/atiZGeFS3C2wd334CKpuY=
+github.com/omec-project/logger_util v1.1.0/go.mod h1:UkD09amIhlh8P0k82A6Uz/atiZGeFS3C2wd334CKpuY=
 github.com/omec-project/logger_util v1.2.0 h1:Wtx6skInAPqSic0b97QtJcs+xHDh5798MY2WRrnUz3s=
 github.com/omec-project/logger_util v1.2.0/go.mod h1:LRHlDJdCqVjOxYvYslRryj0DFUNtxQkgxEiQ7fSCoPk=
-github.com/omec-project/metricfunc v1.4.0 h1:gOc8K6BIFw/NYBKeagb3MucNSDDqTgEt2mrdvXI/B60=
-github.com/omec-project/metricfunc v1.4.0/go.mod h1:S7+R12DJtKD8s4iTEjgJUb3jXlUklFj+9t8wTIeNx4A=
-github.com/omec-project/nas v1.2.2 h1:5qvKH6Eew0IwivRMC6eWueRPgXwYSLfRUPcH5sbsv44=
-github.com/omec-project/nas v1.2.2/go.mod h1:QdRwa7KjgzWpuDnIdezNZgtCwhHH7RcFDdQTSCB5afM=
-github.com/omec-project/ngap v1.2.0 h1:BeH8xiQQUnBog0eQiipjgcV7Ua02MEnpS4O5hwVMpDo=
-github.com/omec-project/ngap v1.2.0/go.mod h1:fbX1GqunoSS2B7GDTEccIutmgNdUIxSy5BKVnvX7SM0=
-github.com/omec-project/nrf v1.4.0 h1:/JhSPHkUpWbx674Uo9BBL1hIO1Yx1Cl4YMse7CqMgeI=
-github.com/omec-project/nrf v1.4.0/go.mod h1:1vnIqQvUcAx6ugh0ZjdEqYP0MKdb1uHrURwy0z4GuQ8=
-github.com/omec-project/openapi v1.2.0 h1:7Wvi0HLvhvxMyQtqGcqtMCPC/0QCGAFP5htrXCfWxRc=
-github.com/omec-project/openapi v1.2.0/go.mod h1:hjU13MB1m9MHTko87JfsUNCdeD6/m6VkNZDD8Vq5U9M=
+github.com/omec-project/metricfunc v1.1.1 h1:vlbKT5SJViVgH4pHRrDETiZ2UWp0lO+xp0yxMbRjh7k=
+github.com/omec-project/metricfunc v1.1.1/go.mod h1:OmdlWD+gW+/61W/5yT8gqEqfSQ7kNqBp1h8KJ8LEmBE=
+github.com/omec-project/nas v1.1.4 h1:kQvTTkjJ8eSb6/noeU8Bp6AOo4KeSvUII9CneFADnYs=
+github.com/omec-project/nas v1.1.4/go.mod h1:gXqi/IZwEGXno26X8wg8ITsAUiemRQ7PkIJOWP1NzGA=
+github.com/omec-project/ngap v1.1.0 h1:J9bkPEzzyGd1787nGY/aZVp3gckkZBoJB4tkTo59eyw=
+github.com/omec-project/ngap v1.1.0/go.mod h1:A+T3+JKk+6AuhnMr6W319Tc7E176ig6rIRDVSKQ7E5g=
+github.com/omec-project/nrf v1.0.1 h1:+qtpnyntWhpuQqxwofOSukvPkUo+kXm/0PEMo4YrLZk=
+github.com/omec-project/nrf v1.0.1/go.mod h1:bnakoadGIlS8e0b9ifBqQuqPLGbTVMbHGteccF8XM30=
+github.com/omec-project/openapi v1.0.100-dev/go.mod h1:Fv9ajWROYypcNER+ZwWXPhLCdV4pBz75KqFp/R/2gCw=
+github.com/omec-project/openapi v1.1.0 h1:N3v59+FM2V/eCv2Au10kbyeTf1DsScJkEdkDEcCdKE8=
+github.com/omec-project/openapi v1.1.0/go.mod h1:Fv9ajWROYypcNER+ZwWXPhLCdV4pBz75KqFp/R/2gCw=
+github.com/omec-project/path_util v1.0.100-dev/go.mod h1:O1ch35al6+FXKmg6+5vOpKusl4fiB0u36oYjxwI4QK4=
+github.com/omec-project/path_util v1.1.0 h1:vzzLsay8+uexyYEqS06th8lMcwp+N+CXcaHhaypZn1Q=
+github.com/omec-project/path_util v1.1.0/go.mod h1:O1ch35al6+FXKmg6+5vOpKusl4fiB0u36oYjxwI4QK4=
 github.com/omec-project/util v1.0.13 h1:50ghFbWo7aqhqIknC6KDPWmkht0tP1v2wjpIdcWVXKg=
 github.com/omec-project/util v1.0.13/go.mod h1:Cn9P57qYFiEu0ZXti8imODsJIXVGqnqhP40MwbVbo3g=
-github.com/omec-project/util_3gpp v1.2.1 h1:OE8dckynwEqCpqLkRdMVuKPTQ8Afdq/I3nlROa4fQVo=
-github.com/omec-project/util_3gpp v1.2.1/go.mod h1:q2fd2dniyDlCDO/2WwEnU9+fTAO7OYrzRnPqaBxZFyc=
+github.com/omec-project/util_3gpp v1.1.1 h1:lT8J2uvCuKaOrIasZgV7+bXSjBb9/i8FG9ZFQnpx2yE=
+github.com/omec-project/util_3gpp v1.1.1/go.mod h1:r8J8yuEwWeBLlX4ZqsCjbEYxUZDCTWn0H+xZ12kvB/s=
 github.com/onsi/ginkgo v1.16.5 h1:8xi0RTUf59SOSfEtZMvwTvXYMzG4gV23XVHOZiXNtnE=
-github.com/onsi/ginkgo v1.16.5/go.mod h1:+E8gABHa3K6zRBolWtd+ROzc/U5bkGt0FwiG042wbpU=
 github.com/onsi/gomega v1.18.1 h1:M1GfJqGRrBrrGGsbxzV5dqM2U2ApXefZCQpkukxYRLE=
-github.com/onsi/gomega v1.18.1/go.mod h1:0q+aL8jAiMXy9hbwj2mr5GziHiwhAIQpFmmtT5hitRs=
 github.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=
-github.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=
 github.com/opencontainers/image-spec v1.0.3-0.20211202183452-c5a74bcca799 h1:rc3tiVYb5z54aKaDfakKn0dDjIyPpTtszkjuMzyt7ec=
-github.com/opencontainers/image-spec v1.0.3-0.20211202183452-c5a74bcca799/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=
 github.com/opencontainers/runc v1.1.3 h1:vIXrkId+0/J2Ymu2m7VjGvbSlAId9XNRPhn2p4b+d8w=
-github.com/opencontainers/runc v1.1.3/go.mod h1:1J5XiS+vdZ3wCyZybsuxXZWGrgSr8fFJHLXuG2PsnNg=
-github.com/pelletier/go-toml/v2 v2.2.0 h1:QLgLl2yMN7N+ruc31VynXs1vhMZa7CeHHejIeBAsoHo=
-github.com/pelletier/go-toml/v2 v2.2.0/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=
+github.com/pascaldekloe/goe v0.0.0-20180627143212-57f6aae5913c/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
+github.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=
+github.com/pelletier/go-toml v1.7.0 h1:7utD74fnzVc/cpcyy8sjrlFr5vYpypUixARcHIMIGuI=
+github.com/pelletier/go-toml v1.7.0/go.mod h1:vwGMzjaWMwyfHwgIBhI2YUM4fB6nL6lVAvS1LBMMhTE=
+github.com/pelletier/go-toml/v2 v2.0.8 h1:0ctb6s9mE31h0/lhu+J6OPmVeDxJn+kYnJc2jZR9tGQ=
+github.com/pelletier/go-toml/v2 v2.0.8/go.mod h1:vuYfssBdrU2XDZ9bYydBu6t+6a6PYNcZljzZR9VXg+4=
 github.com/pierrec/lz4/v4 v4.1.15 h1:MO0/ucJhngq7299dKLwIMtgTfbkoSPF6AoMYDd8Q4q0=
 github.com/pierrec/lz4/v4 v4.1.15/go.mod h1:gZWDp/Ze/IJXGXf23ltt2EXimqmTUXEy0GFuRQyBid4=
 github.com/pierrre/gotestcover v0.0.0-20160517101806-924dca7d15f0/go.mod h1:4xpMLz7RBWyB+ElzHu8Llua96TRCB3YwX+l5EP1wmHk=
+github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
+github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
 github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
+github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=
-github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/prometheus/client_golang v1.19.0 h1:ygXvpU1AoN1MhdzckN+PyD9QJOSD4x7kmXYlnfbA6JU=
-github.com/prometheus/client_golang v1.19.0/go.mod h1:ZRM9uEAypZakd+q/x7+gmsvXdURP+DABIEIjnmDdp+k=
-github.com/prometheus/client_model v0.5.0 h1:VQw1hfvPvk3Uv6Qf29VrPF32JB6rtbgI6cYPYQjL0Qw=
-github.com/prometheus/client_model v0.5.0/go.mod h1:dTiFglRmd66nLR9Pv9f0mZi7B7fk5Pm3gvsjB5tr+kI=
-github.com/prometheus/common v0.48.0 h1:QO8U2CdOzSn1BBsmXJXduaaW+dY/5QLjfB8svtSzKKE=
-github.com/prometheus/common v0.48.0/go.mod h1:0/KsvlIEfPQCQ5I2iNSAWKPZziNCvRs5EC6ILDTlAPc=
-github.com/prometheus/procfs v0.12.0 h1:jluTpSng7V9hY0O2R9DzzJHYb2xULk9VTR1V1R/k6Bo=
-github.com/prometheus/procfs v0.12.0/go.mod h1:pcuDEFsWDnvcgNzo4EEweacyhjeA9Zk3cnaOZAZEfOo=
+github.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=
+github.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=
+github.com/prometheus/client_golang v0.9.3/go.mod h1:/TN21ttK/J9q6uSwhBd54HahCDft0ttaMvbicHlPoso=
+github.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=
+github.com/prometheus/client_golang v1.7.1/go.mod h1:PY5Wy2awLA44sXw4AOSfFBetzPP4j5+D6mVACh+pe2M=
+github.com/prometheus/client_golang v1.11.0/go.mod h1:Z6t4BnS23TR94PD6BsDNk8yVqroYurpAkEiz0P2BEV0=
+github.com/prometheus/client_golang v1.11.1/go.mod h1:Z6t4BnS23TR94PD6BsDNk8yVqroYurpAkEiz0P2BEV0=
+github.com/prometheus/client_golang v1.12.1/go.mod h1:3Z9XVyYiZYEO+YQWt3RD2R3jrbd179Rt297l4aS6nDY=
+github.com/prometheus/client_golang v1.14.0 h1:nJdhIvne2eSX/XRAFV9PcvFFRbrjbcTUj0VP62TMhnw=
+github.com/prometheus/client_golang v1.14.0/go.mod h1:8vpkKitgIVNcqrRBWh1C4TIUQgYNtG/XQE4E/Zae36Y=
+github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
+github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/prometheus/client_model v0.3.0 h1:UBgGFHqYdG/TPFD1B1ogZywDqEkwp3fBMvqdiQ7Xew4=
+github.com/prometheus/client_model v0.3.0/go.mod h1:LDGWKZIo7rky3hgvBe+caln+Dr3dPggB5dvjtD7w9+w=
+github.com/prometheus/common v0.0.0-20181113130724-41aa239b4cce/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=
+github.com/prometheus/common v0.4.0/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=
+github.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=
+github.com/prometheus/common v0.10.0/go.mod h1:Tlit/dnDKsSWFlCLTWaA1cyBgKHSMdTB80sz/V91rCo=
+github.com/prometheus/common v0.26.0/go.mod h1:M7rCNAaPfAosfx8veZJCuw84e35h3Cfd9VFqTh1DIvc=
+github.com/prometheus/common v0.32.1/go.mod h1:vu+V0TpY+O6vW9J44gczi3Ap/oXXR10b+M/gUGO4Hls=
+github.com/prometheus/common v0.37.0 h1:ccBbHCgIiT9uSoFY0vX8H3zsNR5eLt17/RQLUvn8pXE=
+github.com/prometheus/common v0.37.0/go.mod h1:phzohg0JFMnBEFGxTDbfu3QyL5GI8gTQJFhYO5B3mfA=
+github.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=
+github.com/prometheus/procfs v0.0.0-20190507164030-5867b95ac084/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=
+github.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=
+github.com/prometheus/procfs v0.1.3/go.mod h1:lV6e/gmhEcM9IjHGsFOCxxuZ+z1YqCvr4OA4YeYWdaU=
+github.com/prometheus/procfs v0.6.0/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=
+github.com/prometheus/procfs v0.7.3/go.mod h1:cz+aTbrPOrUb4q7XlbU9ygM+/jj0fzG6c1xBZuNvfVA=
+github.com/prometheus/procfs v0.8.0 h1:ODq8ZFEaYeCaZOJlZZdJA2AbQR98dSHSM1KW/You5mo=
+github.com/prometheus/procfs v0.8.0/go.mod h1:z7EfXMXOkbkqb9IINtpCn86r/to3BnA0uaxHdg830/4=
+github.com/prometheus/tsdb v0.7.1/go.mod h1:qhTCs0VvXwvX/y3TZrWD7rabWM+ijKTux40TwIPHuXU=
 github.com/robertkrimen/godocdown v0.0.0-20130622164427-0bfa04905481/go.mod h1:C9WhFzY47SzYBIvzFqSvHIR6ROgDo4TtdTuRaOMjF/s=
-github.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=
-github.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=
+github.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=
+github.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=
+github.com/rogpeppe/go-internal v1.1.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=
+github.com/rogpeppe/go-internal v1.2.2/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=
+github.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=
+github.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
 github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
 github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
-github.com/sagikazarmark/locafero v0.4.0 h1:HApY1R9zGo4DBgr7dqsTH/JJxLTTsOt7u6keLGt6kNQ=
-github.com/sagikazarmark/locafero v0.4.0/go.mod h1:Pe1W6UlPYUk/+wc/6KFhbORCfqzgYEpgQ3O5fPuL3H4=
-github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
-github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
-github.com/segmentio/kafka-go v0.4.47 h1:IqziR4pA3vrZq7YdRxaT3w1/5fvIH5qpCwstUanQQB0=
-github.com/segmentio/kafka-go v0.4.47/go.mod h1:HjF6XbOKh0Pjlkr5GVZxt6CsjjwnmhVOfURM5KMd8qg=
+github.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=
+github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=
+github.com/segmentio/kafka-go v0.4.38 h1:iQdOBbUSdfuYlFpvjuALgj7N6DrdPA0HfB4AhREOdtg=
+github.com/segmentio/kafka-go v0.4.38/go.mod h1:ikyuGon/60MN/vXFgykf7Zm8P5Be49gJU6vezwjnnhU=
+github.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=
+github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
+github.com/sirupsen/logrus v1.4.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
+github.com/sirupsen/logrus v1.4.1/go.mod h1:ni0Sbl8bgC9z8RoU9G6nDWqqs/fq4eDPysMBDgk/93Q=
+github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=
+github.com/sirupsen/logrus v1.6.0/go.mod h1:7uNnSEd1DgxDLC74fIahvMZmmYsHGZGEOFrfsX/uA88=
+github.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
+github.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
 github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=
 github.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
-github.com/smarty/assertions v1.15.0 h1:cR//PqUBUiQRakZWqBiFFQ9wb8emQGDb0HeGdqGByCY=
-github.com/smarty/assertions v1.15.0/go.mod h1:yABtdzeQs6l1brC900WlRNwj6ZR55d7B+E8C6HtKdec=
-github.com/smartystreets/goconvey v1.8.1 h1:qGjIddxOk4grTu9JPOU31tVfq3cNdBlNa5sSznIX1xY=
-github.com/smartystreets/goconvey v1.8.1/go.mod h1:+/u4qLyY6x1jReYOp7GOM2FSt8aP9CzCZL03bI28W60=
-github.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=
-github.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=
-github.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=
-github.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=
-github.com/spf13/cast v1.6.0 h1:GEiTHELF+vaR5dhz3VqZfFSzZjYbgeKDpBxQVS4GYJ0=
-github.com/spf13/cast v1.6.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=
-github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
-github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
-github.com/spf13/viper v1.18.2 h1:LUXCnvUvSM6FXAsj6nnfc8Q2tp1dIgUfY9Kc8GsSOiQ=
-github.com/spf13/viper v1.18.2/go.mod h1:EKmWIqdnk5lOcmR72yw6hS+8OPYcwD0jteitLMVB+yk=
+github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d h1:zE9ykElWQ6/NYmHa3jpm/yHnI4xSofP+UP6SpjHcSeM=
+github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=
+github.com/smartystreets/goconvey v1.6.4 h1:fv0U8FUIMPNf1L9lnHLvLhgicrIVChEkdzIKYqbNC9s=
+github.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=
+github.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=
+github.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=
+github.com/spf13/afero v1.1.2 h1:m8/z1t7/fwjysjQRYbP0RD+bUIF/8tJwPdEZsI83ACI=
+github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=
+github.com/spf13/cast v1.3.0 h1:oget//CVOEoFewqQxwr0Ej5yjygnqGkvggSE/gB35Q8=
+github.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=
+github.com/spf13/cobra v0.0.3/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=
+github.com/spf13/jwalterweatherman v1.0.0 h1:XHEdyB+EcvlqZamSM4ZOMGlc93t6AcsBEu9Gc1vn7yk=
+github.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=
+github.com/spf13/pflag v1.0.3 h1:zPAT6CGy6wXeQ7NtTnaTerfKOsV6V6F8agHXFiazDkg=
+github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
+github.com/spf13/viper v1.7.1 h1:pM5oEahlgWv/WnHXpgbKz7iLIxRf65tye2Ci+XFK5sk=
+github.com/spf13/viper v1.7.1/go.mod h1:8WkrPz2fc9jxqZNCJI/76HCieCp4Q8HaLFoCha5qpdg=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
 github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
-github.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=
+github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
 github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
+github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
+github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
 github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
 github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
-github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
-github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
-github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
-github.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=
-github.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=
+github.com/stretchr/testify v1.8.2/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
+github.com/stretchr/testify v1.8.3 h1:RP3t2pwF7cMEbC1dqtB6poj3niw/9gnV4Cjg5oW5gtY=
+github.com/stretchr/testify v1.8.3/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
+github.com/subosito/gotenv v1.2.0 h1:Slr1R9HxAlEKefgq5jn9U+DnETlIUa6HfgEzj0g5d7s=
+github.com/subosito/gotenv v1.2.0/go.mod h1:N0PQaV/YGNqwC0u51sEeR/aUtSLEXKX9iv69rRypqCw=
 github.com/testcontainers/testcontainers-go v0.13.0 h1:OUujSlEGsXVo/ykPVZk3KanBNGN0TYb/7oKIPVn15JA=
-github.com/testcontainers/testcontainers-go v0.13.0/go.mod h1:z1abufU633Eb/FmSBTzV6ntZAC1eZBYPtaFsn4nPuDk=
 github.com/thakurajayL/go-ipam v0.0.5-dev h1:EgOkLUKjGqVLjQ5RKK14x2W/EUhSm8bPjiAC0g1tyPw=
 github.com/thakurajayL/go-ipam v0.0.5-dev/go.mod h1:kriWKdZOK9c1i9XAEjx+FfEAjzV/mx2YL3Jl4dhJ3IY=
 github.com/tidwall/pretty v1.0.0 h1:HsD+QiTn7sK6flMKIvNmpqz1qrpP3Ps6jOKIKMooyg4=
 github.com/tidwall/pretty v1.0.0/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=
+github.com/tmc/grpc-websocket-proxy v0.0.0-20190109142713-0ad062ec5ee5/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=
 github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=
 github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
-github.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=
-github.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
-github.com/urfave/cli v1.22.14 h1:ebbhrRiGK2i4naQJr+1Xj92HXZCrK7MsyTS/ob3HnAk=
-github.com/urfave/cli v1.22.14/go.mod h1:X0eDS6pD6Exaclxm99NJ3FiCDRED7vIHpx2mDOHLvkA=
+github.com/ugorji/go v1.1.7/go.mod h1:kZn38zHttfInRq0xu/PH0az30d+z6vm202qpg1oXVMw=
+github.com/ugorji/go v1.2.1/go.mod h1:cSVypSfTLm2o9fKxXvQgn3rMmkPXovcWor6Qn5tbFmI=
+github.com/ugorji/go/codec v1.1.7/go.mod h1:Ax+UKWsSmolVDwsd+7N3ZtXu+yMGCf907BLYF3GoBXY=
+github.com/ugorji/go/codec v1.2.1/go.mod h1:s/WxCRi46t8rA+fowL40EnmD7ec0XhR7ZypxeBNdzsM=
+github.com/ugorji/go/codec v1.2.11 h1:BMaWp1Bb6fHwEtbplGBGJ498wD+LKlNSl25MjdZY4dU=
+github.com/ugorji/go/codec v1.2.11/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
+github.com/urfave/cli v1.22.5/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=
+github.com/urfave/cli v1.22.10 h1:p8Fspmz3iTctJstry1PYS3HVdllxnEzTEsgIgtxTrCk=
+github.com/urfave/cli v1.22.10/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=
 github.com/xdg-go/pbkdf2 v1.0.0 h1:Su7DPu48wXMwC3bs7MCNG+z4FhcyEuz5dlvchbq0B0c=
 github.com/xdg-go/pbkdf2 v1.0.0/go.mod h1:jrpuAogTd400dnrH08LKmI/xc1MbPOebTwRqcT5RDeI=
+github.com/xdg-go/scram v1.0.2/go.mod h1:1WAq6h33pAW+iRreB34OORO2Nf7qel3VV3fjBj+hCSs=
+github.com/xdg-go/scram v1.1.1 h1:VOMT+81stJgXW3CpHyqHN3AXDYIMsx56mEFrB37Mb/E=
 github.com/xdg-go/scram v1.1.1/go.mod h1:RaEWvsqvNKKvBPvcKeFjrG2cJqOkHTiyTpzz23ni57g=
-github.com/xdg-go/scram v1.1.2 h1:FHX5I5B4i4hKRVRBCFRxq1iQRej7WO3hhBuJf+UUySY=
-github.com/xdg-go/scram v1.1.2/go.mod h1:RT/sEzTbU5y00aCK8UOx6R7YryM0iF1N2MOmC3kKLN4=
+github.com/xdg-go/stringprep v1.0.2/go.mod h1:8F9zXuvzgwmyT5DUm4GUfZGDdT3W+LCvS6+da4O5kxM=
+github.com/xdg-go/stringprep v1.0.3 h1:kdwGpVNwPFtjs98xCGkHjQtGKh86rDcRZN17QEMCOIs=
 github.com/xdg-go/stringprep v1.0.3/go.mod h1:W3f5j4i+9rC0kuIEJL0ky1VpHXQU3ocBgklLGvcBnW8=
-github.com/xdg-go/stringprep v1.0.4 h1:XLI/Ng3O1Atzq0oBs3TWm+5ZVgkq2aqdlvP9JtoZ6c8=
-github.com/xdg-go/stringprep v1.0.4/go.mod h1:mPGuuIYwz7CmR2bT9j4GbQqutWS1zV24gijq1dTyGkM=
+github.com/xdg/scram v1.0.5 h1:TuS0RFmt5Is5qm9Tm2SoD89OPqe4IRiFtyFY4iwWXsw=
+github.com/xdg/scram v1.0.5/go.mod h1:lB8K/P019DLNhemzwFU4jHLhdvlE6uDZjXFejJXr49I=
+github.com/xdg/stringprep v1.0.3 h1:cmL5Enob4W83ti/ZHuZLuKD/xqJfus4fVPwE+/BDm+4=
+github.com/xdg/stringprep v1.0.3/go.mod h1:Jhud4/sHMO4oL310DaZAKk9ZaJ08SJfe+sJh0HrGL1Y=
+github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=
 github.com/youmark/pkcs8 v0.0.0-20181117223130-1be2e3e5546d/go.mod h1:rHwXgn7JulP+udvsHwJoVG1YGAP6VLg4y9I5dyZdqmA=
 github.com/youmark/pkcs8 v0.0.0-20201027041543-1326539a0a0a h1:fZHgsYlfvtyqToslyjUt3VOPF4J7aK/3MPcK7xp3PDk=
 github.com/youmark/pkcs8 v0.0.0-20201027041543-1326539a0a0a/go.mod h1:ul22v+Nro/R083muKhosV54bj5niojjWZvU8xrevuH4=
+github.com/yuin/goldmark v1.1.25/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
+github.com/yuin/goldmark v1.1.32/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
 github.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=
+github.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=
 github.com/yuin/goldmark v1.4.0/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=
 github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
-go.etcd.io/etcd/api/v3 v3.5.10 h1:szRajuUUbLyppkhs9K6BRtjY37l66XQQmw7oZRANE4k=
-go.etcd.io/etcd/api/v3 v3.5.10/go.mod h1:TidfmT4Uycad3NM/o25fG3J07odo4GBB9hoxaodFCtI=
-go.etcd.io/etcd/client/pkg/v3 v3.5.10 h1:kfYIdQftBnbAq8pUWFXfpuuxFSKzlmM5cSn76JByiT0=
-go.etcd.io/etcd/client/pkg/v3 v3.5.10/go.mod h1:DYivfIviIuQ8+/lCq4vcxuseg2P2XbHygkKwFo9fc8U=
-go.etcd.io/etcd/client/v3 v3.5.10 h1:W9TXNZ+oB3MCd/8UjxHTWK5J9Nquw9fQBLJd5ne5/Ao=
-go.etcd.io/etcd/client/v3 v3.5.10/go.mod h1:RVeBnDz2PUEZqTpgqwAtUd8nAPf5kjyFyND7P1VkOKc=
-go.mongodb.org/mongo-driver v1.11.7 h1:LIwYxASDLGUg/8wOhgOOZhX8tQa/9tgZPgzZoVqJvcs=
-go.mongodb.org/mongo-driver v1.11.7/go.mod h1:G9TgswdsWjX4tmDA5zfs2+6AEPpYJwqblyjsfuh8oXY=
-go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
-go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
+go.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=
+go.etcd.io/etcd/api/v3 v3.5.4 h1:OHVyt3TopwtUQ2GKdd5wu3PmmipR4FTwCqoEjSyRdIc=
+go.etcd.io/etcd/api/v3 v3.5.4/go.mod h1:5GB2vv4A4AOn3yk7MftYGHkUfGtDHnEraIjym4dYz5A=
+go.etcd.io/etcd/client/pkg/v3 v3.5.4 h1:lrneYvz923dvC14R54XcA7FXoZ3mlGZAgmwhfm7HqOg=
+go.etcd.io/etcd/client/pkg/v3 v3.5.4/go.mod h1:IJHfcCEKxYu1Os13ZdwCwIUTUVGYTSAM3YSwc9/Ac1g=
+go.etcd.io/etcd/client/v3 v3.5.4 h1:p83BUL3tAYS0OT/r0qglgc3M1JjhM0diV8DSWAhVXv4=
+go.etcd.io/etcd/client/v3 v3.5.4/go.mod h1:ZaRkVgBZC+L+dLCjTcF1hRXpgZXQPOvnA/Ak/gq3kiY=
+go.mongodb.org/mongo-driver v1.7.3/go.mod h1:NqaYOwnXWr5Pm7AOpO5QFxKJ503nbMse/R79oO62zWg=
+go.mongodb.org/mongo-driver v1.11.0 h1:FZKhBSTydeuffHj9CBjXlR8vQLee1cQyTWYPA6/tqiE=
+go.mongodb.org/mongo-driver v1.11.0/go.mod h1:s7p5vEtfbeR1gYi6pnj3c3/urpbLv2T5Sfd6Rp2HBB8=
+go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=
+go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=
+go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
+go.opencensus.io v0.22.3/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
+go.opencensus.io v0.22.4/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
+go.opencensus.io v0.23.0 h1:gqCw0LfLxScz8irSi8exQc7fyQ0fKQU/qnC/X8+V/1M=
+go.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=
+go.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
+go.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=
 go.uber.org/atomic v1.9.0 h1:ECmE8Bn/WFTYwEW/bpKD3M8VtR/zQVbavAoalC1PYyE=
 go.uber.org/atomic v1.9.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=
 go.uber.org/goleak v1.1.11 h1:wy28qYRKZgnJTxGxvye5/wgWr1EKjmUDGYox5mGlRlI=
-go.uber.org/goleak v1.1.11/go.mod h1:cwTWslyiVhfpKIDGSZEM2HlOvcqm+tG4zioyIeLoqMQ=
-go.uber.org/multierr v1.9.0 h1:7fIwc/ZtS0q++VgcfqFDxSBZVv/Xo49/SYnDFupUwlI=
-go.uber.org/multierr v1.9.0/go.mod h1:X2jQV1h+kxSjClGpnseKVIxpmcjrj7MNnI0bnlfKTVQ=
-go.uber.org/zap v1.24.0 h1:FiJd5l1UOLj0wCgbSE0rwwXHzEdAZS6hiiSnxJN/D60=
-go.uber.org/zap v1.24.0/go.mod h1:2kMP+WWQ8aoFoedH3T2sq6iJ2yDWpHbP0f6MQbS9Gkg=
+go.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=
+go.uber.org/multierr v1.6.0/go.mod h1:cdWPpRnG4AhwMwsgIHip0KRBQjJy5kYEpYjJxpXp9iU=
+go.uber.org/multierr v1.8.0 h1:dg6GjLku4EH+249NNmoIciG9N/jURbDG+pFlTkhzIC8=
+go.uber.org/multierr v1.8.0/go.mod h1:7EAYxJLBy9rStEaz58O2t4Uvip6FSURkq8/ppBp95ak=
+go.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=
+go.uber.org/zap v1.17.0/go.mod h1:MXVU+bhUf/A7Xi2HNOnopQOrmycQ5Ih87HtOu4q5SSo=
+go.uber.org/zap v1.23.0 h1:OjGQ5KQDEUawVHxNwQgPpiypGHOxo2mNZsOqTak4fFY=
+go.uber.org/zap v1.23.0/go.mod h1:D+nX8jyLsMHMYrln8A0rJjFt/T/9/bGgIhAqxv5URuY=
 go4.org/intern v0.0.0-20211027215823-ae77deb06f29/go.mod h1:cS2ma+47FKrLPdXFpr7CuxiTW3eyJbWew4qx0qtQWDA=
 go4.org/intern v0.0.0-20220617035311-6925f38cc365 h1:t9hFvR102YlOqU0fQn1wgwhNvSbHGBbbJxX9JKfU3l0=
 go4.org/intern v0.0.0-20220617035311-6925f38cc365/go.mod h1:WXRv3p7T6gzt0CcJm43AAKdKVZmcQbwwC7EwquU5BZU=
 go4.org/unsafe/assume-no-moving-gc v0.0.0-20211027215541-db492cf91b37/go.mod h1:FftLjUGFEDu5k8lt0ddY+HcrH/qU/0qk+H8j9/nTl3E=
+go4.org/unsafe/assume-no-moving-gc v0.0.0-20220617031537-928513b29760 h1:FyBZqvoA/jbNzuAWLQE2kG820zMAkcilx6BMjGbL/E4=
 go4.org/unsafe/assume-no-moving-gc v0.0.0-20220617031537-928513b29760/go.mod h1:FftLjUGFEDu5k8lt0ddY+HcrH/qU/0qk+H8j9/nTl3E=
-go4.org/unsafe/assume-no-moving-gc v0.0.0-20230525183740-e7c30c78aeb2 h1:WJhcL4p+YeDxmZWg141nRm7XC8IDmhz7lk5GpadO1Sg=
-go4.org/unsafe/assume-no-moving-gc v0.0.0-20230525183740-e7c30c78aeb2/go.mod h1:FftLjUGFEDu5k8lt0ddY+HcrH/qU/0qk+H8j9/nTl3E=
 golang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=
-golang.org/x/arch v0.7.0 h1:pskyeJh/3AmoQ8CPE95vxHLqp1G1GfGNXTmcl9NEKTc=
-golang.org/x/arch v0.7.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=
+golang.org/x/arch v0.3.0 h1:02VY4/ZcO/gBOH6PUaoiptASxtXU10jazRCP865E97k=
+golang.org/x/arch v0.3.0/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=
+golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
+golang.org/x/crypto v0.0.0-20181029021203-45a5f77698d3/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+golang.org/x/crypto v0.0.0-20190422162423-af44ce270edf/go.mod h1:WFFai1msRO1wXaEeE5yQxYXgSfI8pQAWXbQop6sCtWE=
+golang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
+golang.org/x/crypto v0.0.0-20190605123033-f99c8df09eb5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200302210943-78000ba7a073/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+golang.org/x/crypto v0.0.0-20201208171446-5f87f3452ae9/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=
 golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.0.0-20220622213112-05595931fe9d/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=
-golang.org/x/crypto v0.14.0/go.mod h1:MVFd36DqK4CsrnJYDkBA3VC4m2GkXAM0PvzMCn4JQf4=
-golang.org/x/crypto v0.21.0 h1:X31++rzVUdKhX5sWmSOFZxx8UW/ldWx55cbf08iNAMA=
-golang.org/x/crypto v0.21.0/go.mod h1:0BP7YvVV9gBbVKyeTG0Gyn+gZm94bibOW5BjDEYAOMs=
-golang.org/x/exp v0.0.0-20230905200255-921286631fa9 h1:GoHiUyI/Tp2nVkLI2mCxVkOjsbSXD66ic0XW0js0R9g=
-golang.org/x/exp v0.0.0-20230905200255-921286631fa9/go.mod h1:S2oDrQGGwySpoQPVqRShND87VCbxmc6bL1Yd2oYrm6k=
+golang.org/x/crypto v0.18.0 h1:PGVlW0xEltQnzFZ55hkuX5+KLyrMYhHld1YHO4AKcdc=
+golang.org/x/crypto v0.18.0/go.mod h1:R0j02AL6hcrfOiy9T4ZYp/rcWeMxM3L6QYxlOuEG1mg=
+golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
+golang.org/x/exp v0.0.0-20190306152737-a1d7652674e8/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
+golang.org/x/exp v0.0.0-20190510132918-efd6b22b2522/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=
+golang.org/x/exp v0.0.0-20190829153037-c13cbed26979/go.mod h1:86+5VVa7VpoJ4kLfm080zCjGlMRFzhUhsZKEZO7MGek=
+golang.org/x/exp v0.0.0-20191030013958-a1ab85dbe136/go.mod h1:JXzH8nQsPlswgeRAPE3MuO9GYsAcnJvJ4vnMwN/5qkY=
+golang.org/x/exp v0.0.0-20191129062945-2f5052295587/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=
+golang.org/x/exp v0.0.0-20191227195350-da58074b4299/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=
+golang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=
+golang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=
+golang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=
+golang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=
+golang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=
+golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
+golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
+golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
+golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+golang.org/x/lint v0.0.0-20190409202823-959b441ac422/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+golang.org/x/lint v0.0.0-20190909230951-414d861bb4ac/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+golang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+golang.org/x/lint v0.0.0-20191125180803-fdd1cda4f05f/go.mod h1:5qLYkcX4OjUUV8bRuDixDT3tpyyb+LUpUlRWLxfhWrs=
+golang.org/x/lint v0.0.0-20200130185559-910be7a94367/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=
+golang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=
+golang.org/x/lint v0.0.0-20210508222113-6edffad5e616/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=
+golang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=
+golang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028/go.mod h1:E/iHnbuqvinMTCcRqshq8CkpyQDoeVncDDYHnLhea+o=
+golang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=
+golang.org/x/mod v0.1.0/go.mod h1:0QHyrYULN0/3qlju5TqG8bIK38QM8yzMo5ekMj3DlcY=
+golang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=
+golang.org/x/mod v0.1.1-0.20191107180719-034126e5016b/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=
 golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=
 golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=
-golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
+golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20181023162649-9b4f9f5ad519/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20181201002055-351d144fa1fc/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+golang.org/x/net v0.0.0-20190501004415-9ce7a6920f09/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+golang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+golang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
+golang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20190628185345-da137c7871d7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20190724013045-ca1201d0de80/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20200222125558-5a598a2470a0/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20200301022130-244492dfa37a/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+golang.org/x/net v0.0.0-20200501053045-e0ff5e5a1de5/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+golang.org/x/net v0.0.0-20200506145744-7e3656a0809f/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+golang.org/x/net v0.0.0-20200513185701-a91f0712d120/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+golang.org/x/net v0.0.0-20200520182314-0ba52f642ac2/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+golang.org/x/net v0.0.0-20200625001655-4c5254603344/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
+golang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
+golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
+golang.org/x/net v0.0.0-20201209123823-ac852fbbde11/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
+golang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=
+golang.org/x/net v0.0.0-20210525063256-abc453219eb5/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20210805182204-aaa1db679c0d/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
+golang.org/x/net v0.0.0-20220127200216-cd36cc0744dd/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
+golang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=
+golang.org/x/net v0.0.0-20220706163947-c90051bbdb60/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
 golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
-golang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=
-golang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=
-golang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=
-golang.org/x/net v0.22.0 h1:9sGLhx7iRIHEiX0oAJ3MRZMUCElJgy7Br1nO+AMN3Tc=
-golang.org/x/net v0.22.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=
-golang.org/x/oauth2 v0.17.0 h1:6m3ZPmLEFdVxKKWnKq4VqZ60gutO35zm+zrAHVmHyDQ=
-golang.org/x/oauth2 v0.17.0/go.mod h1:OzPDGQiuQMguemayvdylqddI7qcD9lnSDb+1FiwQ5HA=
+golang.org/x/net v0.20.0 h1:aCL9BSgETF1k+blQaYUBx9hJ9LOGP3gAVemcZlf1Kpo=
+golang.org/x/net v0.20.0/go.mod h1:z8BVo6PvndSri0LbOE3hAn0apkU+1YvI6E70E9jsnvY=
+golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
+golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
+golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
+golang.org/x/oauth2 v0.0.0-20191202225959-858c2ad4c8b6/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
+golang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
+golang.org/x/oauth2 v0.0.0-20210514164344-f6687ab2804c/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=
+golang.org/x/oauth2 v0.0.0-20210810183815-faf39c7919d5/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=
+golang.org/x/oauth2 v0.0.0-20220223155221-ee480838109b/go.mod h1:DAh4E804XQdzx2j+YRIaUnCqCV2RuMz24cGBJ5QYIrc=
+golang.org/x/oauth2 v0.16.0 h1:aDkGMBSYxElaoP81NpoUoz2oo2R2wHdZpGToUxfyQrQ=
+golang.org/x/oauth2 v0.16.0/go.mod h1:hqZ+0LWXsiVoZpeld6jVt06P3adbS2Uu911W1SsJv2o=
+golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20190412183630-56d357773e84/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20200625203802-6e8e738ad208/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.0.0-20201207232520-09787c993a3a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=
 golang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
+golang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20181026203630-95b1ffbd15a5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190403152447-81d4e9dc473e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190419153524-e8e3143a4f4a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190502145724-3ef323f4f1fd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190507160741-ecd444e8653b/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190531175056-4c3a928424d2/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190606165138-5da285871e9c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190624142023-c5567b49c5d0/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190726091711-fc99dfbffb4e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190813064441-fde4db37ae7a/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191001151750-bb3f8db39f24/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20191228213918-04cbcbbfeed8/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200106162015-b016eb3dc98e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200113162924-86b910548bc1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200202164722-d101bd2416d5/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200212091648-12a6c2dcc1e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200302150141-5c8b2ff67527/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200331124033-c3d80250170d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200501052902-10377860bb8e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200511232937-7e40ca221e25/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200515095857-1151b9dac4a9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200523222454-059865788121/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200615200032-f1bc736245b1/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200625212154-ddb9806d33ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200803210538-64077c9b5642/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20201211090839-8ad439b19e0f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210403161142-5e06dd20ab57/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20210603081109-ebe580a85c40/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210809222454-d867a43fc93e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20211107104306-e0b2ad06fe42/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220114195835-da31bd327af9/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220704084225-05e143d24a9e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=
-golang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.16.0 h1:xWw16ngr6ZMtmxDyKyIgsE93KNKz5HKmMa3b8ALHidU=
+golang.org/x/sys v0.16.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
-golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=
-golang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=
-golang.org/x/term v0.13.0/go.mod h1:LTmsnFJwVN6bCy1rVCoS+qHT1HhALEFxKncY3WNNh4U=
+golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
+golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
+golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+golang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
 golang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=
-golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
-golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=
-golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=
 golang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=
 golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
+golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
+golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
+golang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
+golang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
+golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190329151228-23e29df326fe/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190416151739-9c9e1878f421/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190420181800-aa740d480789/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+golang.org/x/tools v0.0.0-20190425150028-36563e24a262/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
+golang.org/x/tools v0.0.0-20190506145303-2d16b83fe98c/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
+golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
+golang.org/x/tools v0.0.0-20190531172133-b3315ee88b7d/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
+golang.org/x/tools v0.0.0-20190606124116-d0a3d012864b/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
+golang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
+golang.org/x/tools v0.0.0-20190628153133-6cdbf07be9d0/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
+golang.org/x/tools v0.0.0-20190816200558-6889da9d5479/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20190911174233-4f2ddba30aff/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191112195655-aa38f8e97acc/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191113191852-77e3bb0ad9e7/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191115202509-3a792d9c32b2/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191125144606-a911d9008d1f/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191130070609-6e064ea0cf2d/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+golang.org/x/tools v0.0.0-20191216173652-a0e659d51361/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20191227053925-7b8e75db28f4/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200117161641-43d50277825c/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200122220014-bf1340f18c4a/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200204074204-1cc6d1ef6c74/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200207183749-b753a1ba74fa/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200212150539-ea181f53ac56/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200224181240-023911ca70b2/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200227222343-706bc42d1f0d/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=
+golang.org/x/tools v0.0.0-20200304193943-95d2e580d8eb/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=
+golang.org/x/tools v0.0.0-20200312045724-11d5b4c81c7d/go.mod h1:o4KQGtdN14AW+yjsvvwRTJJuXz8XRtIHtEnmAXLyFUw=
+golang.org/x/tools v0.0.0-20200331025713-a30bf2db82d4/go.mod h1:Sl4aGygMT6LrqrWclx+PTx3U+LnKx/seiNR+3G19Ar8=
+golang.org/x/tools v0.0.0-20200501065659-ab2804fb9c9d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.0.0-20200512131952-2bc93b1c0c88/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.0.0-20200515010526-7d3b6ebf133d/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.0.0-20200618134242-20370b0cb4b2/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
+golang.org/x/tools v0.0.0-20200729194436-6467de6f59a7/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
+golang.org/x/tools v0.0.0-20200804011535-6c149bb5ef0d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
+golang.org/x/tools v0.0.0-20200825202427-b303f430e36d/go.mod h1:njjCfa9FT2d7l9Bc6FUM5FLjQPp3cFF28FI3qnDFljA=
 golang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=
 golang.org/x/tools v0.1.0/go.mod h1:xkSsbof2nBLbhDlRMhhhyNLN/zl3eTqcnHD5viDpcZ0=
+golang.org/x/tools v0.1.2/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=
 golang.org/x/tools v0.1.7/go.mod h1:LGqMHiF4EqQNHR1JncWGqT5BVaXmza+X+BDGol+dOxo=
 golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
-golang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=
 golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
+google.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=
+google.golang.org/api v0.7.0/go.mod h1:WtwebWUNSVBH/HAw79HIFXZNqEvBhG+Ra+ax0hx3E3M=
+google.golang.org/api v0.8.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=
+google.golang.org/api v0.9.0/go.mod h1:o4eAsZoiT+ibD93RtjEohWalFOjRDx6CVaqeizhEnKg=
+google.golang.org/api v0.13.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=
+google.golang.org/api v0.14.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=
+google.golang.org/api v0.15.0/go.mod h1:iLdEw5Ide6rF15KTC1Kkl0iskquN2gFfn9o9XIsbkAI=
+google.golang.org/api v0.17.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=
+google.golang.org/api v0.18.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=
+google.golang.org/api v0.19.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=
+google.golang.org/api v0.20.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=
+google.golang.org/api v0.22.0/go.mod h1:BwFmGc8tA3vsd7r/7kR8DY7iEEGSU04BFxCo5jP/sfE=
+google.golang.org/api v0.24.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=
+google.golang.org/api v0.28.0/go.mod h1:lIXQywCXRcnZPGlsd8NbLnOjtAoL6em04bJ9+z0MncE=
+google.golang.org/api v0.29.0/go.mod h1:Lcubydp8VUV7KeIHD9z2Bys/sm/vGKnG1UHuDBSrHWM=
+google.golang.org/api v0.30.0/go.mod h1:QGmEvQ87FHZNiUVJkT14jQNYJ4ZJjdRF23ZXz5138Fc=
+google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
+google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
+google.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
+google.golang.org/appengine v1.6.1/go.mod h1:i06prIuMbXzDqacNJfV5OdTW448YApPu5ww/cMBSeb0=
+google.golang.org/appengine v1.6.5/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
+google.golang.org/appengine v1.6.6/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=
 google.golang.org/appengine v1.6.8 h1:IhEN5q69dyKagZPYMSdIjS2HqprW324FRQZJcGqPAsM=
 google.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=
-google.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de h1:F6qOa9AZTYJXOUEr4jDysRDLrm4PHePlge4v4TGAlxY=
-google.golang.org/genproto v0.0.0-20240227224415-6ceb2ff114de/go.mod h1:VUhTRKeHn9wwcdrk73nvdC9gF178Tzhmt/qyaFcPLSo=
-google.golang.org/genproto/googleapis/api v0.0.0-20240227224415-6ceb2ff114de h1:jFNzHPIeuzhdRwVhbZdiym9q0ory/xY3sA+v2wPg8I0=
-google.golang.org/genproto/googleapis/api v0.0.0-20240227224415-6ceb2ff114de/go.mod h1:5iCWqnniDlqZHrd3neWVTOwvh/v6s3232omMecelax8=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20240227224415-6ceb2ff114de h1:cZGRis4/ot9uVm639a+rHCUaG0JJHEsdyzSQTMX+suY=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20240227224415-6ceb2ff114de/go.mod h1:H4O17MA/PE9BsGx3w+a+W2VOLLD1Qf7oJneAoU6WktY=
-google.golang.org/grpc v1.63.2 h1:MUeiw1B2maTVZthpU5xvASfTh3LDbxHd6IJ6QQVU+xM=
-google.golang.org/grpc v1.63.2/go.mod h1:WAX/8DgncnokcFUldAxq7GeB5DXHDbMF+lLvDomNkRA=
+google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
+google.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
+google.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
+google.golang.org/genproto v0.0.0-20190425155659-357c62f0e4bb/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
+google.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
+google.golang.org/genproto v0.0.0-20190801165951-fa694d86fc64/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
+google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
+google.golang.org/genproto v0.0.0-20190911173649-1774047e7e51/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=
+google.golang.org/genproto v0.0.0-20191108220845-16a3f7862a1a/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
+google.golang.org/genproto v0.0.0-20191115194625-c23dd37a84c9/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
+google.golang.org/genproto v0.0.0-20191216164720-4f79533eabd1/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
+google.golang.org/genproto v0.0.0-20191230161307-f3c370f40bfb/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
+google.golang.org/genproto v0.0.0-20200115191322-ca5a22157cba/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
+google.golang.org/genproto v0.0.0-20200122232147-0452cf42e150/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
+google.golang.org/genproto v0.0.0-20200204135345-fa8e72b47b90/go.mod h1:GmwEX6Z4W5gMy59cAlVYjN9JhxgbQH6Gn+gFDQe2lzA=
+google.golang.org/genproto v0.0.0-20200212174721-66ed5ce911ce/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200224152610-e50cd9704f63/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200228133532-8c2c7df3a383/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200305110556-506484158171/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200312145019-da6875a35672/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200331122359-1ee6d9798940/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200430143042-b979b6f78d84/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200511104702-f5ebc3bea380/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+google.golang.org/genproto v0.0.0-20200515170657-fc4c6c6a6587/go.mod h1:YsZOwe1myG/8QRHRsmBRE1LrgQY60beZKjly0O1fX9U=
+google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
+google.golang.org/genproto v0.0.0-20200618031413-b414f8b61790/go.mod h1:jDfRM7FcilCzHH/e9qn6dsT145K34l5v+OpcnNgKAAA=
+google.golang.org/genproto v0.0.0-20200729003335-053ba62fc06f/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
+google.golang.org/genproto v0.0.0-20200804131852-c06518451d9c/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
+google.golang.org/genproto v0.0.0-20200825200019-8632dd797987/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
+google.golang.org/genproto v0.0.0-20210602131652-f16073e35f0c/go.mod h1:UODoCrxHCcBojKKwX1terBiRUaqAsFqJiF615XL43r0=
+google.golang.org/genproto v0.0.0-20240123012728-ef4313101c80 h1:KAeGQVN3M9nD0/bQXnr/ClcEMJ968gUXJQ9pwfSynuQ=
+google.golang.org/genproto v0.0.0-20240123012728-ef4313101c80/go.mod h1:cc8bqMqtv9gMOr0zHg2Vzff5ULhhL2IXP4sbcn32Dro=
+google.golang.org/genproto/googleapis/api v0.0.0-20240123012728-ef4313101c80 h1:Lj5rbfG876hIAYFjqiJnPHfhXbv+nzTWfm04Fg/XSVU=
+google.golang.org/genproto/googleapis/api v0.0.0-20240123012728-ef4313101c80/go.mod h1:4jWUdICTdgc3Ibxmr8nAJiiLHwQBY0UI0XZcEMaFKaA=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240123012728-ef4313101c80 h1:AjyfHzEPEFp/NpvfN5g+KDla3EMojjhRVZc1i7cj+oM=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240123012728-ef4313101c80/go.mod h1:PAREbraiVEVGVdTZsVWjSbbTtSyGbAgIIvni8a8CD5s=
+google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
+google.golang.org/grpc v1.20.1/go.mod h1:10oTOabMzJvdu6/UiuZezV6QK5dSlG84ov/aaiqXj38=
+google.golang.org/grpc v1.21.1/go.mod h1:oYelfM1adQP15Ek0mdvEgi9Df8B9CZIaU1084ijfRaM=
+google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
+google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
+google.golang.org/grpc v1.26.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+google.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+google.golang.org/grpc v1.28.0/go.mod h1:rpkK4SK4GF4Ach/+MFLZUBavHOvF2JJB5uozKKal+60=
+google.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=
+google.golang.org/grpc v1.30.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=
+google.golang.org/grpc v1.31.0/go.mod h1:N36X2cJ7JwdamYAgDz+s+rVMFjt3numwzf/HckM8pak=
+google.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=
+google.golang.org/grpc v1.36.0/go.mod h1:qjiiYl8FncCW8feJPdyg3v6XW24KsRHe+dy9BAGRRjU=
+google.golang.org/grpc v1.38.0/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=
+google.golang.org/grpc v1.39.0/go.mod h1:PImNr+rS9TWYb2O4/emRugxiyHZ5JyHW5F+RPnDzfrE=
+google.golang.org/grpc v1.48.0/go.mod h1:vN9eftEi1UMyUsIF80+uQXhHjbXYbm0uXoFCACuMGWk=
+google.golang.org/grpc v1.62.1 h1:B4n+nfKzOICUXMgyrNd19h/I9oH0L1pizfk1d4zSgTk=
+google.golang.org/grpc v1.62.1/go.mod h1:IWTG0VlJLCh1SkC58F7np9ka9mx/WNkjl4PGJaiq+QE=
+google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
+google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
+google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
+google.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=
+google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=
+google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+google.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=
+google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
+google.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.33.0 h1:uNO2rsAINq/JlFpSdYEKIZ0uKD/R9cpdv0T+yoGwGmI=
 google.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=
+gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
-gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
-gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=
+gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=
+gopkg.in/go-playground/assert.v1 v1.2.1/go.mod h1:9RXL0bg/zibRAgZUYszZSwO/z8Y/a8bDuhia5mkpMnE=
+gopkg.in/go-playground/validator.v9 v9.29.1/go.mod h1:+c9/zcJMFNgbLvly1L1V+PpxWdVbfP1avr/N00E2vyQ=
 gopkg.in/h2non/gock.v1 v1.1.2 h1:jBbHXgGBK/AoPVfJh5x4r/WxIrElvbLel8TCZkkZJoY=
 gopkg.in/h2non/gock.v1 v1.1.2/go.mod h1:n7UGz/ckNChHiK05rDoiC4MYSunEC/lyaUm2WWaDva0=
-gopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=
-gopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
+gopkg.in/ini.v1 v1.51.0 h1:AQvPpx3LzTDM0AjnIRlVFwFFGC+npRopjZxLJj6gdno=
+gopkg.in/ini.v1 v1.51.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
+gopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=
 gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=
-gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
+gopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=
+gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
 gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
+honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
+honnef.co/go/tools v0.0.0-20190418001031-e561f6794a2a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
+honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
+honnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=
+honnef.co/go/tools v0.0.1-2020.1.3/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
+honnef.co/go/tools v0.0.1-2020.1.4/go.mod h1:X/FiERA/W4tHapMX5mGpAtMSVEeEUOyHaw9vFzvIQ3k=
 inet.af/netaddr v0.0.0-20220811202034-502d2d690317 h1:U2fwK6P2EqmopP/hFLTOAjWTki0qgd4GMJn5X8wOleU=
 inet.af/netaddr v0.0.0-20220811202034-502d2d690317/go.mod h1:OIezDfdzOgFhuw4HuWapWq2e9l0H9tK4F1j+ETRtF3k=
-nullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=
+rsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=
 rsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=
+rsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=
+rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
+sigs.k8s.io/yaml v1.2.0/go.mod h1:yfXDCHCao9+ENCvLSE62v9VSji2MKu5jeNfTrofGhJc=
diff --git a/httpcallback/api_am_policy_control_update_notify.go b/httpcallback/api_am_policy_control_update_notify.go
index fe6ce26..f61fe81 100644
--- a/httpcallback/api_am_policy_control_update_notify.go
+++ b/httpcallback/api_am_policy_control_update_notify.go
@@ -12,7 +12,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -46,7 +46,7 @@ func HTTPAmPolicyControlUpdateNotifyUpdate(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, policyUpdate)
+	req := http_wrapper.NewRequest(c.Request, policyUpdate)
 	req.Params["polAssoId"] = c.Params.ByName("polAssoId")
 
 	rsp := producer.HandleAmPolicyControlUpdateNotifyUpdate(req)
@@ -94,7 +94,7 @@ func HTTPAmPolicyControlUpdateNotifyTerminate(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, terminationNotification)
+	req := http_wrapper.NewRequest(c.Request, terminationNotification)
 	req.Params["polAssoId"] = c.Params.ByName("polAssoId")
 
 	rsp := producer.HandleAmPolicyControlUpdateNotifyTerminate(req)
diff --git a/httpcallback/api_n1_message_notify.go b/httpcallback/api_n1_message_notify.go
index 2814356..854f0e6 100644
--- a/httpcallback/api_n1_message_notify.go
+++ b/httpcallback/api_n1_message_notify.go
@@ -12,7 +12,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -46,7 +46,7 @@ func HTTPN1MessageNotify(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, n1MessageNotification)
+	req := http_wrapper.NewRequest(c.Request, n1MessageNotification)
 
 	rsp := producer.HandleN1MessageNotify(req)
 
diff --git a/httpcallback/api_nf_subscribe_notify.go b/httpcallback/api_nf_subscribe_notify.go
index 7375cf5..55fa0d9 100644
--- a/httpcallback/api_nf_subscribe_notify.go
+++ b/httpcallback/api_nf_subscribe_notify.go
@@ -14,7 +14,7 @@ import (
 	"github.com/omec-project/openapi/models"
 
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 )
 
@@ -47,7 +47,7 @@ func HTTPNfSubscriptionStatusNotify(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, nfSubscriptionStatusNotification)
+	req := http_wrapper.NewRequest(c.Request, nfSubscriptionStatusNotification)
 
 	rsp := producer.HandleNfSubscriptionStatusNotify(req)
 
diff --git a/httpcallback/api_sm_context_status_notify.go b/httpcallback/api_sm_context_status_notify.go
index 0d6be14..fc35755 100644
--- a/httpcallback/api_sm_context_status_notify.go
+++ b/httpcallback/api_sm_context_status_notify.go
@@ -12,7 +12,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -46,7 +46,7 @@ func HTTPSmContextStatusNotify(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, smContextStatusNotification)
+	req := http_wrapper.NewRequest(c.Request, smContextStatusNotification)
 	req.Params["guti"] = c.Params.ByName("guti")
 	req.Params["pduSessionId"] = c.Params.ByName("pduSessionId")
 
diff --git a/httpcallback/router.go b/httpcallback/router.go
index 2b26dd0..3b657b2 100644
--- a/httpcallback/router.go
+++ b/httpcallback/router.go
@@ -10,9 +10,10 @@ import (
 	"strings"
 
 	"github.com/gin-gonic/gin"
+	"github.com/sirupsen/logrus"
+
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/logger_util"
-	"github.com/sirupsen/logrus"
 )
 
 var HttpLog *logrus.Entry
diff --git a/location/api_individual_ue_context_document.go b/location/api_individual_ue_context_document.go
index 8bd3f0e..85a34d7 100644
--- a/location/api_individual_ue_context_document.go
+++ b/location/api_individual_ue_context_document.go
@@ -21,7 +21,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -56,7 +56,7 @@ func HTTPProvideLocationInfo(c *gin.Context) {
 		return
 	}
 
-	req := httpwrapper.NewRequest(c.Request, requestLocInfo)
+	req := http_wrapper.NewRequest(c.Request, requestLocInfo)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 
 	rsp := producer.HandleProvideLocationInfoRequest(req)
diff --git a/logger/logger.go b/logger/logger.go
index d000859..6f8bd92 100644
--- a/logger/logger.go
+++ b/logger/logger.go
@@ -19,7 +19,6 @@ var (
 	InitLog     *logrus.Entry
 	CfgLog      *logrus.Entry
 	ContextLog  *logrus.Entry
-	DataRepoLog *logrus.Entry
 	NgapLog     *logrus.Entry
 	HandlerLog  *logrus.Entry
 	HttpLog     *logrus.Entry
@@ -58,27 +57,26 @@ func init() {
 		FieldsOrder:     []string{"component", "category", FieldRanAddr, FieldRanId, FieldAmfUeNgapID, FieldSupi, FieldSuci},
 	}
 
-	AppLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "App"})
-	InitLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "Init"})
-	CfgLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "CFG"})
-	ContextLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "Context"})
-	DataRepoLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "DRepo"})
-	NgapLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "NGAP"})
-	HandlerLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "Handler"})
-	HttpLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "HTTP"})
-	GmmLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "GMM"})
-	MtLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "MT"})
-	ProducerLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "Producer"})
-	LocationLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "LocInfo"})
-	CommLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "Comm"})
-	CallbackLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "Callback"})
-	UtilLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "Util"})
-	NasLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "NAS"})
-	ConsumerLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "Consumer"})
-	EeLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "EventExposure"})
-	GinLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "GIN"})
-	GrpcLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "GRPC"})
-	KafkaLog = log.WithFields(logrus.Fields{"component": "AMF", "category": "Kafka"})
+	AppLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "App"})
+	InitLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "Init"})
+	CfgLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "CFG"})
+	ContextLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "Context"})
+	NgapLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "NGAP"})
+	HandlerLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "Handler"})
+	HttpLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "HTTP"})
+	GmmLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "GMM"})
+	MtLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "MT"})
+	ProducerLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "Producer"})
+	LocationLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "LocInfo"})
+	CommLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "Comm"})
+	CallbackLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "Callback"})
+	UtilLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "Util"})
+	NasLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "NAS"})
+	ConsumerLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "Consumer"})
+	EeLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "EventExposure"})
+	GinLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "GIN"})
+	GrpcLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "GRPC"})
+	KafkaLog = log.WithFields(logrus.Fields{"component": "HEXA_AMF", "category": "Kafka"})
 }
 
 func SetLogLevel(level logrus.Level) {
diff --git a/metrics/kafka.go b/metrics/kafka.go
index 88ab8b4..f90f7a3 100644
--- a/metrics/kafka.go
+++ b/metrics/kafka.go
@@ -17,12 +17,13 @@ import (
 )
 
 type Writer struct {
-	kafkaWriter *kafka.Writer
+	kafkaWriter kafka.Writer
 }
 
 var StatWriter Writer
 
 func InitialiseKafkaStream(config *factory.Configuration) error {
+
 	brokerUrl := "sd-core-kafka-headless:9092"
 	topicName := "sdcore-data-source-amf"
 
@@ -44,7 +45,7 @@ func InitialiseKafkaStream(config *factory.Configuration) error {
 	}
 
 	StatWriter = Writer{
-		kafkaWriter: &producer,
+		kafkaWriter: producer,
 	}
 
 	logger.KafkaLog.Debugf("initialising kafka stream with url[%v], topic[%v]", brokerUrl, topicName)
@@ -52,6 +53,7 @@ func InitialiseKafkaStream(config *factory.Configuration) error {
 }
 
 func GetWriter() Writer {
+
 	return StatWriter
 }
 
@@ -62,30 +64,46 @@ func (writer Writer) SendMessage(message []byte) error {
 }
 
 func (writer Writer) PublishUeCtxtEvent(ctxt mi.CoreSubscriber, op mi.SubscriberOp) error {
-	smKafkaEvt := mi.MetricEvent{
-		EventType:      mi.CSubscriberEvt,
-		SubscriberData: mi.CoreSubscriberData{Subscriber: ctxt, Operation: op},
-	}
+
+	smKafkaEvt := mi.MetricEvent{EventType: mi.CSubscriberEvt,
+		SubscriberData: mi.CoreSubscriberData{Subscriber: ctxt, Operation: op}}
 	if msg, err := json.Marshal(smKafkaEvt); err != nil {
 		logger.KafkaLog.Errorf("publishing ue context event error [%v] ", err.Error())
 		return err
 	} else {
 		logger.KafkaLog.Debugf("publishing ue context event[%s] ", msg)
-		if err := StatWriter.SendMessage(msg); err != nil {
-			logger.KafkaLog.Errorf("Could not publish ue context event, error [%v]", err.Error())
-		}
+		StatWriter.SendMessage(msg)
 	}
 	return nil
 }
 
+var nfInstanceId string
+
+//initialised by context package
+func SetNfInstanceId(s string) {
+	nfInstanceId = s
+}
+
+/*
+func PublishMsgEvent(msgType mi.AmfMsgType) error {
+
+	smKafkaMsgEvt := mi.MetricEvent{EventType: mi.CMsgTypeEvt, MsgType: mi.CoreMsgType{MsgType: msgType.String(), SourceNfId: nfInstanceId}}
+	if msg, err := json.Marshal(smKafkaMsgEvt); err != nil {
+		return err
+	} else {
+		logger.KafkaLog.Debugf("publishing msg event[%s] ", msg)
+		StatWriter.SendMessage(msg)
+	}
+	return nil
+}*/
+
 func (writer Writer) PublishNfStatusEvent(msgEvent mi.MetricEvent) error {
+
 	if msg, err := json.Marshal(msgEvent); err != nil {
 		return err
 	} else {
 		logger.KafkaLog.Debugf("publishing nf status event[%s] ", msg)
-		if err := StatWriter.SendMessage(msg); err != nil {
-			logger.KafkaLog.Errorf("Error publishing nf status event: %v", err)
-		}
+		StatWriter.SendMessage(msg)
 	}
 	return nil
 }
diff --git a/metrics/telemetry.go b/metrics/telemetry.go
index ba2110d..653e582 100644
--- a/metrics/telemetry.go
+++ b/metrics/telemetry.go
@@ -15,12 +15,11 @@ import (
 	"fmt"
 	"net/http"
 
-	"github.com/omec-project/amf/logger"
 	"github.com/prometheus/client_golang/prometheus"
 	"github.com/prometheus/client_golang/prometheus/promhttp"
 )
 
-// AmfStats captures AMF level stats
+//AmfStats captures AMF level stats
 type AmfStats struct {
 	ngapMsg           *prometheus.CounterVec
 	gnbSessionProfile *prometheus.GaugeVec
@@ -62,20 +61,18 @@ func init() {
 	}
 }
 
-// InitMetrics initialises AMF stats
+//InitMetrics initialises AMF stats
 func InitMetrics() {
 	http.Handle("/metrics", promhttp.Handler())
-	if err := http.ListenAndServe(":9089", nil); err != nil {
-		logger.InitLog.Errorf("Could not open metrics port: %v", err)
-	}
+	http.ListenAndServe(":9089", nil)
 }
 
-// IncrementNgapMsgStats increments message level stats
+//IncrementNgapMsgStats increments message level stats
 func IncrementNgapMsgStats(amfID, msgType, direction, result, reason string) {
 	amfStats.ngapMsg.WithLabelValues(amfID, msgType, direction, result, reason).Inc()
 }
 
-// SetGnbSessProfileStats maintains Session profile info
+//SetGnbSessProfileStats maintains Session profile info
 func SetGnbSessProfileStats(id, ip, state, tac string, count uint64) {
 	amfStats.gnbSessionProfile.WithLabelValues(id, ip, state, tac).Set(float64(count))
 }
diff --git a/mt/api_ue_context_document.go b/mt/api_ue_context_document.go
index 82f5deb..ec00aae 100644
--- a/mt/api_ue_context_document.go
+++ b/mt/api_ue_context_document.go
@@ -21,14 +21,14 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
 
 // ProvideDomainSelectionInfo - Namf_MT Provide Domain Selection Info service Operation
 func HTTPProvideDomainSelectionInfo(c *gin.Context) {
-	req := httpwrapper.NewRequest(c.Request, nil)
+	req := http_wrapper.NewRequest(c.Request, nil)
 	req.Params["ueContextId"] = c.Params.ByName("ueContextId")
 	infoClassQuery := c.Query("info-class")
 	req.Query.Add("info-class", infoClassQuery)
diff --git a/nas/dispatch.go b/nas/dispatch.go
index 1bf0cb7..bb7ec3c 100644
--- a/nas/dispatch.go
+++ b/nas/dispatch.go
@@ -11,9 +11,9 @@ import (
 
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/gmm"
+	"github.com/omec-project/fsm"
 	"github.com/omec-project/nas"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/fsm"
 )
 
 func Dispatch(ue *context.AmfUe, accessType models.AccessType, procedureCode int64, msg *nas.Message) error {
diff --git a/nas/handler.go b/nas/handler.go
index 4959c0b..7bdc155 100644
--- a/nas/handler.go
+++ b/nas/handler.go
@@ -36,10 +36,7 @@ func HandleNAS(ue *context.RanUe, procedureCode int64, nasPdu []byte) {
 		} else {
 			if amfSelf.EnableSctpLb {
 				/* checking the guti-ue belongs to this amf instance */
-				id, err := amfSelf.Drsm.FindOwnerInt32ID(ue.AmfUe.Tmsi)
-				if err != nil {
-					logger.NasLog.Errorf("Error checking guti-ue: %v", err)
-				}
+				id, _ := amfSelf.Drsm.FindOwnerInt32ID(int32(ue.AmfUe.Tmsi))
 				if id != nil && id.PodName != os.Getenv("HOSTNAME") {
 					rsp := &sdcoreAmfServer.AmfMessage{}
 					rsp.VerboseMsg = "Redirecting Msg From AMF Pod !"
@@ -49,12 +46,10 @@ func HandleNAS(ue *context.RanUe, procedureCode int64, nasPdu []byte) {
 					rsp.RedirectId = id.PodIp
 					rsp.GnbId = ue.Ran.GnbId
 					rsp.Msg = ue.SctplbMsg
-					if ue.AmfUe != nil {
+					if ue != nil && ue.AmfUe != nil {
 						ue.AmfUe.Remove()
-					} else {
-						if err := ue.Remove(); err != nil {
-							logger.NasLog.Errorf("Error removing ue: %v", err)
-						}
+					} else if ue != nil {
+						ue.Remove()
 					}
 					ue.Ran.Amf2RanMsgChan <- rsp
 					return
@@ -103,6 +98,7 @@ func HandleNAS(ue *context.RanUe, procedureCode int64, nasPdu []byte) {
 	if err := Dispatch(ue.AmfUe, ue.Ran.AnType, procedureCode, msg); err != nil {
 		ue.AmfUe.NASLog.Errorf("Handle NAS Error: %v", err)
 	}
+
 }
 
 func DispatchMsg(amfUe *context.AmfUe, transInfo context.NasMsg) {
diff --git a/nas/nas_security/security.go b/nas/nas_security/security.go
index 99ce37f..53af646 100644
--- a/nas/nas_security/security.go
+++ b/nas/nas_security/security.go
@@ -141,7 +141,7 @@ func FetchUeContextWithMobileIdentity(payload []byte) *context.AmfUe {
 		mobileIdentity5GSContents := msg.RegistrationRequest.MobileIdentity5GS.GetMobileIdentity5GSContents()
 		if nasMessage.MobileIdentity5GSType5gGuti == nasConvert.GetTypeOfIdentity(mobileIdentity5GSContents[0]) {
 			_, guti = nasConvert.GutiToString(mobileIdentity5GSContents)
-			logger.CommLog.Debugf("Guti received in Registration Request Message: %v", guti)
+			logger.CommLog.Debugf("Guti received in Registraion Request Message: %v", guti)
 		} else if nasMessage.MobileIdentity5GSTypeSuci == nasConvert.GetTypeOfIdentity(mobileIdentity5GSContents[0]) {
 			suci, _ := nasConvert.SuciToString(mobileIdentity5GSContents)
 			/* UeContext found based on SUCI which means context is exist in Network(AMF) but not
@@ -204,7 +204,6 @@ func Decode(ue *context.AmfUe, accessType models.AccessType, payload []byte) (*n
 		if ue.SecurityContextAvailable && ue.RanUe[accessType].RRCEstablishmentCause != "0" {
 			ue.NASLog.Warnln("Received Plain NAS message")
 			ue.MacFailed = false
-			ue.SecurityContextAvailable = false
 			if err := msg.PlainNasDecode(&payload); err != nil {
 				return nil, err
 			}
diff --git a/ngap/dispatcher.go b/ngap/dispatcher.go
index 0ee048e..3cb7b87 100644
--- a/ngap/dispatcher.go
+++ b/ngap/dispatcher.go
@@ -8,12 +8,14 @@
 package ngap
 
 import (
-	"fmt"
 	"net"
 	"os"
 	"reflect"
 
 	"git.cs.nctu.edu.tw/calee/sctp"
+
+	"fmt"
+
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/metrics"
@@ -66,10 +68,10 @@ func DispatchLb(sctplbMsg *sdcoreAmfServer.SctplbMessage, Amf2RanMsgChan chan *s
 		//ranUe.Log.Debugln("RanUe RanNgapId AmfNgapId: ", ranUe.RanUeNgapId, ranUe.AmfUeNgapId)
 		/* checking whether same AMF instance can handle this message */
 		/* redirect it to correct owner if required */
-		id, err := amfSelf.Drsm.FindOwnerInt32ID(int32(ngapId.Value))
-		if id == nil || err != nil {
+		id, _ := amfSelf.Drsm.FindOwnerInt32ID(int32(ngapId.Value))
+		if id == nil {
 			ran.Log.Warningf("DispatchLb, Couldn't find owner for amfUeNgapid: %v", ngapId.Value)
-		} else if id.PodName != os.Getenv("HOSTNAME") {
+		} else if id != nil && id.PodName != os.Getenv("HOSTNAME") {
 			rsp := &sdcoreAmfServer.AmfMessage{}
 			rsp.VerboseMsg = "Redirect Msg From AMF Pod !"
 			rsp.Msgtype = sdcoreAmfServer.MsgType_REDIRECT_MSG
@@ -86,9 +88,7 @@ func DispatchLb(sctplbMsg *sdcoreAmfServer.SctplbMessage, Amf2RanMsgChan chan *s
 				ranUe.AmfUe.Remove()
 			}
 			if ranUe != nil {
-				if err := ranUe.Remove(); err != nil {
-					ran.Log.Errorf("Could not remove ranUe: %v", err)
-				}
+				ranUe.Remove()
 			}
 			return
 		} else {
@@ -99,7 +99,7 @@ func DispatchLb(sctplbMsg *sdcoreAmfServer.SctplbMessage, Amf2RanMsgChan chan *s
 	/* uecontext is found, submit the message to transaction queue*/
 	if ranUe != nil && ranUe.AmfUe != nil {
 		ranUe.AmfUe.SetEventChannel(NgapMsgHandler)
-		// ranUe.AmfUe.TxLog.Infof("Uecontext found. queuing ngap message to uechannel")
+		ranUe.AmfUe.TxLog.Infof("Uecontext found. queuing ngap message to uechannel")
 		ranUe.AmfUe.EventChannel.UpdateNgapHandler(NgapMsgHandler)
 		ngapMsg := context.NgapMsg{
 			Ran:       ran,
@@ -119,7 +119,9 @@ func Dispatch(conn net.Conn, msg []byte) {
 
 	ran, ok := amfSelf.AmfRanFindByConn(conn)
 	if !ok {
-		logger.NgapLog.Infof("Create a new NG connection for: %s", conn.RemoteAddr().String())
+		// logger.NgapLog.Infof("-------------------------------------------------")
+		logger.NgapLog.Infof("Create a new NG connection for: | %s |", conn.RemoteAddr().String())
+		// logger.NgapLog.Infof("-------------------------------------------------")
 		ran = amfSelf.NewAmfRan(conn)
 	}
 
@@ -160,6 +162,7 @@ func NgapMsgHandler(ue *context.AmfUe, msg context.NgapMsg) {
 }
 
 func DispatchNgapMsg(ran *context.AmfRan, pdu *ngapType.NGAPPDU, sctplbMsg *sdcoreAmfServer.SctplbMessage) {
+
 	switch pdu.Present {
 	case ngapType.NGAPPDUPresentInitiatingMessage:
 		initiatingMessage := pdu.InitiatingMessage
@@ -295,13 +298,13 @@ func HandleSCTPNotification(conn net.Conn, notification sctp.Notification) {
 		return
 	}
 
-	// Removing Stale Connections in AmfRanPool
+	//Removing Stale Connections in AmfRanPool
 	amfSelf.AmfRanPool.Range(func(key, value interface{}) bool {
 		amfRan := value.(*context.AmfRan)
 
 		conn := amfRan.Conn.(*sctp.SCTPConn)
 		errorConn := sctp.NewSCTPConn(-1, nil)
-		if reflect.DeepEqual(conn, errorConn) {
+		if reflect.DeepEqual(conn, errorConn) == true {
 			amfRan.Remove()
 			ran.Log.Infof("removed stale entry in AmfRan pool")
 		}
@@ -331,6 +334,7 @@ func HandleSCTPNotification(conn net.Conn, notification sctp.Notification) {
 }
 
 func HandleSCTPNotificationLb(gnbId string) {
+
 	logger.NgapLog.Infof("Handle SCTP Notification[GnbId: %+v]", gnbId)
 
 	amfSelf := context.AMF_Self()
@@ -340,7 +344,7 @@ func HandleSCTPNotificationLb(gnbId string) {
 		return
 	}
 
-	// Removing Stale Connections in AmfRanPool
+	//Removing Stale Connections in AmfRanPool
 	amfSelf.AmfRanPool.Range(func(key, value interface{}) bool {
 		amfRan := value.(*context.AmfRan)
 
diff --git a/ngap/handler.go b/ngap/handler.go
index 783bb74..eefb3de 100644
--- a/ngap/handler.go
+++ b/ngap/handler.go
@@ -75,6 +75,7 @@ func FetchRanUeContext(ran *context.AmfRan, message *ngapType.NGAPPDU) (*context
 					fiveGSTMSI = ie.Value.FiveGSTMSI
 					ran.Log.Trace("Decode IE 5G-S-TMSI")
 				}
+
 			}
 			ranUe = ran.RanUeFindByRanUeNgapID(rANUENGAPID.Value)
 			if ranUe == nil {
@@ -98,6 +99,7 @@ func FetchRanUeContext(ran *context.AmfRan, message *ngapType.NGAPPDU) (*context
 					// Described in TS 23.502 4.2.2.2.2 step 4 (without UDSF deployment)
 
 					if amfUe, ok := amfSelf.AmfUeFindByGuti(guti); ok {
+
 						ranUe, err = ran.NewRanUe(rANUENGAPID.Value)
 						if err != nil {
 							ran.Log.Errorf("NewRanUe Error: %+v", err)
@@ -432,6 +434,7 @@ func FetchRanUeContext(ran *context.AmfRan, message *ngapType.NGAPPDU) (*context
 				}
 			}
 			ranUe = context.AMF_Self().RanUeFindByAmfUeNgapID(aMFUENGAPID.Value)
+
 		}
 	case ngapType.NGAPPDUPresentUnsuccessfulOutcome:
 		unsuccessfulOutcome := message.UnsuccessfulOutcome
@@ -613,7 +616,7 @@ func HandleNGSetupRequest(ran *context.AmfRan, message *ngapType.NGAPPDU) {
 		copy(taiList, context.AMF_Self().SupportTaiLists)
 		for i := range taiList {
 			taiList[i].Tac = util.TACConfigToModels(taiList[i].Tac)
-			ran.Log.Infof("Supported Tai List in AMF Plmn: %v, Tac: 0x%v Tac: %v", taiList[i].PlmnId, taiList[i].Tac, context.AMF_Self().SupportTaiLists[i].Tac)
+			ran.Log.Infof("Supported Tai List in HEXA-AMF Plmn: %v, Tac: 0x%v Tac: %v", taiList[i].PlmnId, taiList[i].Tac, context.AMF_Self().SupportTaiLists[i].Tac)
 		}
 
 		for i, tai := range ran.SupportedTAList {
@@ -634,20 +637,15 @@ func HandleNGSetupRequest(ran *context.AmfRan, message *ngapType.NGAPPDU) {
 
 	if cause.Present == ngapType.CausePresentNothing {
 		ngap_message.SendNGSetupResponse(ran)
-		// send nf(gnb) status notification
-		gnbStatus := mi.MetricEvent{
-			EventType: mi.CNfStatusEvt,
-			NfStatusData: mi.CNfStatus{
-				NfType:   mi.NfTypeGnb,
-				NfStatus: mi.NfStatusConnected, NfName: ran.GnbId,
-			},
-		}
-		if err := metrics.StatWriter.PublishNfStatusEvent(gnbStatus); err != nil {
-			ran.Log.Errorf("Could not publish NfStatusEvent: %v", err)
-		}
+		//send nf(gnb) status notification
+		gnbStatus := mi.MetricEvent{EventType: mi.CNfStatusEvt,
+			NfStatusData: mi.CNfStatus{NfType: mi.NfTypeGnb,
+				NfStatus: mi.NfStatusConnected, NfName: ran.GnbId}}
+		metrics.StatWriter.PublishNfStatusEvent(gnbStatus)
 	} else {
 		ngap_message.SendNGSetupFailure(ran, cause)
 	}
+
 }
 
 func HandleUplinkNasTransport(ran *context.AmfRan, message *ngapType.NGAPPDU) {
@@ -1089,7 +1087,7 @@ func HandleUEContextReleaseComplete(ran *context.AmfRan, message *ngapType.NGAPP
 			ran.Log.Errorln(err.Error())
 		}
 
-		// Valid Security is not exist for this UE then only delete AMfUe Context
+		//Valid Security is not exist for this UE then only delete AMfUe Context
 		if !amfUe.SecurityContextAvailable {
 			ran.Log.Infof("Valid Security is not exist for the UE[%s], so deleting AmfUe Context", amfUe.Supi)
 			amfUe.PublishUeCtxtInfo()
@@ -1421,7 +1419,9 @@ func HandleInitialUEMessage(ran *context.AmfRan, message *ngapType.NGAPPDU, sctp
 			return
 		}
 	}
-
+	ran.Log.Infof("===============================================")
+	ran.Log.Infof("################|UE DETECTED|##################")
+	ran.Log.Infof("===============================================")
 	ran.Log.Info("Handle Initial UE Message")
 
 	for _, ie := range initialUEMessage.ProtocolIEs.List {
@@ -1522,10 +1522,7 @@ func HandleInitialUEMessage(ran *context.AmfRan, message *ngapType.NGAPPDU, sctp
 			} else {
 				ranUe.Log.Tracef("find AmfUe [GUTI: %s]", guti)
 				/* checking the guti-ue belongs to this amf instance */
-				id, err := amfSelf.Drsm.FindOwnerInt32ID(amfUe.Tmsi)
-				if err != nil {
-					ranUe.Log.Errorf("Error checking the guti-ue in this instance: %v", err)
-				}
+				id, _ := amfSelf.Drsm.FindOwnerInt32ID(int32(amfUe.Tmsi))
 				if id != nil && id.PodName != os.Getenv("HOSTNAME") && amfSelf.EnableSctpLb {
 					rsp := &sdcoreAmfServer.AmfMessage{}
 					rsp.VerboseMsg = "Redirect Msg From AMF Pod !"
@@ -1538,9 +1535,7 @@ func HandleInitialUEMessage(ran *context.AmfRan, message *ngapType.NGAPPDU, sctp
 					if ranUe != nil && ranUe.AmfUe != nil {
 						ranUe.AmfUe.Remove()
 					} else if ranUe != nil {
-						if err := ranUe.Remove(); err != nil {
-							ranUe.Log.Errorf("Could not remove ranUe: %v", err)
-						}
+						ranUe.Remove()
 					}
 					ran.Amf2RanMsgChan <- rsp
 					return
@@ -1731,7 +1726,7 @@ func HandlePDUSessionResourceSetupResponse(ran *context.AmfRan, message *ngapTyp
 			}
 		}
 
-		// store context in DB. PDU Establishment is complete.
+		//store context in DB. PDU Establishment is complete.
 		amfUe.PublishUeCtxtInfo()
 		context.StoreContextInDB(amfUe)
 	}
@@ -2005,7 +2000,8 @@ func HandlePDUSessionResourceNotify(ran *context.AmfRan, message *ngapType.NGAPP
 					var nasPdu []byte
 					if n1Msg != nil {
 						pduSessionId := uint8(pduSessionID)
-						nasPdu, err = gmm_message.BuildDLNASTransport(amfUe, nasMessage.PayloadContainerTypeN1SMInfo, n1Msg, pduSessionId, nil, nil, 0)
+						nasPdu, err =
+							gmm_message.BuildDLNASTransport(amfUe, nasMessage.PayloadContainerTypeN1SMInfo, n1Msg, pduSessionId, nil, nil, 0)
 						if err != nil {
 							ranUe.Log.Warnf("GMM Message build DL NAS Transport filaed: %v", err)
 						}
@@ -3557,7 +3553,7 @@ func HandleHandoverRequired(ran *context.AmfRan, message *ngapType.NGAPPDU) {
 		ran.Log.Errorf("targetID type[%d] is not supported", targetID.Present)
 		return
 	}
-	amfUe.SetOnGoing(sourceUe.Ran.AnType, &context.OnGoingProcedureWithPrio{
+	amfUe.SetOnGoing(sourceUe.Ran.AnType, &context.OnGoing{
 		Procedure: context.OnGoingProcedureN2Handover,
 	})
 	if !amfUe.SecurityContextIsValid() {
@@ -4718,8 +4714,7 @@ func buildCriticalityDiagnostics(
 	triggeringMessage *aper.Enumerated,
 	procedureCriticality *aper.Enumerated,
 	iesCriticalityDiagnostics *ngapType.CriticalityDiagnosticsIEList) (
-	criticalityDiagnostics ngapType.CriticalityDiagnostics,
-) {
+	criticalityDiagnostics ngapType.CriticalityDiagnostics) {
 	if procedureCode != nil {
 		criticalityDiagnostics.ProcedureCode = new(ngapType.ProcedureCode)
 		criticalityDiagnostics.ProcedureCode.Value = *procedureCode
@@ -4743,8 +4738,7 @@ func buildCriticalityDiagnostics(
 }
 
 func buildCriticalityDiagnosticsIEItem(ieCriticality aper.Enumerated, ieID int64, typeOfErr aper.Enumerated) (
-	item ngapType.CriticalityDiagnosticsIEItem,
-) {
+	item ngapType.CriticalityDiagnosticsIEItem) {
 	item = ngapType.CriticalityDiagnosticsIEItem{
 		IECriticality: ngapType.Criticality{
 			Value: ieCriticality,
diff --git a/ngap/message/build.go b/ngap/message/build.go
index e265abf..be7270d 100644
--- a/ngap/message/build.go
+++ b/ngap/message/build.go
@@ -29,6 +29,7 @@ func IncrementNGAPMsgCount(pdu ngapType.NGAPPDU) {
 			"out",
 			"",
 			"")
+
 	} else if pdu.SuccessfulOutcome != nil {
 		metrics.IncrementNgapMsgStats(context.AMF_Self().NfId,
 			ngapmsgtypes.NgapMsg[pdu.SuccessfulOutcome.ProcedureCode.Value],
@@ -45,8 +46,7 @@ func IncrementNGAPMsgCount(pdu ngapType.NGAPPDU) {
 }
 
 func BuildPDUSessionResourceReleaseCommand(ue *context.RanUe, nasPdu []byte,
-	pduSessionResourceReleasedList ngapType.PDUSessionResourceToReleaseListRelCmd,
-) ([]byte, error) {
+	pduSessionResourceReleasedList ngapType.PDUSessionResourceToReleaseListRelCmd) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 	pdu.Present = ngapType.NGAPPDUPresentInitiatingMessage
 	pdu.InitiatingMessage = new(ngapType.InitiatingMessage)
@@ -220,8 +220,7 @@ func BuildNGSetupFailure(cause ngapType.Cause) ([]byte, error) {
 }
 
 func BuildNGReset(
-	cause ngapType.Cause, partOfNGInterface *ngapType.UEAssociatedLogicalNGConnectionList,
-) ([]byte, error) {
+	cause ngapType.Cause, partOfNGInterface *ngapType.UEAssociatedLogicalNGConnectionList) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 
 	logger.NgapLog.Trace("Build NG Reset message")
@@ -274,8 +273,7 @@ func BuildNGReset(
 }
 
 func BuildNGResetAcknowledge(partOfNGInterface *ngapType.UEAssociatedLogicalNGConnectionList,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 
 	pdu.Present = ngapType.NGAPPDUPresentSuccessfulOutcome
@@ -322,7 +320,8 @@ func BuildNGResetAcknowledge(partOfNGInterface *ngapType.UEAssociatedLogicalNGCo
 					"[Build NG Reset Ack] (pair %d) RanUeNgapID[%d]", i, uEAssociatedLogicalNGConnectionItem.RANUENGAPID)
 			}
 
-			uEAssociatedLogicalNGConnectionList.List = append(uEAssociatedLogicalNGConnectionList.List, uEAssociatedLogicalNGConnectionItem)
+			uEAssociatedLogicalNGConnectionList.List =
+				append(uEAssociatedLogicalNGConnectionList.List, uEAssociatedLogicalNGConnectionItem)
 		}
 
 		nGResetAcknowledgeIEs.List = append(nGResetAcknowledgeIEs.List, ie)
@@ -346,8 +345,7 @@ func BuildNGResetAcknowledge(partOfNGInterface *ngapType.UEAssociatedLogicalNGCo
 }
 
 func BuildDownlinkNasTransport(ue *context.RanUe, nasPdu []byte,
-	mobilityRestrictionList *ngapType.MobilityRestrictionList,
-) ([]byte, error) {
+	mobilityRestrictionList *ngapType.MobilityRestrictionList) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 
 	pdu.Present = ngapType.NGAPPDUPresentInitiatingMessage
@@ -436,8 +434,7 @@ func BuildDownlinkNasTransport(ue *context.RanUe, nasPdu []byte,
 }
 
 func BuildUEContextReleaseCommand(
-	ue *context.RanUe, causePresent int, cause aper.Enumerated,
-) ([]byte, error) {
+	ue *context.RanUe, causePresent int, cause aper.Enumerated) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 
 	pdu.Present = ngapType.NGAPPDUPresentInitiatingMessage
@@ -515,8 +512,7 @@ func BuildUEContextReleaseCommand(
 }
 
 func BuildErrorIndication(amfUeNgapId, ranUeNgapId *int64, cause *ngapType.Cause,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 
 	pdu.Present = ngapType.NGAPPDUPresentInitiatingMessage
@@ -637,8 +633,7 @@ func BuildUERadioCapabilityCheckRequest(ue *context.RanUe) ([]byte, error) {
 }
 
 func BuildHandoverCancelAcknowledge(
-	ue *context.RanUe, criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	ue *context.RanUe, criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 	pdu.Present = ngapType.NGAPPDUPresentSuccessfulOutcome
 	pdu.SuccessfulOutcome = new(ngapType.SuccessfulOutcome)
@@ -696,8 +691,7 @@ func BuildHandoverCancelAcknowledge(
 // nasPDU: from nas layer
 // pduSessionResourceSetupRequestList: provided by AMF, and transfer data is from SMF
 func BuildPDUSessionResourceSetupRequest(ue *context.RanUe, nasPdu []byte,
-	pduSessionResourceSetupRequestList ngapType.PDUSessionResourceSetupListSUReq,
-) ([]byte, error) {
+	pduSessionResourceSetupRequestList ngapType.PDUSessionResourceSetupListSUReq) ([]byte, error) {
 	// TODO: Ran Paging Priority (optional)
 
 	var pdu ngapType.NGAPPDU
@@ -783,8 +777,7 @@ func BuildPDUSessionResourceModifyConfirm(
 	ue *context.RanUe,
 	pduSessionResourceModifyConfirmList ngapType.PDUSessionResourceModifyListModCfm,
 	pduSessionResourceFailedToModifyList ngapType.PDUSessionResourceFailedToModifyListModCfm,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 	pdu.Present = ngapType.NGAPPDUPresentSuccessfulOutcome
 	pdu.SuccessfulOutcome = new(ngapType.SuccessfulOutcome)
@@ -857,8 +850,7 @@ func BuildPDUSessionResourceModifyConfirm(
 
 // pduSessionResourceModifyRequestList: from SMF
 func BuildPDUSessionResourceModifyRequest(ue *context.RanUe,
-	pduSessionResourceModifyRequestList ngapType.PDUSessionResourceModifyListModReq,
-) ([]byte, error) {
+	pduSessionResourceModifyRequestList ngapType.PDUSessionResourceModifyListModReq) ([]byte, error) {
 	// TODO: Ran Paging Priority (optional)
 
 	var pdu ngapType.NGAPPDU
@@ -920,8 +912,7 @@ func BuildInitialContextSetupRequest(
 	pduSessionResourceSetupRequestList *ngapType.PDUSessionResourceSetupListCxtReq,
 	rrcInactiveTransitionReportRequest *ngapType.RRCInactiveTransitionReportRequest,
 	coreNetworkAssistanceInfo *ngapType.CoreNetworkAssistanceInformation,
-	emergencyFallbackIndicator *ngapType.EmergencyFallbackIndicator,
-) ([]byte, error) {
+	emergencyFallbackIndicator *ngapType.EmergencyFallbackIndicator) ([]byte, error) {
 	// Old AMF: new amf should get old amf's amf name
 
 	// rrcInactiveTransitionReportRequest: configured by amf
@@ -1090,7 +1081,8 @@ func BuildInitialContextSetupRequest(
 	nrEncryptionAlgorighm[0] |= amfUe.UESecurityCapability.GetEA1_128_5G() << 7
 	nrEncryptionAlgorighm[0] |= amfUe.UESecurityCapability.GetEA2_128_5G() << 6
 	nrEncryptionAlgorighm[0] |= amfUe.UESecurityCapability.GetEA3_128_5G() << 5
-	ueSecurityCapabilities.NRencryptionAlgorithms.Value = ngapConvert.ByteToBitString(nrEncryptionAlgorighm, 16)
+	ueSecurityCapabilities.NRencryptionAlgorithms.Value =
+		ngapConvert.ByteToBitString(nrEncryptionAlgorighm, 16)
 
 	nrIntegrityAlgorithm := []byte{0x00, 0x00}
 
@@ -1098,14 +1090,17 @@ func BuildInitialContextSetupRequest(
 	nrIntegrityAlgorithm[0] |= amfUe.UESecurityCapability.GetIA2_128_5G() << 6
 	nrIntegrityAlgorithm[0] |= amfUe.UESecurityCapability.GetIA3_128_5G() << 5
 
-	ueSecurityCapabilities.NRintegrityProtectionAlgorithms.Value = ngapConvert.ByteToBitString(nrIntegrityAlgorithm, 16)
+	ueSecurityCapabilities.NRintegrityProtectionAlgorithms.Value =
+		ngapConvert.ByteToBitString(nrIntegrityAlgorithm, 16)
 
 	// only support NR algorithms
 	eutraEncryptionAlgorithm := []byte{0x00, 0x00}
-	ueSecurityCapabilities.EUTRAencryptionAlgorithms.Value = ngapConvert.ByteToBitString(eutraEncryptionAlgorithm, 16)
+	ueSecurityCapabilities.EUTRAencryptionAlgorithms.Value =
+		ngapConvert.ByteToBitString(eutraEncryptionAlgorithm, 16)
 
 	eutraIntegrityAlgorithm := []byte{0x00, 0x00}
-	ueSecurityCapabilities.EUTRAintegrityProtectionAlgorithms.Value = ngapConvert.ByteToBitString(eutraIntegrityAlgorithm, 16)
+	ueSecurityCapabilities.EUTRAintegrityProtectionAlgorithms.Value =
+		ngapConvert.ByteToBitString(eutraIntegrityAlgorithm, 16)
 
 	initialContextSetupRequestIEs.List = append(initialContextSetupRequestIEs.List, ie)
 
@@ -1254,13 +1249,15 @@ func BuildInitialContextSetupRequest(
 		uERadioCapabilityForPaging := ie.Value.UERadioCapabilityForPaging
 		var err error
 		if amfUe.UeRadioCapabilityForPaging.NR != "" {
-			uERadioCapabilityForPaging.UERadioCapabilityForPagingOfNR.Value, err = hex.DecodeString(amfUe.UeRadioCapabilityForPaging.NR)
+			uERadioCapabilityForPaging.UERadioCapabilityForPagingOfNR.Value, err =
+				hex.DecodeString(amfUe.UeRadioCapabilityForPaging.NR)
 			if err != nil {
 				logger.NgapLog.Errorf("[Build Error] DecodeString amfUe.UeRadioCapabilityForPaging.NR error: %+v", err)
 			}
 		}
 		if amfUe.UeRadioCapabilityForPaging.EUTRA != "" {
-			uERadioCapabilityForPaging.UERadioCapabilityForPagingOfEUTRA.Value, err = hex.DecodeString(amfUe.UeRadioCapabilityForPaging.EUTRA)
+			uERadioCapabilityForPaging.UERadioCapabilityForPagingOfEUTRA.Value, err =
+				hex.DecodeString(amfUe.UeRadioCapabilityForPaging.EUTRA)
 			if err != nil {
 				logger.NgapLog.Errorf("[Build Error] DecodeString amfUe.UeRadioCapabilityForPaging.NR error: %+v", err)
 			}
@@ -1279,8 +1276,7 @@ func BuildUEContextModificationRequest(
 	rrcInactiveTransitionReportRequest *ngapType.RRCInactiveTransitionReportRequest,
 	coreNetworkAssistanceInfo *ngapType.CoreNetworkAssistanceInformation,
 	mobilityRestrictionList *ngapType.MobilityRestrictionList,
-	emergencyFallbackIndicator *ngapType.EmergencyFallbackIndicator,
-) ([]byte, error) {
+	emergencyFallbackIndicator *ngapType.EmergencyFallbackIndicator) ([]byte, error) {
 	// accessType indicate amfUe send this msg for which accessType
 	// oldAmfUeNgapID: if amf allocate a new amf ue ngap id to amfUe, the caller should
 	// update the context by itself, and pass the old AmfUeNgapID to this function
@@ -1433,8 +1429,7 @@ func BuildHandoverCommand(
 	pduSessionResourceHandoverList ngapType.PDUSessionResourceHandoverList,
 	pduSessionResourceToReleaseList ngapType.PDUSessionResourceToReleaseListHOCmd,
 	container ngapType.TargetToSourceTransparentContainer,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 	pdu.Present = ngapType.NGAPPDUPresentSuccessfulOutcome
 	pdu.SuccessfulOutcome = new(ngapType.SuccessfulOutcome)
@@ -1540,8 +1535,7 @@ func BuildHandoverCommand(
 }
 
 func BuildHandoverPreparationFailure(sourceUe *context.RanUe, cause ngapType.Cause,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	// cause = initiate the Handover Cancel procedure with the appropriate value for the Cause IE.
 
 	// criticalityDiagnostics = criticalityDiagonstics IE in receiver node's error indication
@@ -1621,8 +1615,7 @@ a Nsmf_PDUSession_CreateSMContext Response(N2 SM Information (PDU Session ID, ca
 // set nsci to true, otherwise set to false
 func BuildHandoverRequest(ue *context.RanUe, cause ngapType.Cause,
 	pduSessionResourceSetupListHOReq ngapType.PDUSessionResourceSetupListHOReq,
-	sourceToTargetTransparentContainer ngapType.SourceToTargetTransparentContainer, nsci bool,
-) ([]byte, error) {
+	sourceToTargetTransparentContainer ngapType.SourceToTargetTransparentContainer, nsci bool) ([]byte, error) {
 	amfSelf := context.AMF_Self()
 	amfUe := ue.AmfUe
 	if amfUe == nil {
@@ -1710,14 +1703,17 @@ func BuildHandoverRequest(ue *context.RanUe, cause ngapType.Cause,
 	nrIntegrityAlgorithm[0] |= amfUe.UESecurityCapability.GetIA1_128_5G() << 7
 	nrIntegrityAlgorithm[0] |= amfUe.UESecurityCapability.GetIA2_128_5G() << 6
 	nrIntegrityAlgorithm[0] |= amfUe.UESecurityCapability.GetIA3_128_5G() << 5
-	ueSecurityCapabilities.NRintegrityProtectionAlgorithms.Value = ngapConvert.ByteToBitString(nrIntegrityAlgorithm, 16)
+	ueSecurityCapabilities.NRintegrityProtectionAlgorithms.Value =
+		ngapConvert.ByteToBitString(nrIntegrityAlgorithm, 16)
 
 	// only support NR algorithms
 	eutraEncryptionAlgorithm := []byte{0x00, 0x00}
-	ueSecurityCapabilities.EUTRAencryptionAlgorithms.Value = ngapConvert.ByteToBitString(eutraEncryptionAlgorithm, 16)
+	ueSecurityCapabilities.EUTRAencryptionAlgorithms.Value =
+		ngapConvert.ByteToBitString(eutraEncryptionAlgorithm, 16)
 
 	eutraIntegrityAlgorithm := []byte{0x00, 0x00}
-	ueSecurityCapabilities.EUTRAintegrityProtectionAlgorithms.Value = ngapConvert.ByteToBitString(eutraIntegrityAlgorithm, 16)
+	ueSecurityCapabilities.EUTRAintegrityProtectionAlgorithms.Value =
+		ngapConvert.ByteToBitString(eutraIntegrityAlgorithm, 16)
 
 	handoverRequestIEs.List = append(handoverRequestIEs.List, ie)
 
@@ -1844,8 +1840,7 @@ func BuildPathSwitchRequestAcknowledge(
 	newSecurityContextIndicator bool,
 	coreNetworkAssistanceInformation *ngapType.CoreNetworkAssistanceInformation,
 	rrcInactiveTransitionReportRequest *ngapType.RRCInactiveTransitionReportRequest,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	amfSelf := context.AMF_Self()
 
 	var pdu ngapType.NGAPPDU
@@ -1904,14 +1899,17 @@ func BuildPathSwitchRequestAcknowledge(
 	nrIntegrityAlgorithm[0] |= ue.AmfUe.UESecurityCapability.GetIA1_128_5G() << 7
 	nrIntegrityAlgorithm[0] |= ue.AmfUe.UESecurityCapability.GetIA2_128_5G() << 6
 	nrIntegrityAlgorithm[0] |= ue.AmfUe.UESecurityCapability.GetIA3_128_5G() << 5
-	ueSecurityCapabilities.NRintegrityProtectionAlgorithms.Value = ngapConvert.ByteToBitString(nrIntegrityAlgorithm, 16)
+	ueSecurityCapabilities.NRintegrityProtectionAlgorithms.Value =
+		ngapConvert.ByteToBitString(nrIntegrityAlgorithm, 16)
 
 	// only support NR algorithms
 	eutraEncryptionAlgorithm := []byte{0x00, 0x00}
-	ueSecurityCapabilities.EUTRAencryptionAlgorithms.Value = ngapConvert.ByteToBitString(eutraEncryptionAlgorithm, 16)
+	ueSecurityCapabilities.EUTRAencryptionAlgorithms.Value =
+		ngapConvert.ByteToBitString(eutraEncryptionAlgorithm, 16)
 
 	eutraIntegrityAlgorithm := []byte{0x00, 0x00}
-	ueSecurityCapabilities.EUTRAintegrityProtectionAlgorithms.Value = ngapConvert.ByteToBitString(eutraIntegrityAlgorithm, 16)
+	ueSecurityCapabilities.EUTRAintegrityProtectionAlgorithms.Value =
+		ngapConvert.ByteToBitString(eutraIntegrityAlgorithm, 16)
 
 	pathSwitchRequestAckIEs.List = append(pathSwitchRequestAckIEs.List, ie)
 
@@ -2015,8 +2013,7 @@ func BuildPathSwitchRequestFailure(
 	amfUeNgapId,
 	ranUeNgapId int64,
 	pduSessionResourceReleasedList *ngapType.PDUSessionResourceReleasedListPSFail,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 	pdu.Present = ngapType.NGAPPDUPresentUnsuccessfulOutcome
 	pdu.UnsuccessfulOutcome = new(ngapType.UnsuccessfulOutcome)
@@ -2078,8 +2075,7 @@ func BuildPathSwitchRequestFailure(
 }
 
 func BuildDownlinkRanStatusTransfer(ue *context.RanUe,
-	ranStatusTransferTransparentContainer ngapType.RANStatusTransferTransparentContainer,
-) ([]byte, error) {
+	ranStatusTransferTransparentContainer ngapType.RANStatusTransferTransparentContainer) ([]byte, error) {
 	// ranStatusTransferTransparentContainer from Uplink Ran Configuration Transfer
 	var pdu ngapType.NGAPPDU
 
@@ -2144,8 +2140,7 @@ func BuildDownlinkRanStatusTransfer(ue *context.RanUe,
 // NG-RAN node(s) via 3GPP access.
 // more paging policy with 3gpp/non-3gpp access is described in TS 23.501 5.6.8
 func BuildPaging(
-	ue *context.AmfUe, pagingPriority *ngapType.PagingPriority, pagingOriginNon3GPP bool,
-) ([]byte, error) {
+	ue *context.AmfUe, pagingPriority *ngapType.PagingPriority, pagingOriginNon3GPP bool) ([]byte, error) {
 	// TODO: Paging DRX (optional)
 
 	var pdu ngapType.NGAPPDU
@@ -2242,14 +2237,16 @@ func BuildPaging(
 		ie.Value.UERadioCapabilityForPaging = new(ngapType.UERadioCapabilityForPaging)
 		uERadioCapabilityForPaging := ie.Value.UERadioCapabilityForPaging
 		if ue.UeRadioCapabilityForPaging.NR != "" {
-			uERadioCapabilityForPaging.UERadioCapabilityForPagingOfNR.Value, err = hex.DecodeString(ue.UeRadioCapabilityForPaging.NR)
+			uERadioCapabilityForPaging.UERadioCapabilityForPagingOfNR.Value, err =
+				hex.DecodeString(ue.UeRadioCapabilityForPaging.NR)
 			if err != nil {
 				logger.NgapLog.Errorf(
 					"[Build Error] DecodeString ue.UeRadioCapabilityForPaging.NR error: %+v", err)
 			}
 		}
 		if ue.UeRadioCapabilityForPaging.EUTRA != "" {
-			uERadioCapabilityForPaging.UERadioCapabilityForPagingOfEUTRA.Value, err = hex.DecodeString(ue.UeRadioCapabilityForPaging.EUTRA)
+			uERadioCapabilityForPaging.UERadioCapabilityForPagingOfEUTRA.Value, err =
+				hex.DecodeString(ue.UeRadioCapabilityForPaging.EUTRA)
 			if err != nil {
 				logger.NgapLog.Errorf("[Build Error] DecodeString ue.UeRadioCapabilityForPaging.EUTRA error: %+v", err)
 			}
@@ -2266,7 +2263,8 @@ func BuildPaging(
 		ie.Value.AssistanceDataForPaging = new(ngapType.AssistanceDataForPaging)
 
 		assistanceDataForPaging := ie.Value.AssistanceDataForPaging
-		assistanceDataForPaging.AssistanceDataForRecommendedCells = new(ngapType.AssistanceDataForRecommendedCells)
+		assistanceDataForPaging.AssistanceDataForRecommendedCells =
+			new(ngapType.AssistanceDataForRecommendedCells)
 		recommendedCellList := &assistanceDataForPaging.
 			AssistanceDataForRecommendedCells.RecommendedCellsForPaging.RecommendedCellList
 
@@ -2284,7 +2282,8 @@ func BuildPaging(
 				recommendedCellItem.NGRANCGI.EUTRACGI = new(ngapType.EUTRACGI)
 				eutraCGI := recommendedCellItem.NGRANCGI.EUTRACGI
 				eutraCGI.PLMNIdentity = ngapConvert.PlmnIdToNgap(*recommendedCell.NgRanCGI.EUTRACGI.PlmnId)
-				eutraCGI.EUTRACellIdentity.Value = ngapConvert.HexToBitString(recommendedCell.NgRanCGI.EUTRACGI.EutraCellId, 28)
+				eutraCGI.EUTRACellIdentity.Value =
+					ngapConvert.HexToBitString(recommendedCell.NgRanCGI.EUTRACGI.EutraCellId, 28)
 			}
 
 			if recommendedCell.TimeStayedInCell != nil {
@@ -2318,8 +2317,7 @@ func BuildPaging(
 // ngapMessage: initial UE Message to reroute
 // allowedNSSAI: provided by AMF, and AMF get it from NSSF (4.2.2.2.3 step 4b)
 func BuildRerouteNasRequest(ue *context.AmfUe, anType models.AccessType, amfUeNgapID *int64,
-	ngapMessage []byte, allowedNSSAI *ngapType.AllowedNSSAI,
-) ([]byte, error) {
+	ngapMessage []byte, allowedNSSAI *ngapType.AllowedNSSAI) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 
 	pdu.Present = ngapType.NGAPPDUPresentInitiatingMessage
@@ -2411,8 +2409,7 @@ func BuildRerouteNasRequest(ue *context.AmfUe, anType models.AccessType, amfUeNg
 }
 
 func BuildRanConfigurationUpdateAcknowledge(
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	// criticality ->from received node when received node can't comprehend the IE or missing IE
 
 	var pdu ngapType.NGAPPDU
@@ -2445,8 +2442,7 @@ func BuildRanConfigurationUpdateAcknowledge(
 }
 
 func BuildRanConfigurationUpdateFailure(
-	cause ngapType.Cause, criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) ([]byte, error) {
+	cause ngapType.Cause, criticalityDiagnostics *ngapType.CriticalityDiagnostics) ([]byte, error) {
 	// criticality ->from received node when received node can't comprehend the IE or missing IE
 	// If the AMF cannot accept the update,
 	// it shall respond with a RAN CONFIGURATION UPDATE FAILURE message and appropriate cause value.
@@ -2548,8 +2544,7 @@ func BuildAMFStatusIndication(unavailableGUAMIList ngapType.UnavailableGUAMIList
 func BuildOverloadStart(
 	amfOverloadResponse *ngapType.OverloadResponse,
 	amfTrafficLoadReductionIndication int64,
-	overloadStartNSSAIList *ngapType.OverloadStartNSSAIList,
-) ([]byte, error) {
+	overloadStartNSSAIList *ngapType.OverloadStartNSSAIList) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 	pdu.Present = ngapType.NGAPPDUPresentInitiatingMessage
 	pdu.InitiatingMessage = new(ngapType.InitiatingMessage)
@@ -2617,8 +2612,7 @@ func BuildOverloadStop() ([]byte, error) {
 }
 
 func BuildDownlinkRanConfigurationTransfer(
-	sONConfigurationTransfer *ngapType.SONConfigurationTransfer,
-) ([]byte, error) {
+	sONConfigurationTransfer *ngapType.SONConfigurationTransfer) ([]byte, error) {
 	// sONConfigurationTransfer = sONConfigurationTransfer from uplink Ran Configuration Transfer
 
 	var pdu ngapType.NGAPPDU
@@ -2651,8 +2645,7 @@ func BuildDownlinkRanConfigurationTransfer(
 }
 
 func BuildDownlinkNonUEAssociatedNRPPATransport(
-	ue *context.RanUe, nRPPaPDU ngapType.NRPPaPDU,
-) ([]byte, error) {
+	ue *context.RanUe, nRPPaPDU ngapType.NRPPaPDU) ([]byte, error) {
 	// NRPPa PDU is by pass
 	// NRPPa PDU is from LMF define in 4.13.5.6
 
@@ -2665,7 +2658,8 @@ func BuildDownlinkNonUEAssociatedNRPPATransport(
 	initiatingMessage.Criticality.Value = ngapType.CriticalityPresentIgnore
 
 	initiatingMessage.Value.Present = ngapType.InitiatingMessagePresentDownlinkNonUEAssociatedNRPPaTransport
-	initiatingMessage.Value.DownlinkNonUEAssociatedNRPPaTransport = new(ngapType.DownlinkNonUEAssociatedNRPPaTransport)
+	initiatingMessage.Value.DownlinkNonUEAssociatedNRPPaTransport =
+		new(ngapType.DownlinkNonUEAssociatedNRPPaTransport)
 
 	downlinkNonUEAssociatedNRPPaTransport := initiatingMessage.Value.DownlinkNonUEAssociatedNRPPaTransport
 	downlinkNonUEAssociatedNRPPaTransportIEs := &downlinkNonUEAssociatedNRPPaTransport.ProtocolIEs
@@ -2804,8 +2798,7 @@ func BuildLocationReportingControl(
 	ue *context.RanUe,
 	AOIList *ngapType.AreaOfInterestList,
 	LocationReportingReferenceIDToBeCancelled int64,
-	eventType ngapType.EventType,
-) ([]byte, error) {
+	eventType ngapType.EventType) ([]byte, error) {
 	var pdu ngapType.NGAPPDU
 
 	pdu.Present = ngapType.NGAPPDUPresentInitiatingMessage
@@ -2870,8 +2863,10 @@ func BuildLocationReportingControl(
 	// location reference ID to be Cancelled [Conditional]
 	if locationReportingRequestType.EventType.Value ==
 		ngapType.EventTypePresentStopUePresenceInAreaOfInterest {
-		locationReportingRequestType.LocationReportingReferenceIDToBeCancelled = new(ngapType.LocationReportingReferenceID)
-		locationReportingRequestType.LocationReportingReferenceIDToBeCancelled.Value = LocationReportingReferenceIDToBeCancelled
+		locationReportingRequestType.LocationReportingReferenceIDToBeCancelled =
+			new(ngapType.LocationReportingReferenceID)
+		locationReportingRequestType.LocationReportingReferenceIDToBeCancelled.Value =
+			LocationReportingReferenceIDToBeCancelled
 	}
 
 	locationReportingControlIEs.List = append(locationReportingControlIEs.List, ie)
@@ -2926,8 +2921,7 @@ func BuildUETNLABindingReleaseRequest(ue *context.RanUe) ([]byte, error) {
 
 // Weight Factor associated with each of the TNL association within the AMF
 func BuildAMFConfigurationUpdate(tNLassociationUsage ngapType.TNLAssociationUsage,
-	tNLAddressWeightFactor ngapType.TNLAddressWeightFactor,
-) ([]byte, error) {
+	tNLAddressWeightFactor ngapType.TNLAddressWeightFactor) ([]byte, error) {
 	amfSelf := context.AMF_Self()
 	var pdu ngapType.NGAPPDU
 
@@ -3000,7 +2994,8 @@ func BuildAMFConfigurationUpdate(tNLassociationUsage ngapType.TNLAssociationUsag
 		for _, snssai := range plmnItem.SNssaiList {
 			sliceSupportItem := ngapType.SliceSupportItem{}
 			sliceSupportItem.SNSSAI = ngapConvert.SNssaiToNgap(snssai)
-			pLMNSupportItem.SliceSupportList.List = append(pLMNSupportItem.SliceSupportList.List, sliceSupportItem)
+			pLMNSupportItem.SliceSupportList.List =
+				append(pLMNSupportItem.SliceSupportList.List, sliceSupportItem)
 		}
 		pLMNSupportList.List = append(pLMNSupportList.List, pLMNSupportItem)
 	}
@@ -3018,9 +3013,12 @@ func BuildAMFConfigurationUpdate(tNLassociationUsage ngapType.TNLAssociationUsag
 
 	//	AMFTNLAssociationToAddItem in AMFTNLAssociationToAddList
 	aMFTNLAssociationToAddItem := ngapType.AMFTNLAssociationToAddItem{}
-	aMFTNLAssociationToAddItem.AMFTNLAssociationAddress.Present = ngapType.CPTransportLayerInformationPresentEndpointIPAddress
-	aMFTNLAssociationToAddItem.AMFTNLAssociationAddress.EndpointIPAddress = new(ngapType.TransportLayerAddress)
-	*aMFTNLAssociationToAddItem.AMFTNLAssociationAddress.EndpointIPAddress = ngapConvert.IPAddressToNgap(amfSelf.RegisterIPv4, amfSelf.HttpIPv6Address)
+	aMFTNLAssociationToAddItem.AMFTNLAssociationAddress.Present =
+		ngapType.CPTransportLayerInformationPresentEndpointIPAddress
+	aMFTNLAssociationToAddItem.AMFTNLAssociationAddress.EndpointIPAddress =
+		new(ngapType.TransportLayerAddress)
+	*aMFTNLAssociationToAddItem.AMFTNLAssociationAddress.EndpointIPAddress =
+		ngapConvert.IPAddressToNgap(amfSelf.RegisterIPv4, amfSelf.HttpIPv6Address)
 
 	//	AMF TNL Association Usage[optional]
 	if aMFTNLAssociationToAddItem.TNLAssociationUsage != nil {
@@ -3045,9 +3043,12 @@ func BuildAMFConfigurationUpdate(tNLassociationUsage ngapType.TNLAssociationUsag
 
 	//	AMFTNLAssociationToRemoveItem
 	aMFTNLAssociationToRemoveItem := ngapType.AMFTNLAssociationToRemoveItem{}
-	aMFTNLAssociationToRemoveItem.AMFTNLAssociationAddress.Present = ngapType.CPTransportLayerInformationPresentEndpointIPAddress
-	aMFTNLAssociationToRemoveItem.AMFTNLAssociationAddress.EndpointIPAddress = new(ngapType.TransportLayerAddress)
-	*aMFTNLAssociationToRemoveItem.AMFTNLAssociationAddress.EndpointIPAddress = ngapConvert.IPAddressToNgap(amfSelf.RegisterIPv4, amfSelf.HttpIPv6Address)
+	aMFTNLAssociationToRemoveItem.AMFTNLAssociationAddress.Present =
+		ngapType.CPTransportLayerInformationPresentEndpointIPAddress
+	aMFTNLAssociationToRemoveItem.AMFTNLAssociationAddress.EndpointIPAddress =
+		new(ngapType.TransportLayerAddress)
+	*aMFTNLAssociationToRemoveItem.AMFTNLAssociationAddress.EndpointIPAddress =
+		ngapConvert.IPAddressToNgap(amfSelf.RegisterIPv4, amfSelf.HttpIPv6Address)
 
 	aMFTNLAssociationToRemoveList.List = append(aMFTNLAssociationToRemoveList.List, aMFTNLAssociationToRemoveItem)
 	aMFConfigurationUpdateIEs.List = append(aMFConfigurationUpdateIEs.List, ie)
@@ -3063,9 +3064,12 @@ func BuildAMFConfigurationUpdate(tNLassociationUsage ngapType.TNLAssociationUsag
 
 	//	AMFTNLAssociationAddress in AMFTNLAssociationtoUpdateItem
 	aMFTNLAssociationToUpdateItem := ngapType.AMFTNLAssociationToUpdateItem{}
-	aMFTNLAssociationToUpdateItem.AMFTNLAssociationAddress.Present = ngapType.CPTransportLayerInformationPresentEndpointIPAddress
-	aMFTNLAssociationToUpdateItem.AMFTNLAssociationAddress.EndpointIPAddress = new(ngapType.TransportLayerAddress)
-	*aMFTNLAssociationToUpdateItem.AMFTNLAssociationAddress.EndpointIPAddress = ngapConvert.IPAddressToNgap(amfSelf.RegisterIPv4, amfSelf.HttpIPv6Address)
+	aMFTNLAssociationToUpdateItem.AMFTNLAssociationAddress.Present =
+		ngapType.CPTransportLayerInformationPresentEndpointIPAddress
+	aMFTNLAssociationToUpdateItem.AMFTNLAssociationAddress.EndpointIPAddress =
+		new(ngapType.TransportLayerAddress)
+	*aMFTNLAssociationToUpdateItem.AMFTNLAssociationAddress.EndpointIPAddress =
+		ngapConvert.IPAddressToNgap(amfSelf.RegisterIPv4, amfSelf.HttpIPv6Address)
 
 	//	TNLAssociationUsage in AMFTNLAssociationtoUpdateItem [optional]
 	if aMFTNLAssociationToUpdateItem.TNLAssociationUsage != nil {
diff --git a/ngap/message/forward_ie.go b/ngap/message/forward_ie.go
index 7406a58..25bf815 100644
--- a/ngap/message/forward_ie.go
+++ b/ngap/message/forward_ie.go
@@ -16,8 +16,7 @@ import (
 )
 
 func AppendPDUSessionResourceSetupListSUReq(list *ngapType.PDUSessionResourceSetupListSUReq,
-	pduSessionId int32, snssai models.Snssai, nasPDU []byte, transfer []byte,
-) {
+	pduSessionId int32, snssai models.Snssai, nasPDU []byte, transfer []byte) {
 	var item ngapType.PDUSessionResourceSetupItemSUReq
 	item.PDUSessionID.Value = int64(pduSessionId)
 	item.SNSSAI = ngapConvert.SNssaiToNgap(snssai)
@@ -30,8 +29,7 @@ func AppendPDUSessionResourceSetupListSUReq(list *ngapType.PDUSessionResourceSet
 }
 
 func AppendPDUSessionResourceSetupListHOReq(list *ngapType.PDUSessionResourceSetupListHOReq,
-	pduSessionId int32, snssai models.Snssai, transfer []byte,
-) {
+	pduSessionId int32, snssai models.Snssai, transfer []byte) {
 	var item ngapType.PDUSessionResourceSetupItemHOReq
 	item.PDUSessionID.Value = int64(pduSessionId)
 	item.SNSSAI = ngapConvert.SNssaiToNgap(snssai)
@@ -40,8 +38,7 @@ func AppendPDUSessionResourceSetupListHOReq(list *ngapType.PDUSessionResourceSet
 }
 
 func AppendPDUSessionResourceSetupListCxtReq(list *ngapType.PDUSessionResourceSetupListCxtReq,
-	pduSessionId int32, snssai models.Snssai, nasPDU []byte, transfer []byte,
-) {
+	pduSessionId int32, snssai models.Snssai, nasPDU []byte, transfer []byte) {
 	var item ngapType.PDUSessionResourceSetupItemCxtReq
 	item.PDUSessionID.Value = int64(pduSessionId)
 	item.SNSSAI = ngapConvert.SNssaiToNgap(snssai)
@@ -54,8 +51,7 @@ func AppendPDUSessionResourceSetupListCxtReq(list *ngapType.PDUSessionResourceSe
 }
 
 func AppendPDUSessionResourceModifyListModReq(list *ngapType.PDUSessionResourceModifyListModReq,
-	pduSessionId int32, nasPDU []byte, transfer []byte,
-) {
+	pduSessionId int32, nasPDU []byte, transfer []byte) {
 	var item ngapType.PDUSessionResourceModifyItemModReq
 	item.PDUSessionID.Value = int64(pduSessionId)
 	item.PDUSessionResourceModifyRequestTransfer = transfer
@@ -67,8 +63,7 @@ func AppendPDUSessionResourceModifyListModReq(list *ngapType.PDUSessionResourceM
 }
 
 func AppendPDUSessionResourceModifyListModCfm(list *ngapType.PDUSessionResourceModifyListModCfm,
-	pduSessionId int64, transfer []byte,
-) {
+	pduSessionId int64, transfer []byte) {
 	var item ngapType.PDUSessionResourceModifyItemModCfm
 	item.PDUSessionID.Value = pduSessionId
 	item.PDUSessionResourceModifyConfirmTransfer = transfer
@@ -76,8 +71,7 @@ func AppendPDUSessionResourceModifyListModCfm(list *ngapType.PDUSessionResourceM
 }
 
 func AppendPDUSessionResourceFailedToModifyListModCfm(list *ngapType.PDUSessionResourceFailedToModifyListModCfm,
-	pduSessionId int64, transfer []byte,
-) {
+	pduSessionId int64, transfer []byte) {
 	var item ngapType.PDUSessionResourceFailedToModifyItemModCfm
 	item.PDUSessionID.Value = pduSessionId
 	item.PDUSessionResourceModifyIndicationUnsuccessfulTransfer = transfer
@@ -85,8 +79,7 @@ func AppendPDUSessionResourceFailedToModifyListModCfm(list *ngapType.PDUSessionR
 }
 
 func AppendPDUSessionResourceToReleaseListRelCmd(list *ngapType.PDUSessionResourceToReleaseListRelCmd,
-	pduSessionId int32, transfer []byte,
-) {
+	pduSessionId int32, transfer []byte) {
 	var item ngapType.PDUSessionResourceToReleaseItemRelCmd
 	item.PDUSessionID.Value = int64(pduSessionId)
 	item.PDUSessionResourceReleaseCommandTransfer = transfer
diff --git a/ngap/message/send.go b/ngap/message/send.go
index 52d3d5d..dd6a615 100644
--- a/ngap/message/send.go
+++ b/ngap/message/send.go
@@ -9,12 +9,17 @@ import (
 	"os"
 
 	"github.com/omec-project/amf/context"
+	// ngapf "github.com/omec-project/amf/context"
+	// gmms "github.com/omec-project/amf/gmm"
+
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer/callback"
 	"github.com/omec-project/amf/protos/sdcoreAmfServer"
 	"github.com/omec-project/aper"
 	"github.com/omec-project/ngap/ngapType"
 	"github.com/omec-project/openapi/models"
+	// "git.cs.nctu.edu.tw/calee/sctp"
+	// "github.com/omec-project/util_3gpp/suci"
 )
 
 func SendToRan(ran *context.AmfRan, packet []byte) {
@@ -63,6 +68,7 @@ func SendToRan(ran *context.AmfRan, packet []byte) {
 			ran.Log.Debugf("Write %d bytes", n)
 		}
 	}
+
 }
 
 func SendToRanUe(ue *context.RanUe, packet []byte) {
@@ -130,8 +136,7 @@ func SendNGSetupFailure(ran *context.AmfRan, cause ngapType.Cause) {
 
 // partOfNGInterface: if reset type is "reset all", set it to nil TS 38.413 9.2.6.11
 func SendNGReset(ran *context.AmfRan, cause ngapType.Cause,
-	partOfNGInterface *ngapType.UEAssociatedLogicalNGConnectionList,
-) {
+	partOfNGInterface *ngapType.UEAssociatedLogicalNGConnectionList) {
 	ran.Log.Info("Send NG Reset")
 
 	pkt, err := BuildNGReset(cause, partOfNGInterface)
@@ -143,8 +148,7 @@ func SendNGReset(ran *context.AmfRan, cause ngapType.Cause,
 }
 
 func SendNGResetAcknowledge(ran *context.AmfRan, partOfNGInterface *ngapType.UEAssociatedLogicalNGConnectionList,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) {
 	ran.Log.Info("Send NG Reset Acknowledge")
 
 	if partOfNGInterface != nil && len(partOfNGInterface.List) == 0 {
@@ -161,8 +165,7 @@ func SendNGResetAcknowledge(ran *context.AmfRan, partOfNGInterface *ngapType.UEA
 }
 
 func SendDownlinkNasTransport(ue *context.RanUe, nasPdu []byte,
-	mobilityRestrictionList *ngapType.MobilityRestrictionList,
-) {
+	mobilityRestrictionList *ngapType.MobilityRestrictionList) {
 	if ue == nil {
 		logger.NgapLog.Error("RanUe is nil")
 		return
@@ -183,8 +186,7 @@ func SendDownlinkNasTransport(ue *context.RanUe, nasPdu []byte,
 }
 
 func SendPDUSessionResourceReleaseCommand(ue *context.RanUe, nasPdu []byte,
-	pduSessionResourceReleasedList ngapType.PDUSessionResourceToReleaseListRelCmd,
-) {
+	pduSessionResourceReleasedList ngapType.PDUSessionResourceToReleaseListRelCmd) {
 	if ue == nil {
 		logger.NgapLog.Error("RanUe is nil")
 		return
@@ -226,8 +228,7 @@ func SendUEContextReleaseCommand(ue *context.RanUe, action context.RelAction, ca
 }
 
 func SendErrorIndication(ran *context.AmfRan, amfUeNgapId, ranUeNgapId *int64, cause *ngapType.Cause,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) {
 	if ran == nil {
 		logger.NgapLog.Error("Ran is nil")
 		return
@@ -278,15 +279,24 @@ func SendHandoverCancelAcknowledge(ue *context.RanUe, criticalityDiagnostics *ng
 // nasPDU: from nas layer
 // pduSessionResourceSetupRequestList: provided by AMF, and transfer data is from SMF
 func SendPDUSessionResourceSetupRequest(ue *context.RanUe, nasPdu []byte,
-	pduSessionResourceSetupRequestList ngapType.PDUSessionResourceSetupListSUReq,
-) {
+	pduSessionResourceSetupRequestList ngapType.PDUSessionResourceSetupListSUReq) {
 	if ue == nil {
 		logger.NgapLog.Error("RanUe is nil")
 		return
 	}
-
+	ue.Log.Infof("===============================================")
+	ue.Log.Infof("################|PDU CREATED|##################")
+	ue.Log.Infof("===============================================")
 	ue.Log.Info("Send PDU Session Resource Setup Request")
-
+	logger.NgapLog.Infof("+--------------------+---------------------------+")
+	logger.NgapLog.Infof("|%-16s|%-31d|", "AMF_UE_NGAP_ID", ue.AmfUeNgapId)
+	// logger.NgapLog.Infof("|%-16s|1-37s|", "GNB_IP", ue.Ran.GnbIp)
+	logger.NgapLog.Infof("|%-16s|%-31s|", "IMSI", ue.AmfUe.Supi)
+	logger.NgapLog.Infof("|%-16s|%-31s|", "MCC", ue.AmfUe.PlmnId.Mcc)
+	logger.NgapLog.Infof("|%-16s|%-31s|", "MNC", ue.AmfUe.PlmnId.Mnc)
+	// logger.NgapLog.Infof("|%-16s|1-37s|", "SUCI", ue.AmfUe.Suci)
+	logger.NgapLog.Infof("|%-16s|%-31s|", "TAC", ue.AmfUe.Tai.Tac)
+	logger.NgapLog.Infof("+--------------------+---------------------------+")
 	if len(pduSessionResourceSetupRequestList.List) > context.MaxNumOfPDUSessions {
 		ue.Log.Error("Pdu List out of range")
 		return
@@ -306,8 +316,7 @@ func SendPDUSessionResourceModifyConfirm(
 	ue *context.RanUe,
 	pduSessionResourceModifyConfirmList ngapType.PDUSessionResourceModifyListModCfm,
 	pduSessionResourceFailedToModifyList ngapType.PDUSessionResourceFailedToModifyListModCfm,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) {
 	if ue == nil {
 		logger.NgapLog.Error("RanUe is nil")
 		return
@@ -336,8 +345,7 @@ func SendPDUSessionResourceModifyConfirm(
 
 // pduSessionResourceModifyRequestList: from SMF
 func SendPDUSessionResourceModifyRequest(ue *context.RanUe,
-	pduSessionResourceModifyRequestList ngapType.PDUSessionResourceModifyListModReq,
-) {
+	pduSessionResourceModifyRequestList ngapType.PDUSessionResourceModifyListModReq) {
 	if ue == nil {
 		logger.NgapLog.Error("RanUe is nil")
 		return
@@ -365,8 +373,7 @@ func SendInitialContextSetupRequest(
 	pduSessionResourceSetupRequestList *ngapType.PDUSessionResourceSetupListCxtReq,
 	rrcInactiveTransitionReportRequest *ngapType.RRCInactiveTransitionReportRequest,
 	coreNetworkAssistanceInfo *ngapType.CoreNetworkAssistanceInformation,
-	emergencyFallbackIndicator *ngapType.EmergencyFallbackIndicator,
-) {
+	emergencyFallbackIndicator *ngapType.EmergencyFallbackIndicator) {
 	if amfUe == nil {
 		logger.NgapLog.Error("AmfUe is nil")
 		return
@@ -398,8 +405,7 @@ func SendUEContextModificationRequest(
 	rrcInactiveTransitionReportRequest *ngapType.RRCInactiveTransitionReportRequest,
 	coreNetworkAssistanceInfo *ngapType.CoreNetworkAssistanceInformation,
 	mobilityRestrictionList *ngapType.MobilityRestrictionList,
-	emergencyFallbackIndicator *ngapType.EmergencyFallbackIndicator,
-) {
+	emergencyFallbackIndicator *ngapType.EmergencyFallbackIndicator) {
 	if amfUe == nil {
 		logger.NgapLog.Error("AmfUe is nil")
 		return
@@ -425,8 +431,7 @@ func SendHandoverCommand(
 	pduSessionResourceHandoverList ngapType.PDUSessionResourceHandoverList,
 	pduSessionResourceToReleaseList ngapType.PDUSessionResourceToReleaseListHOCmd,
 	container ngapType.TargetToSourceTransparentContainer,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) {
 	if sourceUe == nil {
 		logger.NgapLog.Error("SourceUe is nil")
 		return
@@ -457,8 +462,7 @@ func SendHandoverCommand(
 // criticalityDiagnostics = criticalityDiagonstics IE in receiver node's error indication
 // when received node can't comprehend the IE or missing IE
 func SendHandoverPreparationFailure(sourceUe *context.RanUe, cause ngapType.Cause,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) {
 	if sourceUe == nil {
 		logger.NgapLog.Error("SourceUe is nil")
 		return
@@ -471,7 +475,7 @@ func SendHandoverPreparationFailure(sourceUe *context.RanUe, cause ngapType.Caus
 		sourceUe.Log.Error("amfUe is nil")
 		return
 	}
-	amfUe.SetOnGoing(sourceUe.Ran.AnType, &context.OnGoingProcedureWithPrio{
+	amfUe.SetOnGoing(sourceUe.Ran.AnType, &context.OnGoing{
 		Procedure: context.OnGoingProcedureNothing,
 	})
 	pkt, err := BuildHandoverPreparationFailure(sourceUe, cause, criticalityDiagnostics)
@@ -491,8 +495,7 @@ a Nsmf_PDUSession_CreateSMContext Response(N2 SM Information (PDU Session ID, ca
 // N2 handover in same AMF
 func SendHandoverRequest(sourceUe *context.RanUe, targetRan *context.AmfRan, cause ngapType.Cause,
 	pduSessionResourceSetupListHOReq ngapType.PDUSessionResourceSetupListHOReq,
-	sourceToTargetTransparentContainer ngapType.SourceToTargetTransparentContainer, nsci bool,
-) {
+	sourceToTargetTransparentContainer ngapType.SourceToTargetTransparentContainer, nsci bool) {
 	if sourceUe == nil {
 		logger.NgapLog.Error("sourceUe is nil")
 		return
@@ -561,8 +564,7 @@ func SendPathSwitchRequestAcknowledge(
 	newSecurityContextIndicator bool,
 	coreNetworkAssistanceInformation *ngapType.CoreNetworkAssistanceInformation,
 	rrcInactiveTransitionReportRequest *ngapType.RRCInactiveTransitionReportRequest,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) {
 	if ue == nil {
 		logger.NgapLog.Error("RanUe is nil")
 		return
@@ -597,8 +599,7 @@ func SendPathSwitchRequestFailure(
 	amfUeNgapId,
 	ranUeNgapId int64,
 	pduSessionResourceReleasedList *ngapType.PDUSessionResourceReleasedListPSFail,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) {
 	ran.Log.Info("Send Path Switch Request Failure")
 
 	if pduSessionResourceReleasedList != nil && len(pduSessionResourceReleasedList.List) > context.MaxNumOfPDUSessions {
@@ -693,7 +694,7 @@ func SendPaging(ue *context.AmfUe, ngapBuf []byte) {
 		}, func() {
 			ue.GmmLog.Warnf("T3513 expires %d times, abort paging procedure", cfg.MaxRetryTimes)
 			ue.T3513 = nil // clear the timer
-			if ue.GetOnGoing(models.AccessType__3_GPP_ACCESS).Procedure != context.OnGoingProcedureN2Handover {
+			if ue.OnGoing(models.AccessType__3_GPP_ACCESS).Procedure != context.OnGoingProcedureN2Handover {
 				callback.SendN1N2TransferFailureNotification(ue, models.N1N2MessageTransferCause_UE_NOT_RESPONDING)
 			}
 		})
@@ -706,8 +707,7 @@ func SendPaging(ue *context.AmfUe, ngapBuf []byte) {
 // ngapMessage: initial UE Message to reroute
 // allowedNSSAI: provided by AMF, and AMF get it from NSSF (4.2.2.2.3 step 4b)
 func SendRerouteNasRequest(ue *context.AmfUe, anType models.AccessType, amfUeNgapID *int64, ngapMessage []byte,
-	allowedNSSAI *ngapType.AllowedNSSAI,
-) {
+	allowedNSSAI *ngapType.AllowedNSSAI) {
 	if ue == nil {
 		logger.NgapLog.Error("AmfUe is nil")
 		return
@@ -730,8 +730,7 @@ func SendRerouteNasRequest(ue *context.AmfUe, anType models.AccessType, amfUeNga
 
 // criticality ->from received node when received node can't comprehend the IE or missing IE
 func SendRanConfigurationUpdateAcknowledge(
-	ran *context.AmfRan, criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) {
+	ran *context.AmfRan, criticalityDiagnostics *ngapType.CriticalityDiagnostics) {
 	if ran == nil {
 		logger.NgapLog.Error("Ran is nil")
 		return
@@ -751,8 +750,7 @@ func SendRanConfigurationUpdateAcknowledge(
 // If the AMF cannot accept the update,
 // it shall respond with a RAN CONFIGURATION UPDATE FAILURE message and appropriate cause value.
 func SendRanConfigurationUpdateFailure(ran *context.AmfRan, cause ngapType.Cause,
-	criticalityDiagnostics *ngapType.CriticalityDiagnostics,
-) {
+	criticalityDiagnostics *ngapType.CriticalityDiagnostics) {
 	if ran == nil {
 		logger.NgapLog.Error("Ran is nil")
 		return
@@ -804,8 +802,7 @@ func SendOverloadStart(
 	ran *context.AmfRan,
 	amfOverloadResponse *ngapType.OverloadResponse,
 	amfTrafficLoadReductionIndication int64,
-	overloadStartNSSAIList *ngapType.OverloadStartNSSAIList,
-) {
+	overloadStartNSSAIList *ngapType.OverloadStartNSSAIList) {
 	if ran == nil {
 		logger.NgapLog.Error("Ran is nil")
 		return
@@ -924,8 +921,7 @@ func SendLocationReportingControl(
 	ue *context.RanUe,
 	AOIList *ngapType.AreaOfInterestList,
 	LocationReportingReferenceIDToBeCancelled int64,
-	eventType ngapType.EventType,
-) {
+	eventType ngapType.EventType) {
 	if ue == nil {
 		logger.NgapLog.Error("RanUe is nil")
 		return
@@ -971,8 +967,7 @@ func SendUETNLABindingReleaseRequest(ue *context.RanUe) {
 
 // Weight Factor associated with each of the TNL association within the AMF
 func SendAMFConfigurationUpdate(ran *context.AmfRan, usage ngapType.TNLAssociationUsage,
-	weightfactor ngapType.TNLAddressWeightFactor,
-) {
+	weightfactor ngapType.TNLAddressWeightFactor) {
 	if ran == nil {
 		logger.NgapLog.Error("Ran is nil")
 		return
diff --git a/ngap/ngap_test.go b/ngap/ngap_test.go
index b5b41a0..2017f19 100644
--- a/ngap/ngap_test.go
+++ b/ngap/ngap_test.go
@@ -1,6 +1,8 @@
 // SPDX-FileCopyrightText: 2021 Open Networking Foundation <info@opennetworking.org>
 //
 // SPDX-License-Identifier: Apache-2.0
+//
+
 package ngap_test
 
 import (
@@ -8,11 +10,11 @@ import (
 	"testing"
 	"time"
 
+	ngaputil "github.com/omec-project/amf/ngap/util"
+
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/factory"
-	"github.com/omec-project/amf/metrics"
 	"github.com/omec-project/amf/ngap"
-	ngaputil "github.com/omec-project/amf/ngap/util"
 	"github.com/omec-project/amf/util"
 )
 
@@ -22,9 +24,6 @@ func init() {
 	if err := factory.InitConfigFactory(testAmfConfig); err != nil {
 		log.Fatal("Failed to initialzie Factory Config")
 	}
-	if err := metrics.InitialiseKafkaStream(factory.AmfConfig.Configuration); err != nil {
-		log.Fatalf("Failed to initialize Kafka Stream")
-	}
 
 	util.InitAmfContext(context.AMF_Self())
 }
@@ -61,6 +60,7 @@ func TestHandleNGSetupRequest(t *testing.T) {
 	conn := &ngaputil.TestConn{}
 	for _, test := range testTable {
 		testNGSetupReq, err := ngaputil.GetNGSetupRequest(test.gnbId, test.bitLength, test.gnbName, test.tac)
+
 		if err != nil {
 			t.Log("Failed to to create NGSetupRequest")
 			return
diff --git a/ngap/service/service.go b/ngap/service/service.go
index 6a13d40..002e512 100644
--- a/ngap/service/service.go
+++ b/ngap/service/service.go
@@ -14,6 +14,7 @@ import (
 	"syscall"
 
 	"git.cs.nctu.edu.tw/calee/sctp"
+
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/ngap"
 )
@@ -134,8 +135,11 @@ func listenAndServe(addr *sctp.SCTPAddr, handler NGAPHandler) {
 		} else {
 			logger.NgapLog.Debugf("Set read timeout: %+v", readTimeout)
 		}
+		logger.NgapLog.Infof("=============================================== ")
+		logger.NgapLog.Infof("################|GNB DETECTED|################# ")
+		logger.NgapLog.Infof("=============================================== ")
 
-		logger.NgapLog.Infof("[AMF] SCTP Accept from: %s", newConn.RemoteAddr().String())
+		logger.NgapLog.Infof("SCTP Accept from: | %s |", newConn.RemoteAddr().String())
 		connections.Store(newConn, newConn)
 
 		go handleConnection(newConn, readBufSize, handler)
diff --git a/ngap/util/ngap_util.go b/ngap/util/ngap_util.go
index acb69ca..7e10fb9 100644
--- a/ngap/util/ngap_util.go
+++ b/ngap/util/ngap_util.go
@@ -32,7 +32,8 @@ type TestConn struct {
 	Data []byte
 }
 
-type TestConnAddr struct{}
+type TestConnAddr struct {
+}
 
 func (tca TestConnAddr) Network() (a string) { return }
 func (tca TestConnAddr) String() (a string)  { return }
@@ -75,6 +76,7 @@ func GetNGSetupRequest(gnbId []byte, bitlength uint64, name, tac string) ([]byte
 // BuildNGSetupRequest forms and returns a new NGAPPDU struct value for
 // NGSetupRequest populated with default values.
 func BuildNGSetupRequest() (pdu ngapType.NGAPPDU) {
+
 	pdu.Present = ngapType.NGAPPDUPresentInitiatingMessage
 	pdu.InitiatingMessage = new(ngapType.InitiatingMessage)
 
diff --git a/oam/api_purge_ue_context.go b/oam/api_purge_ue_context.go
index 3d78f1e..937509a 100644
--- a/oam/api_purge_ue_context.go
+++ b/oam/api_purge_ue_context.go
@@ -13,7 +13,7 @@ import (
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 
 	"github.com/omec-project/openapi/models"
 )
@@ -22,7 +22,7 @@ func HTTPPurgeUEContext(c *gin.Context) {
 	setCorsHeader(c)
 
 	amfSelf := context.AMF_Self()
-	req := httpwrapper.NewRequest(c.Request, nil)
+	req := http_wrapper.NewRequest(c.Request, nil)
 	if supi, exists := c.Params.Get("supi"); exists {
 		req.Params["supi"] = supi
 		reqUri := req.URL.RequestURI()
@@ -53,7 +53,7 @@ func HTTPAmfInstanceDown(c *gin.Context) {
 
 	nfId, _ := c.Params.Get("nfid")
 	logger.ProducerLog.Infof("AMF Instance Down Notification from NRF: %v", nfId)
-	req := httpwrapper.NewRequest(c.Request, nil)
+	req := http_wrapper.NewRequest(c.Request, nil)
 	if nfInstanceId, exists := c.Params.Get("nfid"); exists {
 		req.Params["nfid"] = nfInstanceId
 		self := context.AMF_Self()
diff --git a/oam/api_registered_ue_context.go b/oam/api_registered_ue_context.go
index 7dc19de..35e2244 100644
--- a/oam/api_registered_ue_context.go
+++ b/oam/api_registered_ue_context.go
@@ -12,7 +12,7 @@ import (
 
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/amf/producer"
-	"github.com/omec-project/util/httpwrapper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi"
 	"github.com/omec-project/openapi/models"
 )
@@ -27,7 +27,7 @@ func setCorsHeader(c *gin.Context) {
 func HTTPRegisteredUEContext(c *gin.Context) {
 	setCorsHeader(c)
 
-	req := httpwrapper.NewRequest(c.Request, nil)
+	req := http_wrapper.NewRequest(c.Request, nil)
 	if supi, exists := c.Params.Get("supi"); exists {
 		req.Params["supi"] = supi
 	}
@@ -51,7 +51,7 @@ func HTTPRegisteredUEContext(c *gin.Context) {
 func HTTPGetActiveUes(c *gin.Context) {
 	setCorsHeader(c)
 
-	req := httpwrapper.NewRequest(c.Request, nil)
+	req := http_wrapper.NewRequest(c.Request, nil)
 
 	rsp := producer.HandleOAMActiveUEContextsFromDB(req)
 
diff --git a/producer/callback.go b/producer/callback.go
index 414e447..fc14425 100644
--- a/producer/callback.go
+++ b/producer/callback.go
@@ -12,7 +12,10 @@ import (
 	"strconv"
 	"strings"
 
+	nrf_cache "github.com/omec-project/nrf/nrfcache"
+
 	"github.com/mohae/deepcopy"
+
 	"github.com/omec-project/amf/consumer"
 	"github.com/omec-project/amf/context"
 	amf_context "github.com/omec-project/amf/context"
@@ -21,16 +24,15 @@ import (
 	"github.com/omec-project/amf/nas"
 	ngap_message "github.com/omec-project/amf/ngap/message"
 	"github.com/omec-project/amf/util"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/nas/nasConvert"
 	"github.com/omec-project/nas/nasMessage"
 	"github.com/omec-project/ngap/ngapType"
-	nrf_cache "github.com/omec-project/nrf/nrfcache"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/httpwrapper"
 )
 
 func SmContextHandler(s1, s2 string, msg interface{}) (interface{}, string, interface{}, interface{}) {
-	switch msg := msg.(type) {
+	switch msg.(type) {
 	case models.SmContextStatusNotification:
 		var pduSessionID int
 		if pduSessionIDTmp, err := strconv.Atoi(s2); err != nil {
@@ -38,20 +40,20 @@ func SmContextHandler(s1, s2 string, msg interface{}) (interface{}, string, inte
 		} else {
 			pduSessionID = pduSessionIDTmp
 		}
-		r1 := SmContextStatusNotifyProcedure(s1, int32(pduSessionID), msg)
+		r1 := SmContextStatusNotifyProcedure(s1, int32(pduSessionID), msg.(models.SmContextStatusNotification))
 		return nil, "", r1, nil
 	case models.PolicyUpdate:
-		r1 := AmPolicyControlUpdateNotifyUpdateProcedure(s1, msg)
+		r1 := AmPolicyControlUpdateNotifyUpdateProcedure(s1, msg.(models.PolicyUpdate))
 		return nil, "", r1, nil
 	case models.TerminationNotification:
-		r1 := AmPolicyControlUpdateNotifyTerminateProcedure(s1, msg)
+		r1 := AmPolicyControlUpdateNotifyTerminateProcedure(s1, msg.(models.TerminationNotification))
 		return nil, "", r1, nil
 	}
 
 	return nil, "", nil, nil
 }
 
-func HandleSmContextStatusNotify(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleSmContextStatusNotify(request *http_wrapper.Request) *http_wrapper.Response {
 	var ue *context.AmfUe
 	var ok bool
 	logger.ProducerLog.Infoln("[AMF] Handle SmContext Status Notify")
@@ -67,7 +69,7 @@ func HandleSmContextStatusNotify(request *httpwrapper.Request) *httpwrapper.Resp
 			Cause:  "CONTEXT_NOT_FOUND",
 			Detail: fmt.Sprintf("Guti[%s] Not Found", guti),
 		}
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	}
 
 	smContextStatusNotification := request.Body.(models.SmContextStatusNotification)
@@ -80,17 +82,16 @@ func HandleSmContextStatusNotify(request *httpwrapper.Request) *httpwrapper.Resp
 	ue.EventChannel.UpdateSbiHandler(SmContextHandler)
 	ue.EventChannel.SubmitMessage(sbiMsg)
 	msg := <-sbiMsg.Result
-	// problemDetails := SmContextStatusNotifyProcedure(guti, int32(pduSessionID), smContextStatusNotification)
+	//problemDetails := SmContextStatusNotifyProcedure(guti, int32(pduSessionID), smContextStatusNotification)
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusNoContent, nil, nil)
+		return http_wrapper.NewResponse(http.StatusNoContent, nil, nil)
 	}
 }
 
 func SmContextStatusNotifyProcedure(guti string, pduSessionID int32,
-	smContextStatusNotification models.SmContextStatusNotification,
-) *models.ProblemDetails {
+	smContextStatusNotification models.SmContextStatusNotification) *models.ProblemDetails {
 	amfSelf := context.AMF_Self()
 
 	ue, ok := amfSelf.AmfUeFindByGuti(guti)
@@ -202,7 +203,7 @@ func SmContextStatusNotifyProcedure(guti string, pduSessionID int32,
 	return nil
 }
 
-func HandleAmPolicyControlUpdateNotifyUpdate(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleAmPolicyControlUpdateNotifyUpdate(request *http_wrapper.Request) *http_wrapper.Response {
 	var ue *context.AmfUe
 	var ok bool
 	logger.ProducerLog.Infoln("Handle AM Policy Control Update Notify [Policy update notification]")
@@ -218,7 +219,7 @@ func HandleAmPolicyControlUpdateNotifyUpdate(request *httpwrapper.Request) *http
 			Cause:  "CONTEXT_NOT_FOUND",
 			Detail: fmt.Sprintf("Policy Association ID[%s] Not Found", polAssoID),
 		}
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: polAssoID,
@@ -229,18 +230,17 @@ func HandleAmPolicyControlUpdateNotifyUpdate(request *httpwrapper.Request) *http
 	ue.EventChannel.UpdateSbiHandler(SmContextHandler)
 	ue.EventChannel.SubmitMessage(sbiMsg)
 	msg := <-sbiMsg.Result
-	// problemDetails := AmPolicyControlUpdateNotifyUpdateProcedure(polAssoID, policyUpdate)
+	//problemDetails := AmPolicyControlUpdateNotifyUpdateProcedure(polAssoID, policyUpdate)
 
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusNoContent, nil, nil)
+		return http_wrapper.NewResponse(http.StatusNoContent, nil, nil)
 	}
 }
 
 func AmPolicyControlUpdateNotifyUpdateProcedure(polAssoID string,
-	policyUpdate models.PolicyUpdate,
-) *models.ProblemDetails {
+	policyUpdate models.PolicyUpdate) *models.ProblemDetails {
 	amfSelf := context.AMF_Self()
 
 	ue, ok := amfSelf.AmfUeFindByPolicyAssociationID(polAssoID)
@@ -288,7 +288,7 @@ func AmPolicyControlUpdateNotifyUpdateProcedure(polAssoID string,
 				}
 
 				ue.ConfigurationUpdateMessage = message
-				ue.SetOnGoing(models.AccessType__3_GPP_ACCESS, &context.OnGoingProcedureWithPrio{
+				ue.SetOnGoing(models.AccessType__3_GPP_ACCESS, &context.OnGoing{
 					Procedure: context.OnGoingProcedurePaging,
 				})
 
@@ -305,7 +305,7 @@ func AmPolicyControlUpdateNotifyUpdateProcedure(polAssoID string,
 }
 
 // TS 29.507 4.2.4.3
-func HandleAmPolicyControlUpdateNotifyTerminate(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleAmPolicyControlUpdateNotifyTerminate(request *http_wrapper.Request) *http_wrapper.Response {
 	var ue *context.AmfUe
 	logger.ProducerLog.Infoln("Handle AM Policy Control Update Notify [Request for termination of the policy association]")
 
@@ -320,7 +320,7 @@ func HandleAmPolicyControlUpdateNotifyTerminate(request *httpwrapper.Request) *h
 			Cause:  "CONTEXT_NOT_FOUND",
 			Detail: fmt.Sprintf("Policy Association ID[%s] Not Found", polAssoID),
 		}
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: polAssoID,
@@ -332,17 +332,16 @@ func HandleAmPolicyControlUpdateNotifyTerminate(request *httpwrapper.Request) *h
 	ue.EventChannel.SubmitMessage(sbiMsg)
 	msg := <-sbiMsg.Result
 
-	// problemDetails := AmPolicyControlUpdateNotifyTerminateProcedure(polAssoID, terminationNotification)
+	//problemDetails := AmPolicyControlUpdateNotifyTerminateProcedure(polAssoID, terminationNotification)
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusNoContent, nil, nil)
+		return http_wrapper.NewResponse(http.StatusNoContent, nil, nil)
 	}
 }
 
 func AmPolicyControlUpdateNotifyTerminateProcedure(polAssoID string,
-	terminationNotification models.TerminationNotification,
-) *models.ProblemDetails {
+	terminationNotification models.TerminationNotification) *models.ProblemDetails {
 	amfSelf := context.AMF_Self()
 
 	ue, ok := amfSelf.AmfUeFindByPolicyAssociationID(polAssoID)
@@ -370,16 +369,16 @@ func AmPolicyControlUpdateNotifyTerminateProcedure(polAssoID string,
 }
 
 // TS 23.502 4.2.2.2.3 Registration with AMF re-allocation
-func HandleN1MessageNotify(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleN1MessageNotify(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.ProducerLog.Infoln("[AMF] Handle N1 Message Notify")
 
 	n1MessageNotify := request.Body.(models.N1MessageNotify)
 
 	problemDetails := N1MessageNotifyProcedure(n1MessageNotify)
 	if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else {
-		return httpwrapper.NewResponse(http.StatusNoContent, nil, nil)
+		return http_wrapper.NewResponse(http.StatusNoContent, nil, nil)
 	}
 }
 
@@ -441,16 +440,16 @@ func N1MessageNotifyProcedure(n1MessageNotify models.N1MessageNotify) *models.Pr
 	return nil
 }
 
-func HandleNfSubscriptionStatusNotify(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleNfSubscriptionStatusNotify(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.ProducerLog.Traceln("[AMF] Handle NF Status Notify")
 
 	notificationData := request.Body.(models.NotificationData)
 
 	problemDetails := NfSubscriptionStatusNotifyProcedure(notificationData)
 	if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else {
-		return httpwrapper.NewResponse(http.StatusNoContent, nil, nil)
+		return http_wrapper.NewResponse(http.StatusNoContent, nil, nil)
 	}
 }
 
@@ -467,7 +466,7 @@ func NfSubscriptionStatusNotifyProcedure(notificationData models.NotificationDat
 	}
 	nfInstanceId := notificationData.NfInstanceUri[strings.LastIndex(notificationData.NfInstanceUri, "/")+1:]
 
-	logger.ProducerLog.Infof("Received Subscription Status Notification from NRF: %v", notificationData.Event)
+	logger.ProducerLog.Infof("Recieved Subscription Status Notification from NRF: %v", notificationData.Event)
 	// If nrf caching is enabled, go ahead and delete the entry from the cache.
 	// This will force the amf to do nf discovery and get the updated nf profile from the nrf.
 	if notificationData.Event == models.NotificationEventType_DEREGISTERED {
diff --git a/producer/callback/n1n2message.go b/producer/callback/n1n2message.go
index e7f8c7a..26388ff 100644
--- a/producer/callback/n1n2message.go
+++ b/producer/callback/n1n2message.go
@@ -9,11 +9,12 @@ import (
 	"context"
 	"strconv"
 
+	"github.com/sirupsen/logrus"
+
 	amf_context "github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
 	"github.com/omec-project/openapi/Namf_Communication"
 	"github.com/omec-project/openapi/models"
-	"github.com/sirupsen/logrus"
 )
 
 var HttpLog *logrus.Entry
@@ -53,8 +54,7 @@ func SendN1N2TransferFailureNotification(ue *amf_context.AmfUe, cause models.N1N
 }
 
 func SendN1MessageNotify(ue *amf_context.AmfUe, n1class models.N1MessageClass, n1Msg []byte,
-	registerContext *models.RegistrationContextContainer,
-) {
+	registerContext *models.RegistrationContextContainer) {
 	ue.N1N2MessageSubscription.Range(func(key, value interface{}) bool {
 		subscriptionID := key.(int64)
 		subscription := value.(models.UeN1N2InfoSubscriptionCreateData)
@@ -91,8 +91,7 @@ func SendN1MessageNotify(ue *amf_context.AmfUe, n1class models.N1MessageClass, n
 
 // TS 29.518 5.2.2.3.5.2
 func SendN1MessageNotifyAtAMFReAllocation(
-	ue *amf_context.AmfUe, n1Msg []byte, registerContext *models.RegistrationContextContainer,
-) {
+	ue *amf_context.AmfUe, n1Msg []byte, registerContext *models.RegistrationContextContainer) {
 	configuration := Namf_Communication.NewConfiguration()
 	client := Namf_Communication.NewAPIClient(configuration)
 
diff --git a/producer/event_exposure.go b/producer/event_exposure.go
index 3907a5c..715e337 100644
--- a/producer/event_exposure.go
+++ b/producer/event_exposure.go
@@ -12,31 +12,30 @@ import (
 
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/httpwrapper"
 )
 
-func HandleCreateAMFEventSubscription(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleCreateAMFEventSubscription(request *http_wrapper.Request) *http_wrapper.Response {
 	createEventSubscription := request.Body.(models.AmfCreateEventSubscription)
 
 	createdEventSubscription, problemDetails := CreateAMFEventSubscriptionProcedure(createEventSubscription)
 	if createdEventSubscription != nil {
-		return httpwrapper.NewResponse(http.StatusCreated, nil, createdEventSubscription)
+		return http_wrapper.NewResponse(http.StatusCreated, nil, createdEventSubscription)
 	} else if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else {
 		problemDetails = &models.ProblemDetails{
 			Status: http.StatusInternalServerError,
 			Cause:  "UNSPECIFIED_NF_FAILURE",
 		}
-		return httpwrapper.NewResponse(http.StatusInternalServerError, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusInternalServerError, nil, problemDetails)
 	}
 }
 
 // TODO: handle event filter
 func CreateAMFEventSubscriptionProcedure(createEventSubscription models.AmfCreateEventSubscription) (
-	*models.AmfCreatedEventSubscription, *models.ProblemDetails,
-) {
+	*models.AmfCreatedEventSubscription, *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	createdEventSubscription := &models.AmfCreatedEventSubscription{}
@@ -192,16 +191,16 @@ func CreateAMFEventSubscriptionProcedure(createEventSubscription models.AmfCreat
 	return createdEventSubscription, nil
 }
 
-func HandleDeleteAMFEventSubscription(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleDeleteAMFEventSubscription(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.EeLog.Infoln("Handle Delete AMF Event Subscription")
 
 	subscriptionID := request.Params["subscriptionId"]
 
 	problemDetails := DeleteAMFEventSubscriptionProcedure(subscriptionID)
 	if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else {
-		return httpwrapper.NewResponse(http.StatusOK, nil, nil)
+		return http_wrapper.NewResponse(http.StatusOK, nil, nil)
 	}
 }
 
@@ -226,7 +225,7 @@ func DeleteAMFEventSubscriptionProcedure(subscriptionID string) *models.ProblemD
 	return nil
 }
 
-func HandleModifyAMFEventSubscription(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleModifyAMFEventSubscription(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.EeLog.Infoln("Handle Modify AMF Event Subscription")
 
 	subscriptionID := request.Params["subscriptionId"]
@@ -235,23 +234,22 @@ func HandleModifyAMFEventSubscription(request *httpwrapper.Request) *httpwrapper
 	updatedEventSubscription, problemDetails := ModifyAMFEventSubscriptionProcedure(subscriptionID,
 		modifySubscriptionRequest)
 	if updatedEventSubscription != nil {
-		return httpwrapper.NewResponse(http.StatusOK, nil, updatedEventSubscription)
+		return http_wrapper.NewResponse(http.StatusOK, nil, updatedEventSubscription)
 	} else if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else {
 		problemDetails = &models.ProblemDetails{
 			Status: http.StatusInternalServerError,
 			Cause:  "UNSPECIFIED_NF_FAILURE",
 		}
-		return httpwrapper.NewResponse(http.StatusInternalServerError, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusInternalServerError, nil, problemDetails)
 	}
 }
 
 func ModifyAMFEventSubscriptionProcedure(
 	subscriptionID string,
 	modifySubscriptionRequest models.ModifySubscriptionRequest) (
-	*models.AmfUpdatedEventSubscription, *models.ProblemDetails,
-) {
+	*models.AmfUpdatedEventSubscription, *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	contextSubscription, ok := amfSelf.FindEventSubscription(subscriptionID)
@@ -319,8 +317,7 @@ func subReports(ue *context.AmfUe, subscriptionId string) {
 
 // DO NOT handle AmfEventType_PRESENCE_IN_AOI_REPORT and AmfEventType_UES_IN_AREA_REPORT(about area)
 func NewAmfEventReport(ue *context.AmfUe, Type models.AmfEventType, subscriptionId string) (
-	report models.AmfEventReport, ok bool,
-) {
+	report models.AmfEventReport, ok bool) {
 	ueSubscription, ok := ue.EventSubscriptionsInfo[subscriptionId]
 	if !ok {
 		return report, ok
diff --git a/producer/location_info.go b/producer/location_info.go
index cfb9e2d..a669da8 100644
--- a/producer/location_info.go
+++ b/producer/location_info.go
@@ -11,21 +11,21 @@ import (
 
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/httpwrapper"
 )
 
 func LocationInfoHandler(s1, s2 string, msg interface{}) (interface{}, string, interface{}, interface{}) {
-	switch msg := msg.(type) {
+	switch msg.(type) {
 	case models.RequestLocInfo:
-		r1, r2 := ProvideLocationInfoProcedure(msg, s1)
+		r1, r2 := ProvideLocationInfoProcedure(msg.(models.RequestLocInfo), s1)
 		return r1, "", r2, nil
 	}
 
 	return nil, "", nil, nil
 }
 
-func HandleProvideLocationInfoRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleProvideLocationInfoRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	var ue *context.AmfUe
 	var ok bool
 	logger.ProducerLog.Info("Handle Provide Location Info Request")
@@ -39,7 +39,7 @@ func HandleProvideLocationInfoRequest(request *httpwrapper.Request) *httpwrapper
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
 	}
 
 	sbiMsg := context.SbiMsg{
@@ -55,17 +55,16 @@ func HandleProvideLocationInfoRequest(request *httpwrapper.Request) *httpwrapper
 	if msg.RespData != nil {
 		provideLocInfo = msg.RespData.(*models.ProvideLocInfo)
 	}
-	// provideLocInfo, problemDetails := ProvideLocationInfoProcedure(requestLocInfo, ueContextID)
+	//provideLocInfo, problemDetails := ProvideLocationInfoProcedure(requestLocInfo, ueContextID)
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusOK, nil, provideLocInfo)
+		return http_wrapper.NewResponse(http.StatusOK, nil, provideLocInfo)
 	}
 }
 
 func ProvideLocationInfoProcedure(requestLocInfo models.RequestLocInfo, ueContextID string) (
-	*models.ProvideLocInfo, *models.ProblemDetails,
-) {
+	*models.ProvideLocInfo, *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	ue, ok := amfSelf.AmfUeFindByUeContextID(ueContextID)
diff --git a/producer/mt.go b/producer/mt.go
index 40032ea..dd19c98 100644
--- a/producer/mt.go
+++ b/producer/mt.go
@@ -11,21 +11,21 @@ import (
 
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/httpwrapper"
 )
 
 func MtHandler(s1, s2 string, msg interface{}) (interface{}, string, interface{}, interface{}) {
-	switch msg := msg.(type) {
+	switch msg.(type) {
 	case string:
-		r1, r2 := ProvideDomainSelectionInfoProcedure(s1, s2, msg)
+		r1, r2 := ProvideDomainSelectionInfoProcedure(s1, s2, msg.(string))
 		return r1, "", r2, nil
 	}
 
 	return nil, "", nil, nil
 }
 
-func HandleProvideDomainSelectionInfoRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleProvideDomainSelectionInfoRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	var ue *context.AmfUe
 	var ok bool
 	logger.MtLog.Info("Handle Provide Domain Selection Info Request")
@@ -41,7 +41,7 @@ func HandleProvideDomainSelectionInfoRequest(request *httpwrapper.Request) *http
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: ueContextID,
@@ -56,18 +56,17 @@ func HandleProvideDomainSelectionInfoRequest(request *httpwrapper.Request) *http
 	if msg.RespData != nil {
 		ueContextInfo = msg.RespData.(*models.UeContextInfo)
 	}
-	// ueContextInfo, problemDetails := ProvideDomainSelectionInfoProcedure(ueContextID,
+	//ueContextInfo, problemDetails := ProvideDomainSelectionInfoProcedure(ueContextID,
 	//	infoClassQuery, supportedFeaturesQuery)
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(models.ProblemDetails).Status), nil, msg.ProblemDetails.(models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(models.ProblemDetails).Status), nil, msg.ProblemDetails.(models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusOK, nil, ueContextInfo)
+		return http_wrapper.NewResponse(http.StatusOK, nil, ueContextInfo)
 	}
 }
 
 func ProvideDomainSelectionInfoProcedure(ueContextID string, infoClassQuery string, supportedFeaturesQuery string) (
-	*models.UeContextInfo, *models.ProblemDetails,
-) {
+	*models.UeContextInfo, *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	ue, ok := amfSelf.AmfUeFindByUeContextID(ueContextID)
diff --git a/producer/n1n2message.go b/producer/n1n2message.go
index 2d12aa5..1d4efd9 100644
--- a/producer/n1n2message.go
+++ b/producer/n1n2message.go
@@ -17,10 +17,10 @@ import (
 	ngap_message "github.com/omec-project/amf/ngap/message"
 	"github.com/omec-project/amf/producer/callback"
 	"github.com/omec-project/aper"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/nas/nasMessage"
 	"github.com/omec-project/ngap/ngapType"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/httpwrapper"
 )
 
 func ProducerHandler(s1, s2 string, msg interface{}) (interface{}, string, interface{}, interface{}) {
@@ -28,11 +28,11 @@ func ProducerHandler(s1, s2 string, msg interface{}) (interface{}, string, inter
 		r1, r2 := N1N2MessageTransferStatusProcedure(s1, s2)
 		return r1, "", r2, nil
 	}
-	switch msg := msg.(type) {
+	switch msg.(type) {
 	case models.N1N2MessageTransferRequest:
-		return N1N2MessageTransferProcedure(s1, s2, msg)
+		return N1N2MessageTransferProcedure(s1, s2, msg.(models.N1N2MessageTransferRequest))
 	case models.UeN1N2InfoSubscriptionCreateData:
-		r1, r2 := N1N2MessageSubscribeProcedure(s1, msg)
+		r1, r2 := N1N2MessageSubscribeProcedure(s1, msg.(models.UeN1N2InfoSubscriptionCreateData))
 		return r1, "", r2, nil
 	}
 
@@ -40,7 +40,7 @@ func ProducerHandler(s1, s2 string, msg interface{}) (interface{}, string, inter
 }
 
 // TS23502 4.2.3.3, 4.2.4.3, 4.3.2.2, 4.3.2.3, 4.3.3.2, 4.3.7
-func HandleN1N2MessageTransferRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleN1N2MessageTransferRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	var ue *context.AmfUe
 	var ok bool
 	var problemDetails *models.ProblemDetails
@@ -57,7 +57,7 @@ func HandleN1N2MessageTransferRequest(request *httpwrapper.Request) *httpwrapper
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: ueContextID,
@@ -84,20 +84,20 @@ func HandleN1N2MessageTransferRequest(request *httpwrapper.Request) *httpwrapper
 	//			ueContextID, reqUri, n1n2MessageTransferRequest)
 
 	if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else if transferErr != nil {
-		return httpwrapper.NewResponse(int(transferErr.Error.Status), nil, transferErr)
+		return http_wrapper.NewResponse(int(transferErr.Error.Status), nil, transferErr)
 	} else if n1n2MessageTransferRspData != nil {
 		switch n1n2MessageTransferRspData.Cause {
 		case models.N1N2MessageTransferCause_N1_MSG_NOT_TRANSFERRED:
 			fallthrough
 		case models.N1N2MessageTransferCause_N1_N2_TRANSFER_INITIATED:
-			return httpwrapper.NewResponse(http.StatusOK, nil, n1n2MessageTransferRspData)
+			return http_wrapper.NewResponse(http.StatusOK, nil, n1n2MessageTransferRspData)
 		case models.N1N2MessageTransferCause_ATTEMPTING_TO_REACH_UE:
 			headers := http.Header{
 				"Location": {locationHeader},
 			}
-			return httpwrapper.NewResponse(http.StatusAccepted, headers, n1n2MessageTransferRspData)
+			return http_wrapper.NewResponse(http.StatusAccepted, headers, n1n2MessageTransferRspData)
 		}
 	}
 
@@ -105,7 +105,7 @@ func HandleN1N2MessageTransferRequest(request *httpwrapper.Request) *httpwrapper
 		Status: http.StatusForbidden,
 		Cause:  "UNSPECIFIED",
 	}
-	return httpwrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
+	return http_wrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
 }
 
 // There are 4 possible return value for this function:
@@ -114,14 +114,12 @@ func HandleN1N2MessageTransferRequest(request *httpwrapper.Request) *httpwrapper
 //     response
 //   - problemDetails: if AMF reject the request due to application error, e.g. UE context not found.
 //   - TransferErr: if AMF reject the request due to procedure error, e.g. UE has an ongoing procedure.
-//
 // see TS 29.518 6.1.3.5.3.1 for more details.
 func N1N2MessageTransferProcedure(ueContextID string, reqUri string,
 	n1n2MessageTransferRequest models.N1N2MessageTransferRequest) (
 	n1n2MessageTransferRspData *models.N1N2MessageTransferRspData,
 	locationHeader string, problemDetails *models.ProblemDetails,
-	transferErr *models.N1N2MessageTransferError,
-) {
+	transferErr *models.N1N2MessageTransferError) {
 	var (
 		requestData *models.N1N2MessageTransferReqData = n1n2MessageTransferRequest.JsonData
 		n2Info      []byte                             = n1n2MessageTransferRequest.BinaryDataN2Information
@@ -193,7 +191,7 @@ func N1N2MessageTransferProcedure(ueContextID string, reqUri string,
 		}
 	}
 
-	onGoing := ue.GetOnGoing(anType)
+	onGoing := ue.OnGoing(anType)
 	// 4xx response cases
 	// TODO: Error Status 307, 403 in TS29.518 Table 6.1.3.5.3.1-3
 	switch onGoing.Procedure {
@@ -269,7 +267,7 @@ func N1N2MessageTransferProcedure(ueContextID string, reqUri string,
 				}
 				n1n2MessageTransferRspData = new(models.N1N2MessageTransferRspData)
 				n1n2MessageTransferRspData.Cause = models.N1N2MessageTransferCause_N1_N2_TRANSFER_INITIATED
-				// context.StoreContextInDB(ue)
+				//context.StoreContextInDB(ue)
 				return n1n2MessageTransferRspData, "", nil, nil
 			case models.NgapIeType_PDU_RES_MOD_REQ:
 				ue.ProducerLog.Debugln("AMF Transfer NGAP PDU Session Resource Modify Request from SMF")
@@ -278,7 +276,7 @@ func N1N2MessageTransferProcedure(ueContextID string, reqUri string,
 				ngap_message.SendPDUSessionResourceModifyRequest(ue.RanUe[anType], list)
 				n1n2MessageTransferRspData = new(models.N1N2MessageTransferRspData)
 				n1n2MessageTransferRspData.Cause = models.N1N2MessageTransferCause_N1_N2_TRANSFER_INITIATED
-				// context.StoreContextInDB(ue)
+				//context.StoreContextInDB(ue)
 				return n1n2MessageTransferRspData, "", nil, nil
 			case models.NgapIeType_PDU_RES_REL_CMD:
 				ue.ProducerLog.Debugln("AMF Transfer NGAP PDU Session Resource Release Command from SMF")
@@ -287,7 +285,7 @@ func N1N2MessageTransferProcedure(ueContextID string, reqUri string,
 				ngap_message.SendPDUSessionResourceReleaseCommand(ue.RanUe[anType], nasPdu, list)
 				n1n2MessageTransferRspData = new(models.N1N2MessageTransferRspData)
 				n1n2MessageTransferRspData.Cause = models.N1N2MessageTransferCause_N1_N2_TRANSFER_INITIATED
-				// context.StoreContextInDB(ue)
+				//context.StoreContextInDB(ue)
 				return n1n2MessageTransferRspData, "", nil, nil
 			default:
 				ue.ProducerLog.Errorf("NGAP IE Type[%s] is not supported for SmInfo", smInfo.N2InfoContent.NgapIeType)
@@ -352,7 +350,7 @@ func N1N2MessageTransferProcedure(ueContextID string, reqUri string,
 				ResourceUri: locationHeader,
 			}
 			ue.N1N2Message = &message
-			ue.SetOnGoing(anType, &context.OnGoingProcedureWithPrio{
+			ue.SetOnGoing(anType, &context.OnGoing{
 				Procedure: context.OnGoingProcedurePaging,
 				Ppi:       requestData.Ppi,
 			})
@@ -405,7 +403,7 @@ func N1N2MessageTransferProcedure(ueContextID string, reqUri string,
 			}
 			ue.N1N2Message = &message
 
-			ue.SetOnGoing(anType, &context.OnGoingProcedureWithPrio{
+			ue.SetOnGoing(anType, &context.OnGoing{
 				Procedure: context.OnGoingProcedurePaging,
 				Ppi:       requestData.Ppi,
 			})
@@ -423,7 +421,7 @@ func N1N2MessageTransferProcedure(ueContextID string, reqUri string,
 	}
 }
 
-func HandleN1N2MessageTransferStatusRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleN1N2MessageTransferStatusRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Info("Handle N1N2Message Transfer Status Request")
 
 	ueContextID := request.Params["ueContextId"]
@@ -437,7 +435,7 @@ func HandleN1N2MessageTransferStatusRequest(request *httpwrapper.Request) *httpw
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: ueContextID,
@@ -454,17 +452,16 @@ func HandleN1N2MessageTransferStatusRequest(request *httpwrapper.Request) *httpw
 		n1n2MessageRspData = msg.RespData.(*models.N1N2MessageTransferCause)
 	}
 
-	// status, problemDetails := N1N2MessageTransferStatusProcedure(ueContextID, reqUri)
+	//status, problemDetails := N1N2MessageTransferStatusProcedure(ueContextID, reqUri)
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusOK, nil, n1n2MessageRspData)
+		return http_wrapper.NewResponse(http.StatusOK, nil, n1n2MessageRspData)
 	}
 }
 
 func N1N2MessageTransferStatusProcedure(ueContextID string, reqUri string) (models.N1N2MessageTransferCause,
-	*models.ProblemDetails,
-) {
+	*models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	ue, ok := amfSelf.AmfUeFindByUeContextID(ueContextID)
@@ -490,7 +487,7 @@ func N1N2MessageTransferStatusProcedure(ueContextID string, reqUri string) (mode
 }
 
 // TS 29.518 5.2.2.3.3
-func HandleN1N2MessageSubscirbeRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleN1N2MessageSubscirbeRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	ueN1N2InfoSubscriptionCreateData := request.Body.(models.UeN1N2InfoSubscriptionCreateData)
 	ueContextID := request.Params["ueContextId"]
 
@@ -502,7 +499,7 @@ func HandleN1N2MessageSubscirbeRequest(request *httpwrapper.Request) *httpwrappe
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: ueContextID,
@@ -518,18 +515,17 @@ func HandleN1N2MessageSubscirbeRequest(request *httpwrapper.Request) *httpwrappe
 	if msg.RespData != nil {
 		n1n2MessageRspData = msg.RespData.(*models.UeN1N2InfoSubscriptionCreateData)
 	}
-	// ueN1N2InfoSubscriptionCreatedData, problemDetails := N1N2MessageSubscribeProcedure(ueContextID, ueN1N2InfoSubscriptionCreateData)
+	//ueN1N2InfoSubscriptionCreatedData, problemDetails := N1N2MessageSubscribeProcedure(ueContextID, ueN1N2InfoSubscriptionCreateData)
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusCreated, nil, n1n2MessageRspData)
+		return http_wrapper.NewResponse(http.StatusCreated, nil, n1n2MessageRspData)
 	}
 }
 
 func N1N2MessageSubscribeProcedure(ueContextID string,
 	ueN1N2InfoSubscriptionCreateData models.UeN1N2InfoSubscriptionCreateData) (
-	*models.UeN1N2InfoSubscriptionCreatedData, *models.ProblemDetails,
-) {
+	*models.UeN1N2InfoSubscriptionCreatedData, *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	ue, ok := amfSelf.AmfUeFindByUeContextID(ueContextID)
@@ -557,7 +553,7 @@ func N1N2MessageSubscribeProcedure(ueContextID string,
 	return ueN1N2InfoSubscriptionCreatedData, nil
 }
 
-func HandleN1N2MessageUnSubscribeRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleN1N2MessageUnSubscribeRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Info("Handle N1N2Message Unsubscribe Request")
 
 	ueContextID := request.Params["ueContextId"]
@@ -565,9 +561,9 @@ func HandleN1N2MessageUnSubscribeRequest(request *httpwrapper.Request) *httpwrap
 
 	problemDetails := N1N2MessageUnSubscribeProcedure(ueContextID, subscriptionID)
 	if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else {
-		return httpwrapper.NewResponse(http.StatusNoContent, nil, nil)
+		return http_wrapper.NewResponse(http.StatusNoContent, nil, nil)
 	}
 }
 
diff --git a/producer/oam.go b/producer/oam.go
index 5f90185..4c057f2 100644
--- a/producer/oam.go
+++ b/producer/oam.go
@@ -13,9 +13,9 @@ import (
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/gmm"
 	"github.com/omec-project/amf/logger"
+	"github.com/omec-project/fsm"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/fsm"
-	"github.com/omec-project/util/httpwrapper"
 )
 
 type PduSession struct {
@@ -76,32 +76,29 @@ func HandleOAMPurgeUEContextRequest(supi, reqUri string, msg interface{}) (inter
 			ue.Remove()
 		case context.Registered:
 			logger.ProducerLog.Info("Deregistration triggered for the UE : ", ue.Supi)
-			err := gmm.GmmFSM.SendEvent(ue.State[models.AccessType__3_GPP_ACCESS], gmm.NwInitiatedDeregistrationEvent, fsm.ArgsType{
+			gmm.GmmFSM.SendEvent(ue.State[models.AccessType__3_GPP_ACCESS], gmm.NwInitiatedDeregistrationEvent, fsm.ArgsType{
 				gmm.ArgAmfUe:      ue,
 				gmm.ArgAccessType: models.AccessType__3_GPP_ACCESS,
 			})
-			if err != nil {
-				logger.ProducerLog.Errorf("Error sending deregistration event: %v", err)
-			}
 		}
 	}
 	return nil, "", nil, nil
 }
 
-func HandleOAMRegisteredUEContext(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleOAMRegisteredUEContext(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.ProducerLog.Infof("[OAM] Handle Registered UE Context")
 
 	supi := request.Params["supi"]
 
 	ueContexts, problemDetails := OAMRegisteredUEContextProcedure(supi)
 	if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else {
-		return httpwrapper.NewResponse(http.StatusOK, nil, ueContexts)
+		return http_wrapper.NewResponse(http.StatusOK, nil, ueContexts)
 	}
 }
 
-func HandleOAMActiveUEContextsFromDB(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleOAMActiveUEContextsFromDB(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.ProducerLog.Infof("[OAM] Handle Active UE Contexts Request")
 	var ueContexts []ActiveUeContext
 	ueList := context.DbFetchAllEntries()
@@ -150,10 +147,10 @@ func HandleOAMActiveUEContextsFromDB(request *httpwrapper.Request) *httpwrapper.
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	}
 
-	return httpwrapper.NewResponse(http.StatusOK, nil, ueContexts)
+	return http_wrapper.NewResponse(http.StatusOK, nil, ueContexts)
 }
 
 func OAMRegisteredUEContextProcedure(supi string) (UEContexts, *models.ProblemDetails) {
diff --git a/producer/oam_test.go b/producer/oam_test.go
index cd7a6e1..cf6d9af 100644
--- a/producer/oam_test.go
+++ b/producer/oam_test.go
@@ -6,22 +6,26 @@
 package producer
 
 import (
-	"fmt"
 	"testing"
 
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/factory"
 	"github.com/omec-project/amf/gmm"
 	"github.com/omec-project/amf/util"
+	"github.com/omec-project/fsm"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/fsm"
 	"github.com/stretchr/testify/assert"
 )
 
+type TestCases struct {
+	amfContext         context.AMFContext
+	amfue              context.AmfUe
+	expectedUeFsmState string
+	description        string
+}
+
 func init() {
-	if err := factory.InitConfigFactory("../amfTest/amfcfg.yaml"); err != nil {
-		fmt.Printf("Error in InitConfigFactory: %v\n", err)
-	}
+	factory.InitConfigFactory("../amfTest/amfcfg.yaml")
 
 	self := context.AMF_Self()
 	util.InitAmfContext(self)
@@ -31,11 +35,6 @@ func init() {
 
 func TestHandleOAMPurgeUEContextRequest_UEDeregistered(t *testing.T) {
 	self := context.AMF_Self()
-	var err error
-	self.Drsm, err = util.MockDrsmInit()
-	if err != nil {
-		fmt.Printf("Error in MockDrsmInit: %v\n", err)
-	}
 	amfUe := self.NewAmfUe("imsi-208930100007497")
 
 	HandleOAMPurgeUEContextRequest(amfUe.Supi, "", nil)
diff --git a/producer/subscription.go b/producer/subscription.go
index e4aa3f9..9c8214a 100644
--- a/producer/subscription.go
+++ b/producer/subscription.go
@@ -11,30 +11,29 @@ import (
 
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/httpwrapper"
 )
 
 // TS 29.518 5.2.2.5.1
-func HandleAMFStatusChangeSubscribeRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleAMFStatusChangeSubscribeRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Info("Handle AMF Status Change Subscribe Request")
 
 	subscriptionDataReq := request.Body.(models.SubscriptionData)
 
 	subscriptionDataRsp, locationHeader, problemDetails := AMFStatusChangeSubscribeProcedure(subscriptionDataReq)
 	if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	}
 
 	headers := http.Header{
 		"Location": {locationHeader},
 	}
-	return httpwrapper.NewResponse(http.StatusCreated, headers, subscriptionDataRsp)
+	return http_wrapper.NewResponse(http.StatusCreated, headers, subscriptionDataRsp)
 }
 
 func AMFStatusChangeSubscribeProcedure(subscriptionDataReq models.SubscriptionData) (
-	subscriptionDataRsp models.SubscriptionData, locationHeader string, problemDetails *models.ProblemDetails,
-) {
+	subscriptionDataRsp models.SubscriptionData, locationHeader string, problemDetails *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	for _, guami := range subscriptionDataReq.GuamiList {
@@ -61,16 +60,16 @@ func AMFStatusChangeSubscribeProcedure(subscriptionDataReq models.SubscriptionDa
 }
 
 // TS 29.518 5.2.2.5.2
-func HandleAMFStatusChangeUnSubscribeRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleAMFStatusChangeUnSubscribeRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Info("Handle AMF Status Change UnSubscribe Request")
 
 	subscriptionID := request.Params["subscriptionId"]
 
 	problemDetails := AMFStatusChangeUnSubscribeProcedure(subscriptionID)
 	if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else {
-		return httpwrapper.NewResponse(http.StatusNoContent, nil, nil)
+		return http_wrapper.NewResponse(http.StatusNoContent, nil, nil)
 	}
 }
 
@@ -90,7 +89,7 @@ func AMFStatusChangeUnSubscribeProcedure(subscriptionID string) (problemDetails
 }
 
 // TS 29.518 5.2.2.5.1.3
-func HandleAMFStatusChangeSubscribeModify(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleAMFStatusChangeSubscribeModify(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Info("Handle AMF Status Change Subscribe Modify Request")
 
 	updateSubscriptionData := request.Body.(models.SubscriptionData)
@@ -99,15 +98,14 @@ func HandleAMFStatusChangeSubscribeModify(request *httpwrapper.Request) *httpwra
 	updatedSubscriptionData, problemDetails := AMFStatusChangeSubscribeModifyProcedure(subscriptionID,
 		updateSubscriptionData)
 	if problemDetails != nil {
-		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
+		return http_wrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
 	} else {
-		return httpwrapper.NewResponse(http.StatusAccepted, nil, updatedSubscriptionData)
+		return http_wrapper.NewResponse(http.StatusAccepted, nil, updatedSubscriptionData)
 	}
 }
 
 func AMFStatusChangeSubscribeModifyProcedure(subscriptionID string, subscriptionData models.SubscriptionData) (
-	*models.SubscriptionData, *models.ProblemDetails,
-) {
+	*models.SubscriptionData, *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	if currentSubscriptionData, ok := amfSelf.FindAMFStatusSubscription(subscriptionID); !ok {
diff --git a/producer/ue_context.go b/producer/ue_context.go
index 084f408..62b4ca8 100644
--- a/producer/ue_context.go
+++ b/producer/ue_context.go
@@ -13,26 +13,26 @@ import (
 	"github.com/omec-project/amf/consumer"
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/logger"
+	"github.com/omec-project/http_wrapper"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/httpwrapper"
 )
 
 func UeContextHandler(s1, s2 string, msg interface{}) (interface{}, string, interface{}, interface{}) {
-	switch msg := msg.(type) {
+	switch msg.(type) {
 	case models.CreateUeContextRequest:
-		r1, r2 := CreateUEContextProcedure(s1, msg)
+		r1, r2 := CreateUEContextProcedure(s1, msg.(models.CreateUeContextRequest))
 		return r1, "", nil, r2
 	case models.UeContextRelease:
-		r1 := ReleaseUEContextProcedure(s1, msg)
+		r1 := ReleaseUEContextProcedure(s1, msg.(models.UeContextRelease))
 		return nil, "", r1, nil
 	case models.UeContextTransferRequest:
-		r1, r2 := UEContextTransferProcedure(s1, msg)
+		r1, r2 := UEContextTransferProcedure(s1, msg.(models.UeContextTransferRequest))
 		return r1, "", r2, nil
 	case models.AssignEbiData:
-		r1, r2, r3 := AssignEbiDataProcedure(s1, msg)
+		r1, r2, r3 := AssignEbiDataProcedure(s1, msg.(models.AssignEbiData))
 		return r1, "", r3, r2
 	case models.UeRegStatusUpdateReqData:
-		r1, r2 := RegistrationStatusUpdateProcedure(s1, msg)
+		r1, r2 := RegistrationStatusUpdateProcedure(s1, msg.(models.UeRegStatusUpdateReqData))
 		return r1, "", r2, nil
 	}
 
@@ -40,7 +40,7 @@ func UeContextHandler(s1, s2 string, msg interface{}) (interface{}, string, inte
 }
 
 // TS 29.518 5.2.2.2.3
-func HandleCreateUEContextRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleCreateUEContextRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Infof("Handle Create UE Context Request")
 
 	createUeContextRequest := request.Body.(models.CreateUeContextRequest)
@@ -54,7 +54,7 @@ func HandleCreateUEContextRequest(request *httpwrapper.Request) *httpwrapper.Res
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: ueContextID,
@@ -73,17 +73,16 @@ func HandleCreateUEContextRequest(request *httpwrapper.Request) *httpwrapper.Res
 	if msg.TransferErr != nil {
 		ueContextCreateErr = msg.TransferErr.(*models.UeContextCreateError)
 	}
-	// createUeContextResponse, ueContextCreateError := CreateUEContextProcedure(ueContextID, createUeContextRequest)
+	//createUeContextResponse, ueContextCreateError := CreateUEContextProcedure(ueContextID, createUeContextRequest)
 	if ueContextCreateErr != nil {
-		return httpwrapper.NewResponse(int(ueContextCreateErr.Error.Status), nil, ueContextCreateErr)
+		return http_wrapper.NewResponse(int(ueContextCreateErr.Error.Status), nil, ueContextCreateErr)
 	} else {
-		return httpwrapper.NewResponse(http.StatusCreated, nil, createUeContextRspData)
+		return http_wrapper.NewResponse(http.StatusCreated, nil, createUeContextRspData)
 	}
 }
 
 func CreateUEContextProcedure(ueContextID string, createUeContextRequest models.CreateUeContextRequest) (
-	*models.CreateUeContextResponse, *models.UeContextCreateError,
-) {
+	*models.CreateUeContextResponse, *models.UeContextCreateError) {
 	amfSelf := context.AMF_Self()
 	ueContextCreateData := createUeContextRequest.JsonData
 
@@ -176,12 +175,12 @@ func CreateUEContextProcedure(ueContextID string, createUeContextRequest models.
 	//response.PcfReselectedInd = false // TODO:When  Target AMF selects a nw PCF for AM policy, set the flag to true.
 	//
 
-	// return httpwrapper.NewResponse(http.StatusCreated, nil, createUeContextResponse)
+	// return http_wrapper.NewResponse(http.StatusCreated, nil, createUeContextResponse)
 	return createUeContextResponse, nil
 }
 
 // TS 29.518 5.2.2.2.4
-func HandleReleaseUEContextRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleReleaseUEContextRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Info("Handle Release UE Context Request")
 
 	ueContextRelease := request.Body.(models.UeContextRelease)
@@ -194,7 +193,7 @@ func HandleReleaseUEContextRequest(request *httpwrapper.Request) *httpwrapper.Re
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: ueContextID,
@@ -206,11 +205,11 @@ func HandleReleaseUEContextRequest(request *httpwrapper.Request) *httpwrapper.Re
 	ue.EventChannel.SubmitMessage(sbiMsg)
 	msg := <-sbiMsg.Result
 
-	// problemDetails := ReleaseUEContextProcedure(ueContextID, ueContextRelease)
+	//problemDetails := ReleaseUEContextProcedure(ueContextID, ueContextRelease)
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusNoContent, nil, nil)
+		return http_wrapper.NewResponse(http.StatusNoContent, nil, nil)
 	}
 }
 
@@ -251,7 +250,7 @@ func ReleaseUEContextProcedure(ueContextID string, ueContextRelease models.UeCon
 }
 
 // TS 29.518 5.2.2.2.1
-func HandleUEContextTransferRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleUEContextTransferRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Info("Handle UE Context Transfer Request")
 
 	ueContextTransferRequest := request.Body.(models.UeContextTransferRequest)
@@ -265,7 +264,7 @@ func HandleUEContextTransferRequest(request *httpwrapper.Request) *httpwrapper.R
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: ueContextID,
@@ -281,17 +280,16 @@ func HandleUEContextTransferRequest(request *httpwrapper.Request) *httpwrapper.R
 		ueContextTransferResponse = msg.RespData.(*models.UeContextTransferResponse)
 	}
 
-	// ueContextTransferResponse, problemDetails := UEContextTransferProcedure(ueContextID, ueContextTransferRequest)
+	//ueContextTransferResponse, problemDetails := UEContextTransferProcedure(ueContextID, ueContextTransferRequest)
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusOK, nil, ueContextTransferResponse)
+		return http_wrapper.NewResponse(http.StatusOK, nil, ueContextTransferResponse)
 	}
 }
 
 func UEContextTransferProcedure(ueContextID string, ueContextTransferRequest models.UeContextTransferRequest) (
-	*models.UeContextTransferResponse, *models.ProblemDetails,
-) {
+	*models.UeContextTransferResponse, *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	if ueContextTransferRequest.JsonData == nil {
@@ -321,7 +319,7 @@ func UEContextTransferProcedure(ueContextID string, ueContextTransferRequest mod
 		return nil, problemDetails
 	}
 
-	ueContextTransferResponse := &models.UeContextTransferResponse{}
+	var ueContextTransferResponse *models.UeContextTransferResponse
 	ueContextTransferResponse.JsonData = new(models.UeContextTransferRspData)
 	ueContextTransferRspData := ueContextTransferResponse.JsonData
 
@@ -495,7 +493,7 @@ func buildAmPolicyReqTriggers(triggers []models.RequestTrigger) (amPolicyReqTrig
 }
 
 // TS 29.518 5.2.2.6
-func HandleAssignEbiDataRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleAssignEbiDataRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Info("Handle Assign Ebi Data Request")
 
 	assignEbiData := request.Body.(models.AssignEbiData)
@@ -503,14 +501,14 @@ func HandleAssignEbiDataRequest(request *httpwrapper.Request) *httpwrapper.Respo
 
 	amfSelf := context.AMF_Self()
 
-	// assignedEbiData, assignEbiError, problemDetails := AssignEbiDataProcedure(ueContextID, assignEbiData)
+	//assignedEbiData, assignEbiError, problemDetails := AssignEbiDataProcedure(ueContextID, assignEbiData)
 	ue, ok := amfSelf.AmfUeFindByUeContextID(ueContextID)
 	if !ok {
 		problemDetails := &models.ProblemDetails{
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: ueContextID,
@@ -531,17 +529,16 @@ func HandleAssignEbiDataRequest(request *httpwrapper.Request) *httpwrapper.Respo
 	}
 
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else if assignEbiErr != nil {
-		return httpwrapper.NewResponse(int(assignEbiErr.Error.Status), nil, assignEbiErr)
+		return http_wrapper.NewResponse(int(assignEbiErr.Error.Status), nil, assignEbiErr)
 	} else {
-		return httpwrapper.NewResponse(http.StatusOK, nil, assignEbiRspData)
+		return http_wrapper.NewResponse(http.StatusOK, nil, assignEbiRspData)
 	}
 }
 
 func AssignEbiDataProcedure(ueContextID string, assignEbiData models.AssignEbiData) (
-	*models.AssignedEbiData, *models.AssignEbiError, *models.ProblemDetails,
-) {
+	*models.AssignedEbiData, *models.AssignEbiError, *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	ue, ok := amfSelf.AmfUeFindByUeContextID(ueContextID)
@@ -555,7 +552,7 @@ func AssignEbiDataProcedure(ueContextID string, assignEbiData models.AssignEbiDa
 
 	// TODO: AssignEbiError not used, check it!
 	if _, ok := ue.SmContextFindByPDUSessionID(assignEbiData.PduSessionId); ok {
-		assignedEbiData := &models.AssignedEbiData{}
+		var assignedEbiData *models.AssignedEbiData
 		assignedEbiData.PduSessionId = assignEbiData.PduSessionId
 		return assignedEbiData, nil, nil
 	} else {
@@ -565,7 +562,7 @@ func AssignEbiDataProcedure(ueContextID string, assignEbiData models.AssignEbiDa
 }
 
 // TS 29.518 5.2.2.2.2
-func HandleRegistrationStatusUpdateRequest(request *httpwrapper.Request) *httpwrapper.Response {
+func HandleRegistrationStatusUpdateRequest(request *http_wrapper.Request) *http_wrapper.Response {
 	logger.CommLog.Info("Handle Registration Status Update Request")
 
 	ueRegStatusUpdateReqData := request.Body.(models.UeRegStatusUpdateReqData)
@@ -579,7 +576,7 @@ func HandleRegistrationStatusUpdateRequest(request *httpwrapper.Request) *httpwr
 			Status: http.StatusNotFound,
 			Cause:  "CONTEXT_NOT_FOUND",
 		}
-		return httpwrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
+		return http_wrapper.NewResponse(http.StatusForbidden, nil, problemDetails)
 	}
 	sbiMsg := context.SbiMsg{
 		UeContextId: ueContextID,
@@ -594,17 +591,16 @@ func HandleRegistrationStatusUpdateRequest(request *httpwrapper.Request) *httpwr
 	if msg.RespData != nil {
 		ueRegStatusUpdateRspData = msg.RespData.(*models.UeRegStatusUpdateRspData)
 	}
-	// ueRegStatusUpdateRspData, problemDetails := RegistrationStatusUpdateProcedure(ueContextID, ueRegStatusUpdateReqData)
+	//ueRegStatusUpdateRspData, problemDetails := RegistrationStatusUpdateProcedure(ueContextID, ueRegStatusUpdateReqData)
 	if msg.ProblemDetails != nil {
-		return httpwrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
+		return http_wrapper.NewResponse(int(msg.ProblemDetails.(*models.ProblemDetails).Status), nil, msg.ProblemDetails.(*models.ProblemDetails))
 	} else {
-		return httpwrapper.NewResponse(http.StatusOK, nil, ueRegStatusUpdateRspData)
+		return http_wrapper.NewResponse(http.StatusOK, nil, ueRegStatusUpdateRspData)
 	}
 }
 
 func RegistrationStatusUpdateProcedure(ueContextID string, ueRegStatusUpdateReqData models.UeRegStatusUpdateReqData) (
-	*models.UeRegStatusUpdateRspData, *models.ProblemDetails,
-) {
+	*models.UeRegStatusUpdateRspData, *models.ProblemDetails) {
 	amfSelf := context.AMF_Self()
 
 	// ueContextID must be a 5g GUTI (TS 29.518 6.1.3.2.4.5.1)
diff --git a/service/amf_server.go b/service/amf_server.go
index 1108461..c037c4e 100644
--- a/service/amf_server.go
+++ b/service/amf_server.go
@@ -24,14 +24,17 @@ type Server struct {
 }
 
 func (s *Server) HandleMessage(srv sdcoreAmfServer.NgapService_HandleMessageServer) error {
-	Amf2RanMsgChan := make(chan *sdcoreAmfServer.AmfMessage, 100)
+	var Amf2RanMsgChan chan *sdcoreAmfServer.AmfMessage
+	Amf2RanMsgChan = make(chan *sdcoreAmfServer.AmfMessage, 100)
 
 	go func() {
 		for {
-			msg1 := <-Amf2RanMsgChan
-			log.Printf("Send Response message body from client (%s): Verbose - %s, MsgType %v GnbId: %v", msg1.AmfId, msg1.VerboseMsg, msg1.Msgtype, msg1.GnbId)
-			if err := srv.Send(msg1); err != nil {
-				log.Println("Error in sending response")
+			select {
+			case msg1 := <-Amf2RanMsgChan:
+				log.Printf("Send Response message body from client (%s): Verbose - %s, MsgType %v GnbId: %v", msg1.AmfId, msg1.VerboseMsg, msg1.Msgtype, msg1.GnbId)
+				if err := srv.Send(msg1); err != nil {
+					log.Println("Error in sending response")
+				}
 			}
 		}
 	}()
@@ -60,17 +63,11 @@ func (s *Server) HandleMessage(srv sdcoreAmfServer.NgapService_HandleMessageServ
 						log.Printf("RanID: %v for GnbId: %v", ran.RanID(), req.GnbId)
 						rsp.GnbId = req.GnbId
 
-						// send nf(gnb) status notification
-						gnbStatus := mi.MetricEvent{
-							EventType: mi.CNfStatusEvt,
-							NfStatusData: mi.CNfStatus{
-								NfType:   mi.NfTypeGnb,
-								NfStatus: mi.NfStatusConnected, NfName: req.GnbId,
-							},
-						}
-						if err := metrics.StatWriter.PublishNfStatusEvent(gnbStatus); err != nil {
-							log.Printf("Error publishing NfStatusEvent: %v", err)
-						}
+						//send nf(gnb) status notification
+						gnbStatus := mi.MetricEvent{EventType: mi.CNfStatusEvt,
+							NfStatusData: mi.CNfStatus{NfType: mi.NfTypeGnb,
+								NfStatus: mi.NfStatusConnected, NfName: req.GnbId}}
+						metrics.StatWriter.PublishNfStatusEvent(gnbStatus)
 					}
 				}
 				ran.Amf2RanMsgChan = Amf2RanMsgChan
@@ -80,30 +77,18 @@ func (s *Server) HandleMessage(srv sdcoreAmfServer.NgapService_HandleMessageServ
 			} else if req.Msgtype == sdcoreAmfServer.MsgType_GNB_DISC {
 				log.Println("GNB disconnected")
 				ngap.HandleSCTPNotificationLb(req.GnbId)
-				// send nf(gnb) status notification
-				gnbStatus := mi.MetricEvent{
-					EventType: mi.CNfStatusEvt,
-					NfStatusData: mi.CNfStatus{
-						NfType:   mi.NfTypeGnb,
-						NfStatus: mi.NfStatusDisconnected, NfName: req.GnbId,
-					},
-				}
-				if err := metrics.StatWriter.PublishNfStatusEvent(gnbStatus); err != nil {
-					log.Printf("Error publishing NfStatusEvent: %v", err)
-				}
+				//send nf(gnb) status notification
+				gnbStatus := mi.MetricEvent{EventType: mi.CNfStatusEvt,
+					NfStatusData: mi.CNfStatus{NfType: mi.NfTypeGnb,
+						NfStatus: mi.NfStatusDisconnected, NfName: req.GnbId}}
+				metrics.StatWriter.PublishNfStatusEvent(gnbStatus)
 			} else if req.Msgtype == sdcoreAmfServer.MsgType_GNB_CONN {
 				log.Println("New GNB Connected ")
-				// send nf(gnb) status notification
-				gnbStatus := mi.MetricEvent{
-					EventType: mi.CNfStatusEvt,
-					NfStatusData: mi.CNfStatus{
-						NfType:   mi.NfTypeGnb,
-						NfStatus: mi.NfStatusConnected, NfName: req.GnbId,
-					},
-				}
-				if err := metrics.StatWriter.PublishNfStatusEvent(gnbStatus); err != nil {
-					log.Printf("Error publishing NfStatusEvent: %v", err)
-				}
+				//send nf(gnb) status notification
+				gnbStatus := mi.MetricEvent{EventType: mi.CNfStatusEvt,
+					NfStatusData: mi.CNfStatus{NfType: mi.NfTypeGnb,
+						NfStatus: mi.NfStatusConnected, NfName: req.GnbId}}
+				metrics.StatWriter.PublishNfStatusEvent(gnbStatus)
 			} else {
 				ngap.DispatchLb(req, Amf2RanMsgChan)
 			}
@@ -113,6 +98,7 @@ func (s *Server) HandleMessage(srv sdcoreAmfServer.NgapService_HandleMessageServ
 }
 
 func StartGrpcServer(port int) {
+
 	endpt := fmt.Sprintf(":%d", port)
 	fmt.Println("Listen - ", endpt)
 	lis, err := net.Listen("tcp", endpt)
diff --git a/service/init.go b/service/init.go
index db783fd..64bc609 100644
--- a/service/init.go
+++ b/service/init.go
@@ -11,7 +11,7 @@ import (
 	"bufio"
 	"fmt"
 	"net/http"
-	_ "net/http/pprof" // Using package only for invoking initialization.
+	_ "net/http/pprof" //Using package only for invoking initialization.
 	"os"
 	"os/exec"
 	"os/signal"
@@ -20,8 +20,15 @@ import (
 	"syscall"
 	"time"
 
-	"github.com/fsnotify/fsnotify"
+	nrf_cache "github.com/omec-project/nrf/nrfcache"
+
 	"github.com/gin-contrib/cors"
+	"github.com/sirupsen/logrus"
+	"github.com/urfave/cli"
+
+	gClient "github.com/Nikhil690/connsert/proto/client"
+	protos "github.com/Nikhil690/connsert/proto/sdcoreConfig"
+	"github.com/fsnotify/fsnotify"
 	"github.com/omec-project/amf/communication"
 	"github.com/omec-project/amf/consumer"
 	"github.com/omec-project/amf/context"
@@ -40,33 +47,27 @@ import (
 	"github.com/omec-project/amf/producer/callback"
 	"github.com/omec-project/amf/util"
 	aperLogger "github.com/omec-project/aper/logger"
-	gClient "github.com/omec-project/config5g/proto/client"
-	protos "github.com/omec-project/config5g/proto/sdcoreConfig"
+	"github.com/omec-project/fsm"
+	fsmLogger "github.com/omec-project/fsm/logger"
 	"github.com/omec-project/http2_util"
 	"github.com/omec-project/logger_util"
 	nasLogger "github.com/omec-project/nas/logger"
 	ngapLogger "github.com/omec-project/ngap/logger"
-	nrf_cache "github.com/omec-project/nrf/nrfcache"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/fsm"
-	fsmLogger "github.com/omec-project/util/fsm/logger"
-	"github.com/omec-project/util/path_util"
-	pathUtilLogger "github.com/omec-project/util/path_util/logger"
-	"github.com/sirupsen/logrus"
+	"github.com/omec-project/path_util"
+	pathUtilLogger "github.com/omec-project/path_util/logger"
 	"github.com/spf13/viper"
-	"github.com/urfave/cli"
 )
 
 type AMF struct{}
 
-const IMSI_PREFIX = "imsi-"
-
 var RocUpdateConfigChannel chan bool
 
 type (
 	// Config information.
 	Config struct {
-		amfcfg string
+		amfcfg         string
+		heartBeatTimer string
 	}
 )
 
@@ -117,13 +118,11 @@ func (amf *AMF) Initialize(c *cli.Context) error {
 
 	amf.setLogLevel()
 
-	// Initiating a server for profiling
+	//Initiating a server for profiling
 	if factory.AmfConfig.Configuration.DebugProfilePort != 0 {
 		addr := fmt.Sprintf(":%d", factory.AmfConfig.Configuration.DebugProfilePort)
 		go func() {
-			if err := http.ListenAndServe(addr, nil); err != nil {
-				initLog.Errorln(err)
-			}
+			http.ListenAndServe(addr, nil)
 		}()
 	}
 
@@ -135,8 +134,8 @@ func (amf *AMF) Initialize(c *cli.Context) error {
 		viper.SetConfigName("amfcfg.conf")
 		viper.SetConfigType("yaml")
 		viper.AddConfigPath("/free5gc/config")
-		err = viper.ReadInConfig() // Find and read the config file
-		if err != nil {            // Handle errors reading the config file
+		err := viper.ReadInConfig() // Find and read the config file
+		if err != nil {             // Handle errors reading the config file
 			return err
 		}
 	} else if os.IsNotExist(err) {
@@ -148,13 +147,13 @@ func (amf *AMF) Initialize(c *cli.Context) error {
 		factory.AmfConfig.Configuration.SupportTAIList = nil
 		factory.AmfConfig.Configuration.PlmnSupportList = nil
 		initLog.Infoln("Reading Amf related configuration from ROC")
-		client := gClient.ConnectToConfigServer(factory.AmfConfig.Configuration.WebuiUri)
+		client := gClient.ConnectToConfigServer("webui:9876")
 		configChannel := client.PublishOnConfigChange(true)
 		go amf.UpdateConfig(configChannel)
 	} else {
 		go func() {
 			logger.GrpcLog.Infoln("Reading Amf Configuration from Helm")
-			// sending true to the channel for sending NFRegistration to NRF
+			//sending true to the channel for sending NFRegistration to NRF
 			RocUpdateConfigChannel <- true
 		}()
 	}
@@ -295,7 +294,6 @@ func (amf *AMF) FilterCli(c *cli.Context) (args []string) {
 
 func (amf *AMF) Start() {
 	initLog.Infoln("Server started")
-	var err error
 
 	router := logger_util.NewGinWithLogrus(logger.GinLog)
 	router.Use(cors.New(cors.Config{
@@ -327,16 +325,13 @@ func (amf *AMF) Start() {
 
 	go metrics.InitMetrics()
 
-	if err = metrics.InitialiseKafkaStream(factory.AmfConfig.Configuration); err != nil {
+	if err := metrics.InitialiseKafkaStream(factory.AmfConfig.Configuration); err != nil {
 		initLog.Errorf("initialise kafka stream failed, %v ", err.Error())
 	}
 
 	self := context.AMF_Self()
 	util.InitAmfContext(self)
-	self.Drsm, err = util.InitDrsm()
-	if err != nil {
-		initLog.Errorf("initialise DRSM failed, %v", err.Error())
-	}
+	self.Drsm, _ = util.InitDrsm()
 
 	addr := fmt.Sprintf("%s:%d", self.BindingIPv4, self.SBIPort)
 
@@ -492,7 +487,7 @@ func (amf *AMF) StartKeepAliveTimer(nfProfile models.NfProfile) {
 		nfProfile.HeartBeatTimer = 60
 	}
 	logger.InitLog.Infof("Started KeepAlive Timer: %v sec", nfProfile.HeartBeatTimer)
-	// AfterFunc starts timer and waits for KeepAliveTimer to elapse and then calls amf.UpdateNF function
+	//AfterFunc starts timer and waits for KeepAliveTimer to elapse and then calls amf.UpdateNF function
 	KeepAliveTimer = time.AfterFunc(time.Duration(nfProfile.HeartBeatTimer)*time.Second, amf.UpdateNF)
 }
 
@@ -508,11 +503,11 @@ func (amf *AMF) BuildAndSendRegisterNFInstance() (models.NfProfile, error) {
 	self := context.AMF_Self()
 	profile, err := consumer.BuildNFInstance(self)
 	if err != nil {
-		initLog.Errorf("Build AMF Profile Error: %v", err)
+		initLog.Error("Build AMF Profile Error: %v", err)
 		return profile, err
 	}
 	initLog.Infof("Pcf Profile Registering to NRF: %v", profile)
-	// Indefinite attempt to register until success
+	//Indefinite attempt to register until success
 	profile, _, self.NfId, err = consumer.SendRegisterNFInstance(self.NrfUri, self.NfId, profile)
 	return profile, err
 }
@@ -525,7 +520,7 @@ func (amf *AMF) UpdateNF() {
 		initLog.Warnf("KeepAlive timer has been stopped.")
 		return
 	}
-	// setting default value 30 sec
+	//setting default value 30 sec
 	var heartBeatTimer int32 = 60
 	pitem := models.PatchItem{
 		Op:    "replace",
@@ -537,21 +532,15 @@ func (amf *AMF) UpdateNF() {
 	nfProfile, problemDetails, err := consumer.SendUpdateNFInstance(patchItem)
 	if problemDetails != nil {
 		initLog.Errorf("AMF update to NRF ProblemDetails[%v]", problemDetails)
-		// 5xx response from NRF, 404 Not Found, 400 Bad Request
+		//5xx response from NRF, 404 Not Found, 400 Bad Request
 		if (problemDetails.Status/100) == 5 ||
 			problemDetails.Status == 404 || problemDetails.Status == 400 {
-			// register with NRF full profile
+			//register with NRF full profile
 			nfProfile, err = amf.BuildAndSendRegisterNFInstance()
-			if err != nil {
-				initLog.Errorf("Could not register to NRF Error[%s]", err.Error())
-			}
 		}
 	} else if err != nil {
 		initLog.Errorf("AMF update to NRF Error[%s]", err.Error())
 		nfProfile, err = amf.BuildAndSendRegisterNFInstance()
-		if err != nil {
-			initLog.Errorf("Could not register to NRF Error[%s]", err.Error())
-		}
 	}
 
 	if nfProfile.HeartBeatTimer != 0 {
@@ -559,7 +548,7 @@ func (amf *AMF) UpdateNF() {
 		heartBeatTimer = nfProfile.HeartBeatTimer
 	}
 	logger.InitLog.Debugf("Restarted KeepAlive Timer: %v sec", heartBeatTimer)
-	// restart timer with received HeartBeatTimer value
+	//restart timer with received HeartBeatTimer value
 	KeepAliveTimer = time.AfterFunc(time.Duration(heartBeatTimer)*time.Second, amf.UpdateNF)
 }
 
@@ -574,13 +563,16 @@ func (amf *AMF) UpdateAmfConfiguration(plmn factory.PlmnSupportItem, taiList []m
 				if nssai_r == nssai {
 					found = true
 					if opType == protos.OpType_SLICE_DELETE {
-						factory.AmfConfig.Configuration.PlmnSupportList[plmnindex].SNssaiList = append(factory.AmfConfig.Configuration.PlmnSupportList[plmnindex].SNssaiList[:i], p.SNssaiList[i+1:]...)
+						factory.AmfConfig.Configuration.PlmnSupportList[plmnindex].SNssaiList =
+							append(factory.AmfConfig.Configuration.PlmnSupportList[plmnindex].SNssaiList[:i], p.SNssaiList[i+1:]...)
 						if len(factory.AmfConfig.Configuration.PlmnSupportList[plmnindex].SNssaiList) == 0 {
-							factory.AmfConfig.Configuration.PlmnSupportList = append(factory.AmfConfig.Configuration.PlmnSupportList[:plmnindex],
-								factory.AmfConfig.Configuration.PlmnSupportList[plmnindex+1:]...)
+							factory.AmfConfig.Configuration.PlmnSupportList =
+								append(factory.AmfConfig.Configuration.PlmnSupportList[:plmnindex],
+									factory.AmfConfig.Configuration.PlmnSupportList[plmnindex+1:]...)
 
-							factory.AmfConfig.Configuration.ServedGumaiList = append(factory.AmfConfig.Configuration.ServedGumaiList[:plmnindex],
-								factory.AmfConfig.Configuration.ServedGumaiList[plmnindex+1:]...)
+							factory.AmfConfig.Configuration.ServedGumaiList =
+								append(factory.AmfConfig.Configuration.ServedGumaiList[:plmnindex],
+									factory.AmfConfig.Configuration.ServedGumaiList[plmnindex+1:]...)
 						}
 					}
 					break
@@ -589,26 +581,49 @@ func (amf *AMF) UpdateAmfConfiguration(plmn factory.PlmnSupportItem, taiList []m
 
 			if !found && opType != protos.OpType_SLICE_DELETE {
 				logger.GrpcLog.Infof("plmn found but slice not found in AMF Configuration")
-				factory.AmfConfig.Configuration.PlmnSupportList[plmnindex].SNssaiList = append(factory.AmfConfig.Configuration.PlmnSupportList[plmnindex].SNssaiList, nssai_r)
+				factory.AmfConfig.Configuration.PlmnSupportList[plmnindex].SNssaiList =
+					append(factory.AmfConfig.Configuration.PlmnSupportList[plmnindex].SNssaiList, nssai_r)
 			}
 			break
 		}
 	}
 
-	guami := models.Guami{PlmnId: &plmn.PlmnId, AmfId: "cafe00"}
+	var guami = models.Guami{PlmnId: &plmn.PlmnId, AmfId: "cafe00"}
 	if !plmnFound && opType != protos.OpType_SLICE_DELETE {
-		factory.AmfConfig.Configuration.PlmnSupportList = append(factory.AmfConfig.Configuration.PlmnSupportList, plmn)
-		factory.AmfConfig.Configuration.ServedGumaiList = append(factory.AmfConfig.Configuration.ServedGumaiList, guami)
-	}
-	logger.GrpcLog.Infof("SupportedPlmnLIst: %v, SupportGuamiLIst: %v received fromRoc\n", plmn, guami)
-	logger.GrpcLog.Infof("SupportedPlmnLIst: %v, SupportGuamiLIst: %v in AMF\n", factory.AmfConfig.Configuration.PlmnSupportList,
-		factory.AmfConfig.Configuration.ServedGumaiList)
-	// same plmn received but Tacs in gnb updated
+		factory.AmfConfig.Configuration.PlmnSupportList =
+			append(factory.AmfConfig.Configuration.PlmnSupportList, plmn)
+		factory.AmfConfig.Configuration.ServedGumaiList =
+			append(factory.AmfConfig.Configuration.ServedGumaiList, guami)
+	}
+	logger.GrpcLog.Infof("+-------------------------------------------------+")
+	logger.GrpcLog.Infof("| Recieved from ROC      | PLMN  |  SST  |   SD   |")
+	for _, nsai := range plmn.SNssaiList {
+		logger.GrpcLog.Infof("| SupportedPlmnList      | %s%s |  %d    | %s |", plmn.PlmnId.Mcc, plmn.PlmnId.Mnc, nsai.Sst, nsai.Sd)
+	}
+	// logger.GrpcLog.Infof("|%-10s|%-15s|\n", "SupportGuamiLIst :", guami.AmfId)
+	logger.GrpcLog.Infof("+-------------------------------------------------+")
+	logger.GrpcLog.Infof("| Recieved from HEXA AMF| PLMN  |  SST  |   SD   |")
+	for _, list := range factory.AmfConfig.Configuration.PlmnSupportList {
+		for _, nsai := range list.SNssaiList {
+			logger.GrpcLog.Infof("| SupportedPlmnList      | %s%s |  %d    | %s |", plmn.PlmnId.Mcc, plmn.PlmnId.Mnc, nsai.Sst, nsai.Sd)
+		}
+	}
+	logger.GrpcLog.Infof("+-------------------------------------------------+")
+	// for _, kent := range factory.AmfConfig.Configuration.ServedGumaiList {
+	// 	logger.GrpcLog.Infof(" |%-10s|%-15s|\n", "SupportGuamiLIst :", kent.AmfId)
+	// }
+
+	// logger.GrpcLog.Infof("-------------------------------------------\n")
+
+	// logger.GrpcLog.Infof("SupportedPlmnLIst: %v, SupportGuamiLIst: %v received fromRoc\n", plmn, guami)
+	// logger.GrpcLog.Infof("SupportedPlmnLIst: %v, SupportGuamiLIst: %v in AMF\n", factory.AmfConfig.Configuration.PlmnSupportList,
+	// 	factory.AmfConfig.Configuration.ServedGumaiList)
+	//same plmn received but Tacs in gnb updated
 	nssai_r := plmn.SNssaiList[0]
 	slice := strconv.FormatInt(int64(nssai_r.Sst), 10) + nssai_r.Sd
 	delete(factory.AmfConfig.Configuration.SliceTaiList, slice)
 	if opType != protos.OpType_SLICE_DELETE {
-		// maintaining slice level tai List
+		//maintaining slice level tai List
 		if factory.AmfConfig.Configuration.SliceTaiList == nil {
 			factory.AmfConfig.Configuration.SliceTaiList = make(map[string][]models.Tai)
 		}
@@ -617,7 +632,7 @@ func (amf *AMF) UpdateAmfConfiguration(plmn factory.PlmnSupportItem, taiList []m
 
 	amf.UpdateSupportedTaiList()
 	logger.GrpcLog.Infoln("Gnb Updated in existing Plmn, SupportTAILIst received from Roc: ", taiList)
-	logger.GrpcLog.Infoln("SupportTAILIst in AMF", factory.AmfConfig.Configuration.SupportTAIList)
+	logger.GrpcLog.Infoln("SupportTAILIst in HEXA-AMF", factory.AmfConfig.Configuration.SupportTAIList)
 }
 
 func (amf *AMF) UpdateSupportedTaiList() {
@@ -625,28 +640,88 @@ func (amf *AMF) UpdateSupportedTaiList() {
 	for _, slice := range factory.AmfConfig.Configuration.SliceTaiList {
 		for _, tai := range slice {
 			logger.GrpcLog.Infoln("Tai list present in Slice", tai, factory.AmfConfig.Configuration.SupportTAIList)
-			factory.AmfConfig.Configuration.SupportTAIList = append(factory.AmfConfig.Configuration.SupportTAIList, tai)
+			factory.AmfConfig.Configuration.SupportTAIList =
+				append(factory.AmfConfig.Configuration.SupportTAIList, tai)
 		}
 	}
 }
-
 func (amf *AMF) UpdateConfig(commChannel chan *protos.NetworkSliceResponse) bool {
 	for rsp := range commChannel {
-		logger.GrpcLog.Infof("Received updateConfig in the amf app : %v", rsp)
+		logger.GrpcLog.Info("Received updateConfig in the amf app :")
+		logger.GrpcLog.Info("+---------------------------------------------+")
+		logger.GrpcLog.Infof("| %-43s |\n", "Network Slice")
+		logger.GrpcLog.Infof("|---------------------------------------------|")
+		// logger.GrpcLog.Infof("| %15s | %10d |\n", "RestartCounter", rsp.RestartCounter)
+		// logger.GrpcLog.Infof("| %15s | %10d |\n", "ConfigUpdated", rsp.ConfigUpdated)
+		for _, slice := range rsp.NetworkSlice {
+			logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Name", slice.Name)
+			logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Sst", slice.Nssai.Sst)
+			logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Sd", slice.Nssai.Sd)
+			logger.GrpcLog.Infof("|---------------------------------------------|")
+			for _, group := range slice.DeviceGroup {
+				logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Device Group", group.Name)
+				logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "IP Domain Details", group.IpDomainDetails.Name)
+				logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "DNN Name", group.IpDomainDetails.DnnName)
+				logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "UE Pool", group.IpDomainDetails.UePool)
+				logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "DNS Primary", group.IpDomainDetails.DnsPrimary)
+				logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "MTU", group.IpDomainDetails.Mtu)
+				logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "DnnMbrUplink", group.IpDomainDetails.UeDnnQos.DnnMbrUplink)
+				logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "DnnMbrDownlink", group.IpDomainDetails.UeDnnQos.DnnMbrDownlink)
+				logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Traffic Class", group.IpDomainDetails.UeDnnQos.TrafficClass.Name)
+				// logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "QCI", group.IpDomainDetails.UeDnnQos.TrafficClass.Qci)
+				// logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "ARP", group.IpDomainDetails.UeDnnQos.TrafficClass.Arp)
+				// logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "PDB", group.IpDomainDetails.UeDnnQos.TrafficClass.Pdb)
+				// logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "PELR", group.IpDomainDetails.UeDnnQos.TrafficClass.Pelr)
+				// for _, imdetails := range group.Imsi {
+				// 	logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "IMSI Supported", imdetails)
+				// }
+
+				for i, imdetails := range group.Imsi {
+					label := ""
+					if i == len(group.Imsi)/2 {
+						label = "IMSI_Supported"
+					}
+					logger.GrpcLog.Infof("| %-18s  | %-21s |\n", label, imdetails)
+				}
+				logger.GrpcLog.Info("|---------------------------------------------|")
+			}
+			logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Site", slice.Site.SiteName)
+			for _, gnb := range slice.Site.Gnb {
+				logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "GNB", gnb.Name)
+				logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "TAC", gnb.Tac)
+				logger.GrpcLog.Info("|---------------------------------------------|")
+			}
+			logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "MCC", slice.Site.Plmn.Mcc)
+			logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "MNC", slice.Site.Plmn.Mnc)
+			logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "UPF", slice.Site.Upf.UpfName)
+			for _, appfilter := range slice.AppFilters.PccRuleBase {
+				for _, flowinfo := range appfilter.FlowInfos {
+					// logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Flow Description", flowinfo.FlowDesc)
+					logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Traffic Class", flowinfo.TosTrafficClass)
+					logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Flow Direction", flowinfo.FlowDir)
+					logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Flow Status", flowinfo.FlowStatus)
+				}
+				logger.GrpcLog.Infof("| %-18s  | %-21s |\n", "Rule ID", appfilter.RuleId)
+				// logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "Var5qi", appfilter.Qos.Var5Qi)
+				// logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "ARP:PL", appfilter.Qos.Arp.PL)
+				// logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "ARP:PC", appfilter.Qos.Arp.PC)
+				// logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "ARP:PV", appfilter.Qos.Arp.PV)
+				logger.GrpcLog.Infof("| %-18s  | %-21d |\n", "Priority", appfilter.Priority)
+			}
+			logger.GrpcLog.Info("+---------------------------------------------+")
+		}
 		var tai []models.Tai
+		var plmnList []*factory.PlmnSupportItem
 		for _, ns := range rsp.NetworkSlice {
 			var snssai *models.Snssai
 			logger.GrpcLog.Infoln("Network Slice Name ", ns.Name)
 			if ns.Nssai != nil {
 				snssai = new(models.Snssai)
-				val, err := strconv.ParseInt(ns.Nssai.Sst, 10, 64)
-				if err != nil {
-					logger.GrpcLog.Errorln(err)
-				}
+				val, _ := strconv.ParseInt(ns.Nssai.Sst, 10, 64)
 				snssai.Sst = int32(val)
 				snssai.Sd = ns.Nssai.Sd
 			}
-			// inform connected UEs with update slices
+			//inform connected UEs with update slices
 			if len(ns.DeletedImsis) > 0 {
 				HandleImsiDeleteFromNetworkSlice(ns)
 			}
@@ -661,9 +736,10 @@ func (amf *AMF) UpdateConfig(commChannel chan *protos.NetworkSliceResponse) bool
 				if site.Plmn != nil {
 					plmn := new(factory.PlmnSupportItem)
 
-					logger.GrpcLog.Infoln("Plmn mcc ", site.Plmn.Mcc)
+					logger.GrpcLog.Infof("%s: %s%s", "Plmn:", site.Plmn.Mcc, site.Plmn.Mnc)
 					plmn.PlmnId.Mnc = site.Plmn.Mnc
 					plmn.PlmnId.Mcc = site.Plmn.Mcc
+					plmnList = append(plmnList, plmn)
 
 					if ns.Nssai != nil {
 						plmn.SNssaiList = append(plmn.SNssaiList, *snssai)
@@ -683,12 +759,13 @@ func (amf *AMF) UpdateConfig(commChannel chan *protos.NetworkSliceResponse) bool
 				} else {
 					logger.GrpcLog.Infoln("Plmn not present in the message ")
 				}
+
 			}
-		}
+		} // end of network slice for loop
 
-		// Update PlmnSupportList/ServedGuamiList/ServedTAIList in Amf Config
-		// factory.AmfConfig.Configuration.ServedGumaiList = nil
-		// factory.AmfConfig.Configuration.PlmnSupportList = nil
+		//Update PlmnSupportList/ServedGuamiList/ServedTAIList in Amf Config
+		//factory.AmfConfig.Configuration.ServedGumaiList = nil
+		//factory.AmfConfig.Configuration.PlmnSupportList = nil
 		if len(factory.AmfConfig.Configuration.ServedGumaiList) > 0 {
 			RocUpdateConfigChannel <- true
 		}
@@ -697,7 +774,6 @@ func (amf *AMF) UpdateConfig(commChannel chan *protos.NetworkSliceResponse) bool
 }
 
 func (amf *AMF) SendNFProfileUpdateToNrf() {
-	// for rocUpdateConfig := range RocUpdateConfigChannel {
 	for rocUpdateConfig := range RocUpdateConfigChannel {
 		if rocUpdateConfig {
 			self := context.AMF_Self()
@@ -715,7 +791,7 @@ func (amf *AMF) SendNFProfileUpdateToNrf() {
 			if prof, _, nfId, err := consumer.SendRegisterNFInstance(self.NrfUri, self.NfId, profile); err != nil {
 				logger.CfgLog.Warnf("Send Register NF Instance with updated profile failed: %+v", err)
 			} else {
-				// stop keepAliveTimer if its running and start the timer
+				//stop keepAliveTimer if its running and start the timer
 				amf.StartKeepAliveTimer(prof)
 				self.NfId = nfId
 				logger.CfgLog.Infof("Sent Register NF Instance with updated profile")
@@ -726,67 +802,51 @@ func (amf *AMF) SendNFProfileUpdateToNrf() {
 
 func UeConfigSliceDeleteHandler(supi, sst, sd string, msg interface{}) {
 	amfSelf := context.AMF_Self()
-	ue, _ := amfSelf.AmfUeFindBySupi(IMSI_PREFIX + supi)
+	ue, _ := amfSelf.AmfUeFindBySupi("imsi-" + supi)
+	logger.GmmLog.Info(ue)
 
 	// Triggers for NwInitiatedDeRegistration
 	// - Only 1 Allowed Nssai is exist and its slice information matched
 	ns := msg.(*protos.NetworkSlice)
 	if len(ue.AllowedNssai[models.AccessType__3_GPP_ACCESS]) == 1 {
-		st, err := strconv.Atoi(ns.Nssai.Sst)
-		if err != nil {
-			logger.CfgLog.Errorln(err)
-		}
+		st, _ := strconv.Atoi(ns.Nssai.Sst)
 		if ue.AllowedNssai[models.AccessType__3_GPP_ACCESS][0].AllowedSnssai.Sst == int32(st) &&
 			ue.AllowedNssai[models.AccessType__3_GPP_ACCESS][0].AllowedSnssai.Sd == ns.Nssai.Sd {
-			err := gmm.GmmFSM.SendEvent(ue.State[models.AccessType__3_GPP_ACCESS], gmm.NwInitiatedDeregistrationEvent, fsm.ArgsType{
+			gmm.GmmFSM.SendEvent(ue.State[models.AccessType__3_GPP_ACCESS], gmm.NwInitiatedDeregistrationEvent, fsm.ArgsType{
 				gmm.ArgAmfUe:      ue,
 				gmm.ArgAccessType: models.AccessType__3_GPP_ACCESS,
 			})
-			if err != nil {
-				logger.CfgLog.Errorln(err)
-			}
 		} else {
 			logger.CfgLog.Infof("Deleted slice not matched with slice info in UEContext")
 		}
 	} else {
 		var Nssai models.Snssai
-		st, err := strconv.Atoi(ns.Nssai.Sst)
-		if err != nil {
-			logger.CfgLog.Errorln(err)
-		}
+		st, _ := strconv.Atoi(ns.Nssai.Sst)
 		Nssai.Sst = int32(st)
 		Nssai.Sd = ns.Nssai.Sd
-		err = gmm.GmmFSM.SendEvent(ue.State[models.AccessType__3_GPP_ACCESS], gmm.SliceInfoDeleteEvent, fsm.ArgsType{
+		gmm.GmmFSM.SendEvent(ue.State[models.AccessType__3_GPP_ACCESS], gmm.SliceInfoDeleteEvent, fsm.ArgsType{
 			gmm.ArgAmfUe:      ue,
 			gmm.ArgAccessType: models.AccessType__3_GPP_ACCESS,
 			gmm.ArgNssai:      Nssai,
 		})
-		if err != nil {
-			logger.CfgLog.Errorln(err)
-		}
 	}
 }
 
 func UeConfigSliceAddHandler(supi, sst, sd string, msg interface{}) {
 	amfSelf := context.AMF_Self()
-	ue, _ := amfSelf.AmfUeFindBySupi(IMSI_PREFIX + supi)
+	ue, _ := amfSelf.AmfUeFindBySupi("imsi-" + supi)
+	logger.GmmLog.Info(ue)
 
 	ns := msg.(*protos.NetworkSlice)
 	var Nssai models.Snssai
-	st, err := strconv.Atoi(ns.Nssai.Sst)
-	if err != nil {
-		logger.CfgLog.Errorln(err)
-	}
+	st, _ := strconv.Atoi(ns.Nssai.Sst)
 	Nssai.Sst = int32(st)
 	Nssai.Sd = ns.Nssai.Sd
-	err = gmm.GmmFSM.SendEvent(ue.State[models.AccessType__3_GPP_ACCESS], gmm.SliceInfoAddEvent, fsm.ArgsType{
+	gmm.GmmFSM.SendEvent(ue.State[models.AccessType__3_GPP_ACCESS], gmm.SliceInfoAddEvent, fsm.ArgsType{
 		gmm.ArgAmfUe:      ue,
 		gmm.ArgAccessType: models.AccessType__3_GPP_ACCESS,
 		gmm.ArgNssai:      Nssai,
 	})
-	if err != nil {
-		logger.CfgLog.Errorln(err)
-	}
 }
 
 func HandleImsiDeleteFromNetworkSlice(slice *protos.NetworkSlice) {
@@ -796,12 +856,13 @@ func HandleImsiDeleteFromNetworkSlice(slice *protos.NetworkSlice) {
 
 	for _, supi := range slice.DeletedImsis {
 		amfSelf := context.AMF_Self()
-		ue, ok = amfSelf.AmfUeFindBySupi(IMSI_PREFIX + supi)
+		ue, ok = amfSelf.AmfUeFindBySupi("imsi-" + supi)
+		logger.GmmLog.Info(ue)
 		if !ok {
 			logger.CfgLog.Infof("the UE [%v] is not Registered with the 5G-Core", supi)
 			continue
 		}
-		// publish the event to ue channel
+		//publish the event to ue channel
 		configMsg := context.ConfigMsg{
 			Supi: supi,
 			Msg:  slice,
@@ -821,12 +882,14 @@ func HandleImsiAddInNetworkSlice(slice *protos.NetworkSlice) {
 
 	for _, supi := range slice.AddUpdatedImsis {
 		amfSelf := context.AMF_Self()
-		ue, ok = amfSelf.AmfUeFindBySupi(IMSI_PREFIX + supi)
+		ue, ok = amfSelf.AmfUeFindBySupi("imsi-" + supi)
+		logger.GmmLog.Info(ue)
+
 		if !ok {
 			logger.CfgLog.Infof("the UE [%v] is not Registered with the 5G-Core", supi)
 			continue
 		}
-		// publish the event to ue channel
+		//publish the event to ue channel
 		configMsg := context.ConfigMsg{
 			Supi: supi,
 			Msg:  slice,
diff --git a/util/convert.go b/util/convert.go
index ce8c043..64eef1c 100644
--- a/util/convert.go
+++ b/util/convert.go
@@ -42,6 +42,7 @@ func SeperateAmfId(amfid string) (regionId, setId, ptrId string, err error) {
 	regionId = amfid[:2]
 	byteArray, err1 := hex.DecodeString(amfid[2:])
 	if err1 != nil {
+
 		err = err1
 		return
 	}
diff --git a/util/init_context.go b/util/init_context.go
index 1a99f2d..73a9113 100644
--- a/util/init_context.go
+++ b/util/init_context.go
@@ -11,12 +11,14 @@ import (
 	"time"
 
 	"github.com/google/uuid"
+	"github.com/omec-project/util/drsm"
+
 	"github.com/omec-project/amf/context"
 	"github.com/omec-project/amf/factory"
 	"github.com/omec-project/amf/logger"
+	"github.com/omec-project/amf/metrics"
 	"github.com/omec-project/nas/security"
 	"github.com/omec-project/openapi/models"
-	"github.com/omec-project/util/drsm"
 )
 
 func InitDrsm() (drsm.DrsmInterface, error) {
@@ -26,7 +28,7 @@ func InitDrsm() (drsm.DrsmInterface, error) {
 	podId := drsm.PodId{PodName: podname, PodInstance: context.AMF_Self().NfId, PodIp: podip}
 	logger.UtilLog.Debugf("PodId: %v", podId)
 	dbUrl := "mongodb://mongodb-arbiter-headless"
-	if factory.AmfConfig.Configuration.Mongodb != nil &&
+	if factory.AmfConfig.Configuration.Mongodb != nil ||
 		factory.AmfConfig.Configuration.Mongodb.Url != "" {
 		dbUrl = factory.AmfConfig.Configuration.Mongodb.Url
 	}
@@ -44,6 +46,7 @@ func InitAmfContext(context *context.AMFContext) {
 	if context.NfId == "" {
 		context.NfId = uuid.New().String()
 	}
+	metrics.SetNfInstanceId(context.NfId)
 
 	if configuration.AmfName != "" {
 		context.Name = configuration.AmfName
diff --git a/util/path.go b/util/path.go
index 9d8120e..14db302 100644
--- a/util/path.go
+++ b/util/path.go
@@ -9,7 +9,7 @@
 package util
 
 import (
-	"github.com/omec-project/util/path_util"
+	"github.com/omec-project/path_util"
 )
 
 var (
diff --git a/util/path_debug.go b/util/path_debug.go
index 5bf24fa..dd7ecf4 100644
--- a/util/path_debug.go
+++ b/util/path_debug.go
@@ -9,7 +9,7 @@
 package util
 
 import (
-	"github.com/omec-project/util/path_util"
+	"github.com/omec-project/path_util"
 )
 
 var (
diff --git a/util/search_nf_service.go b/util/search_nf_service.go
index fb53806..7a0bdcd 100644
--- a/util/search_nf_service.go
+++ b/util/search_nf_service.go
@@ -12,8 +12,7 @@ import (
 )
 
 func SearchNFServiceUri(nfProfile models.NfProfile, serviceName models.ServiceName,
-	nfServiceStatus models.NfServiceStatus,
-) (nfUri string) {
+	nfServiceStatus models.NfServiceStatus) (nfUri string) {
 	if nfProfile.NfServices != nil {
 		for _, service := range *nfProfile.NfServices {
 			if service.ServiceName == serviceName && service.NfServiceStatus == nfServiceStatus {
